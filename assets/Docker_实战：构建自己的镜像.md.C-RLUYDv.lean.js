import{_ as i,c as a,a3 as n,o as t}from"./chunks/framework.CAwIQbWu.js";const c=JSON.parse('{"title":"实战：构建自己的镜像","description":"","frontmatter":{},"headers":[],"relativePath":"Docker/实战：构建自己的镜像.md","filePath":"Docker/实战：构建自己的镜像.md","lastUpdated":1676881906000}'),p={name:"Docker/实战：构建自己的镜像.md"};function e(h,s,l,k,r,d){return t(),a("div",null,s[0]||(s[0]=[n(`<h1 id="实战-构建自己的镜像" tabindex="-1">实战：构建自己的镜像 <a class="header-anchor" href="#实战-构建自己的镜像" aria-label="Permalink to &quot;实战：构建自己的镜像&quot;">​</a></h1><p>构建镜像有两种，一种是在命令行中实现，一种通过 dockerfile 实现</p><p>这里，我们以 ubuntu 为例，构建自己的镜像</p><h2 id="命令行中实现" tabindex="-1">命令行中实现 <a class="header-anchor" href="#命令行中实现" aria-label="Permalink to &quot;命令行中实现&quot;">​</a></h2><p>思路：</p><p>第一步：进入容器</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -it</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ubuntu_node_johanbo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ubuntu:latest</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /bin/bash</span></span></code></pre></div><p>解释：以 <code>ubuntu:latest</code> 为镜像构建名字为 ubuntu_node_johanbo 的容器，并进入容器中</p><p>第二步：在容器中安装 nodejs, npm 和 pm2</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apt-get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;&amp; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apt-get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -y</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nodejs</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> npm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;&amp; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pm2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -g</span></span></code></pre></div><p>第三步：退出容器</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">按住</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Ctrl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> +</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> +</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> q</span></span></code></pre></div><p>第四步： 将修改后的容器打包为镜像</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ps</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 查看正在运行的容器，找到刚刚启动的容器Id</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">容器I</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">D</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">自定义的镜像</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">名</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> images</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 查看镜像</span></span></code></pre></div><p>此时，我们的镜像已经生成了。这个镜像中以 ubuntu 为底层，并安装了 node，npm 和 pm2 等包。如果你愿意，可以通过命令<code>docker push &lt;自定义镜像名&gt;</code> 推送至远端仓库</p><p>但这种方法，你需要在容器中做多次操作，一不小心也许就有出错。所以，大多数情况下，推荐第二种，使用 dockerfile 来规范你的镜像</p><h2 id="dockerfile-构建镜像" tabindex="-1">dockerfile 构建镜像 <a class="header-anchor" href="#dockerfile-构建镜像" aria-label="Permalink to &quot;dockerfile 构建镜像&quot;">​</a></h2><p>第一步：编写 dockerfile</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 基于Ubuntu image</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FROM</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> daocloud.io/library/ubuntu:latest</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># MAINTAINER</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">LABEL</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> version=&quot;1.0&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> by=&quot;johan&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 设置时区</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">RUN</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sh</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;echo &#39;Asia/Shanghai&#39; &gt; /etc/timezone&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;&amp; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dpkg-reconfigure</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> noninteractive</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tzdata</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 更换 Ubuntu 镜像</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">RUN</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;\\n\\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">deb http://mirrors.aliyun.com/ubuntu/ trusty main restricted universe multiverse\\n\\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">deb http://mirrors.aliyun.com/ubuntu/ trusty-security main restricted universe multiverse\\n\\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">deb http://mirrors.aliyun.com/ubuntu/ trusty-updates main restricted universe multiverse\\n\\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">deb http://mirrors.aliyun.com/ubuntu/ trusty-proposed main restricted universe multiverse\\n\\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">deb http://mirrors.aliyun.com/ubuntu/ trusty-backports main restricted universe multiverse\\n\\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">deb-src http://mirrors.aliyun.com/ubuntu/ trusty main restricted universe multiverse\\n\\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">deb-src http://mirrors.aliyun.com/ubuntu/ trusty-security main restricted universe multiverse\\n\\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">deb-src http://mirrors.aliyun.com/ubuntu/ trusty-updates main restricted universe multiverse\\n\\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">deb-src http://mirrors.aliyun.com/ubuntu/ trusty-proposed main restricted universe multiverse\\n\\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">deb-src http://mirrors.aliyun.com/ubuntu/ trusty-backports main restricted universe multiverse\\n&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/etc/apt/sources.list</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 安装Node.js与NPM</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">RUN</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt-get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;&amp; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apt-get</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -y</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nodejs</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> npm</span></span></code></pre></div><p>第二步：构建镜像</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ubuntu_node_johan:v1.0</span></span></code></pre></div><p>完</p><p>以上两种为构建镜像的两种方式</p>`,23)]))}const u=i(p,[["render",e]]);export{c as __pageData,u as default};
