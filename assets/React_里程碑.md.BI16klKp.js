import{_ as e,c as t,a3 as l,o as i}from"./chunks/framework.CAwIQbWu.js";const p=JSON.parse('{"title":"React 里程碑","description":"","frontmatter":{},"headers":[],"relativePath":"React/里程碑.md","filePath":"React/里程碑.md","lastUpdated":1718068265000}'),r={name:"React/里程碑.md"};function o(c,a,n,h,d,u){return i(),t("div",null,a[0]||(a[0]=[l('<h1 id="react-里程碑" tabindex="-1">React 里程碑 <a class="header-anchor" href="#react-里程碑" aria-label="Permalink to &quot;React 里程碑&quot;">​</a></h1><p>React 是 Mate 的内部项目，于2013年开源正式推出</p><h2 id="v0-xx" tabindex="-1">V0.xx <a class="header-anchor" href="#v0-xx" aria-label="Permalink to &quot;V0.xx&quot;">​</a></h2><ul><li></li></ul><h2 id="v15" tabindex="-1">V15 <a class="header-anchor" href="#v15" aria-label="Permalink to &quot;V15&quot;">​</a></h2><ul><li>生命周期</li></ul><h2 id="v16-0-2017-9" tabindex="-1">V16.0（2017.9） <a class="header-anchor" href="#v16-0-2017-9" aria-label="Permalink to &quot;V16.0（2017.9）&quot;">​</a></h2><ul><li><p>重写渲染架构，名曰 Fiber</p><ul><li>解决 V15 在大组件中更新状态时卡顿问题</li></ul></li><li><p>推出 createPortal API</p><ul><li>让节点渲染到指定容器内</li><li>在 15 里，方法是 XXX</li></ul></li><li><p>引入 componentDidCatch 钩子</p><ul><li>为捕获渲染中的异常</li></ul></li></ul><h2 id="v16-2" tabindex="-1">V16.2 <a class="header-anchor" href="#v16-2" aria-label="Permalink to &quot;V16.2&quot;">​</a></h2><ul><li>推出 Fragment，解决数组元素同级渲染问题</li></ul><h2 id="v16-3" tabindex="-1">V16.3 <a class="header-anchor" href="#v16-3" aria-label="Permalink to &quot;V16.3&quot;">​</a></h2><ul><li>增加 React.createRef() API，可以通过 React.createRef 取得 Ref 对象；</li><li>增加 React.forwardRef() API，解决高阶组件 ref 传递问题；</li><li>增加 getDerivedStateFromProps 和 getSnapshotBeforeUpdate 生命周期</li><li>推出新版本 Context api，迎接 Provider/Consumer 时代 <ul><li><code>React.createContext()</code>API 会被 React 包暴露出来。</li></ul></li></ul><h2 id="v16-4" tabindex="-1">V16.4 <a class="header-anchor" href="#v16-4" aria-label="Permalink to &quot;V16.4&quot;">​</a></h2><ul><li>getSnapshotBeforeUpdate 的一个变化</li></ul><p>与 16.3 的区别在于，有一张图</p><h2 id="v16-6" tabindex="-1">V16.6 <a class="header-anchor" href="#v16-6" aria-label="Permalink to &quot;V16.6&quot;">​</a></h2><ul><li>增加 React.memo() API，用于控制子组件渲染；</li><li>增加 React.lazy() API 实现代码分割；</li><li>增加 contextType 让类组件更便捷的使用 context；</li><li>增加声明周期 getDerivedStateFromError 代替 componentDidCatch</li></ul><h2 id="v16-8-2019-2-⭐️" tabindex="-1">V16.8（2019.2）⭐️ <a class="header-anchor" href="#v16-8-2019-2-⭐️" aria-label="Permalink to &quot;V16.8（2019.2）⭐️&quot;">​</a></h2><ul><li>引入 Hooks，改变了函数组件</li><li>支持 React Hooks，使函数组件也能像类组件那样拥有状态</li></ul><h2 id="v17-2020-10-过度版本" tabindex="-1">V17（2020.10）过度版本 <a class="header-anchor" href="#v17-2020-10-过度版本" aria-label="Permalink to &quot;V17（2020.10）过度版本&quot;">​</a></h2><p>事件绑定由 document 变成 container，移除事件池</p><p>react17 jsx 就不需要引入 React（？）</p><h2 id="v18-2022-3" tabindex="-1">V18（2022.3） <a class="header-anchor" href="#v18-2022-3" aria-label="Permalink to &quot;V18（2022.3）&quot;">​</a></h2><ul><li>Concurrent Mode（并发模式）</li><li>setState 自动批处理</li><li>流式 SSR</li><li>Server Component</li></ul><h2 id="v19-beta-2024" tabindex="-1">V19 beta（2024） <a class="header-anchor" href="#v19-beta-2024" aria-label="Permalink to &quot;V19 beta（2024）&quot;">​</a></h2><p>其中V17-V19的详细内容更新可以看<a href="./React版本更新.html">React 版本更新</a></p><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h2><ul><li><a href="https://blog.csdn.net/cherry__yu/article/details/137082754" target="_blank" rel="noreferrer">React系列之React版本时间线和主要更新</a></li></ul>',28)]))}const b=e(r,[["render",o]]);export{p as __pageData,b as default};
