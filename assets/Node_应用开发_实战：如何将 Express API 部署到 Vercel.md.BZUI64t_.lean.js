import{_ as e,c as a,a3 as i,o as t}from"./chunks/framework.CAwIQbWu.js";const d=JSON.parse('{"title":"如何将 Express API 部署到 Vercel","description":"","frontmatter":{},"headers":[],"relativePath":"Node/应用开发/实战：如何将 Express API 部署到 Vercel.md","filePath":"Node/应用开发/实战：如何将 Express API 部署到 Vercel.md","lastUpdated":1686818131000}'),l={name:"Node/应用开发/实战：如何将 Express API 部署到 Vercel.md"};function n(p,s,h,r,k,o){return t(),a("div",null,s[0]||(s[0]=[i(`<h1 id="如何将-express-api-部署到-vercel" tabindex="-1">如何将 Express API 部署到 Vercel <a class="header-anchor" href="#如何将-express-api-部署到-vercel" aria-label="Permalink to &quot;如何将 Express API 部署到 Vercel&quot;">​</a></h1><p>三个项目带你了解如何将 Express API 部署到 Vercel</p><h2 id="极简项目" tabindex="-1">极简项目 <a class="header-anchor" href="#极简项目" aria-label="Permalink to &quot;极简项目&quot;">​</a></h2><h3 id="新建项目" tabindex="-1">新建项目 <a class="header-anchor" href="#新建项目" aria-label="Permalink to &quot;新建项目&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> init</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -y</span></span></code></pre></div><h3 id="安装-express" tabindex="-1">安装 express <a class="header-anchor" href="#安装-express" aria-label="Permalink to &quot;安装 express&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> express</span></span></code></pre></div><h3 id="新建-index-js" tabindex="-1">新建 index.js <a class="header-anchor" href="#新建-index-js" aria-label="Permalink to &quot;新建 index.js&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">touch</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> index.js</span></span></code></pre></div><h3 id="编写-express-服务" tabindex="-1">编写 express 服务 <a class="header-anchor" href="#编写-express-服务" aria-label="Permalink to &quot;编写 express 服务&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> express</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;express&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> app</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> express</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">req</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">send</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Express on Vercel&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">listen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;3000 端口启动&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h3 id="新建-vercel-json-文件" tabindex="-1">新建 vercel.json 文件 <a class="header-anchor" href="#新建-vercel-json-文件" aria-label="Permalink to &quot;新建 vercel.json 文件&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">touch</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> vercel.json</span></span></code></pre></div><h3 id="编写-vercel-json-代码" tabindex="-1">编写 vercel.json 代码 <a class="header-anchor" href="#编写-vercel-json-代码" aria-label="Permalink to &quot;编写 vercel.json 代码&quot;">​</a></h3><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;version&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;builds&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;src&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;use&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;@vercel/node&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="下载-vercel-cli" tabindex="-1">下载 vercel cli <a class="header-anchor" href="#下载-vercel-cli" aria-label="Permalink to &quot;下载 vercel cli&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> vercel</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -g</span></span></code></pre></div><h3 id="部署-express-api" tabindex="-1">部署 Express API <a class="header-anchor" href="#部署-express-api" aria-label="Permalink to &quot;部署 Express API&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vercel</span></span></code></pre></div><p>此时，访问就能访问刚刚做的 express 服务。当你修改内容，再在命令行输入<code>vercel</code>，就能实现新的部署。但这个时候的部署的域名是一个这次提交的域名，如果要更新原域名的内容，加上 <code>--prod</code> 即可，例如</p><p>第一次 vercel 后，<a href="https://easy-express-vercel.vercel.app/" target="_blank" rel="noreferrer">easy-express-vercel.vercel.app</a> 就有能力了，</p><p>第二次 vercel 后，会生成 <a href="https://easy-express-vercel-8vqs2goq1-t511069160.vercel.app/" target="_blank" rel="noreferrer">easy-express-vercel-8vqs2goq1-t511069160.vercel.app</a>（类似这种域名），但是<a href="https://easy-express-vercel.vercel.app/" target="_blank" rel="noreferrer">easy-express-vercel.vercel.app</a> 的内容没有改变</p><p>当使用 <code>vercel --prod</code> 后，就能更新 <a href="https://easy-express-vercel.vercel.app/" target="_blank" rel="noreferrer">easy-express-vercel.vercel.app</a> 内容与第二次内容一致</p><p>这里我们使用的是通过 vercel cli 命令行来部署，相关文档可看：<a href="https://vercel.com/docs/cli" target="_blank" rel="noreferrer">https://vercel.com/docs/cli</a></p><h3 id="连接-git" tabindex="-1">连接 git <a class="header-anchor" href="#连接-git" aria-label="Permalink to &quot;连接 git&quot;">​</a></h3><p>我希望我们的代码能与 git 连接，当我们推送到 github 后，自动发布。这也是<a href="https://juejin.cn/post/7094911994226016292" target="_blank" rel="noreferrer">Vercel 部署 Node 服务</a>没有说到的点</p><p>先将 node_modules 加入到 .gitignore 中，再初始化项目，提交到 github，在项目中点击这块</p><p><img src="https://s2.loli.net/2023/06/06/ZHBmINk8EVrahp1.png" alt="image-20230606112853458"></p><p>继续点击 github</p><p><img src="https://s2.loli.net/2023/06/06/9Aj8wH3alc7udnV.png" alt="image-20230606113242813"></p><p>如此就与 github 绑定了。下次我们提交到 github 仓库后 vercel 就会自动帮我们发布</p><h2 id="时间戳服务" tabindex="-1">时间戳服务 <a class="header-anchor" href="#时间戳服务" aria-label="Permalink to &quot;时间戳服务&quot;">​</a></h2><p>以上的例子过于简单，之前写的<a href="https://juejin.cn/post/7094911994226016292" target="_blank" rel="noreferrer">Vercel 部署 Node 服务</a>很多朋友提问笔者，甚至有网友直接发邮件有问，笔者这里再部署两个 Node 服务，希望能给到一些参考</p><p>例子来源 freecodecamp.org 的后端开发和 API 中的<a href="https://www.freecodecamp.org/chinese/learn/back-end-development-and-apis/back-end-development-and-apis-projects/timestamp-microservice" target="_blank" rel="noreferrer">时间戳服务</a></p><p>它和极简项目的区别，不需要新建 vercel.json 文件，直接部署即可</p><p>github地址：<a href="https://github.com/johanazhu/timestamp-express-vercel" target="_blank" rel="noreferrer">https://github.com/johanazhu/timestamp-express-vercel</a></p><h2 id="短网址服务" tabindex="-1">短网址服务 <a class="header-anchor" href="#短网址服务" aria-label="Permalink to &quot;短网址服务&quot;">​</a></h2><p>例子来源 freecodecamp.org 的后端开发和 API 中的<a href="https://www.freecodecamp.org/chinese/learn/back-end-development-and-apis/back-end-development-and-apis-projects/url-shortener-microservice" target="_blank" rel="noreferrer">短链接服务</a></p><p>它和极简项目的区别也是不需要新建 vercel.json 文件，直接部署即可</p><p>github地址：<a href="https://github.com/johanazhu/shorturl-express-vercel" target="_blank" rel="noreferrer">https://github.com/johanazhu/shorturl-express-vercel</a></p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>用 vercel 部署 node 服务其实很简单，个人认为它是最小实现的最佳实践</p><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h2><ul><li><a href="https://vercel.com/guides/using-express-with-vercel" target="_blank" rel="noreferrer">using-express-with-vercel</a></li><li><a href="https://vercel.com/docs/concepts/projects/project-configuration" target="_blank" rel="noreferrer">vercel.json文档</a></li></ul>`,44)]))}const g=e(l,[["render",n]]);export{d as __pageData,g as default};
