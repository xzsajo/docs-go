import{_ as a,c as i,a3 as e,o as t}from"./chunks/framework.CAwIQbWu.js";const c=JSON.parse('{"title":"实战：爬虫每日日报","description":"","frontmatter":{},"headers":[],"relativePath":"Node/应用开发/实战：爬虫每日日报.md","filePath":"Node/应用开发/实战：爬虫每日日报.md","lastUpdated":1686819612000}'),n={name:"Node/应用开发/实战：爬虫每日日报.md"};function l(p,s,h,r,k,o){return t(),i("div",null,s[0]||(s[0]=[e(`<h1 id="实战-爬虫每日日报" tabindex="-1">实战：爬虫每日日报 <a class="header-anchor" href="#实战-爬虫每日日报" aria-label="Permalink to &quot;实战：爬虫每日日报&quot;">​</a></h1><p>笔者认为爬虫是自己至今没有尝试的领域，想做一版与爬虫相关的实战，于是就有了每日日报这一实战</p><p>笔者的想法是爬知乎的<a href="https://www.zhihu.com/people/mt36501" target="_blank" rel="noreferrer">每天60秒读懂世界</a> ，网易的<a href="https://www.163.com/dy/media/T1603594732083.html" target="_blank" rel="noreferrer">365资讯简报</a>，readhub 的 <a href="https://readhub.cn/daily" target="_blank" rel="noreferrer">每日早报</a>。然后整合在一起。这一想法主要参考了<a href="https://www.789dl.cn/109.html" target="_blank" rel="noreferrer">每日60秒读懂世界-文字版</a> 和<a href="https://icodeq.com/2022/5fe2010403bb/" target="_blank" rel="noreferrer">前后端均基于 vercel 的每日早报项目</a></p><h2 id="使用技术栈" tabindex="-1">使用技术栈： <a class="header-anchor" href="#使用技术栈" aria-label="Permalink to &quot;使用技术栈：&quot;">​</a></h2><p>typescript 、node serverless、vercel</p><h2 id="正文" tabindex="-1">正文 <a class="header-anchor" href="#正文" aria-label="Permalink to &quot;正文&quot;">​</a></h2><p>这样就能让 serverless 下载依赖，如此就能运行自己的爬虫代码</p><p>笔者后续改成了 typescript，安装依赖</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> typescript</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @vercel/node</span></span></code></pre></div><p>创建 <code>tsconfig.json</code></p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;compilerOptions&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;target&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ESNext&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;module&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;CommonJS&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;outDir&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;dist&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;strict&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;esModuleInterop&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>新建 api 文件夹，并在其中新建 <code>hello.ts</code> 文件</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> type</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> VercelRequest,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> VercelResponse</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> }</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;@vercel/node&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> default function (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">request:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> VercelRequest,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> response:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> VercelResponse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  const</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;World&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> }</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> request.query</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  response.send(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Hello</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}!\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>启动 vercel ，将其部署到线上</p><p>接着本地调试 <code>vercel dev</code>，如果走的通就部署到线上</p><ul><li>vercel dev：本地调试</li><li>vercel：预览部署到预览线上</li><li>vercel --prod：部署到真正的线上</li></ul><p>具体的爬虫代码，其实就是通过 cheerio 进行 API 操作</p><h2 id="js-版本" tabindex="-1">JS 版本 <a class="header-anchor" href="#js-版本" aria-label="Permalink to &quot;JS 版本&quot;">​</a></h2><p>笔者最开始用 Javascript 来写代码，写完后部署上后，报错</p><p><img src="https://s2.loli.net/2023/06/15/SNt7GaRy1idmJQp.png" alt="服务报错"></p><p>笔者查了下 log，报错信息：<code>Error [ERR_MODULE_NOT_FOUND]: Cannot find module &#39;axios&#39; ...</code></p><p>原因是node serverless 最开始的时候没有下载 axios 等依赖包，只要在 build 中加上即可：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>{</span></span>
<span class="line"><span>  &quot;build&quot;: {</span></span>
<span class="line"><span>    &quot;command&quot;: &quot;npm install&quot;,</span></span>
<span class="line"><span>    &quot;src&quot;: &quot;api&quot;,</span></span>
<span class="line"><span>    &quot;use&quot;: &quot;@vercel/node&quot;</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>报错信息：不能用<code>import fetchNews from &quot;../news/zhihu&quot;;</code> ，需要给它加上文件后缀，即<code>import fetchNews from &quot;../news/zhihu.js&quot;;</code></p><h2 id="写在最后" tabindex="-1">写在最后 <a class="header-anchor" href="#写在最后" aria-label="Permalink to &quot;写在最后&quot;">​</a></h2><p>笔者做这个项目的原因是为了学习node 爬虫，并在 vercel 部署 node serverless 而已</p><p>项目地址：<a href="https://github.com/johanazhu/readhub-api" target="_blank" rel="noreferrer">https://github.com/johanazhu/readhub-api</a></p><p>预览地址：<a href="https://news-xi-ten.vercel.app/api" target="_blank" rel="noreferrer">https://news-xi-ten.vercel.app/api</a></p><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h2><ul><li><a href="https://vercel.com/guides/why-does-my-serverless-function-work-locally-but-not-when-deployed" target="_blank" rel="noreferrer">why-does-my-serverless-function-work-locally-but-not-when-deployed</a></li><li><a href="https://vercel.com/docs/concepts/functions/serverless-functions/runtimes/node-js" target="_blank" rel="noreferrer">serverless-functions/runtimes/node-js</a></li><li><a href="https://tangly1024.com/article/vercel-free-serverless-api" target="_blank" rel="noreferrer">Vercel搭建API 服务，无需服务器</a></li></ul>`,30)]))}const u=a(n,[["render",l]]);export{c as __pageData,u as default};
