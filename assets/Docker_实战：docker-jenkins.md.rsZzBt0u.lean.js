import{_ as i,c as a,a3 as e,o as n}from"./chunks/framework.CAwIQbWu.js";const c=JSON.parse('{"title":"实战：docker-jenkins","description":"","frontmatter":{},"headers":[],"relativePath":"Docker/实战：docker-jenkins.md","filePath":"Docker/实战：docker-jenkins.md","lastUpdated":1676881906000}'),t={name:"Docker/实战：docker-jenkins.md"};function h(p,s,l,k,r,o){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="实战-docker-jenkins" tabindex="-1">实战：docker-jenkins <a class="header-anchor" href="#实战-docker-jenkins" aria-label="Permalink to &quot;实战：docker-jenkins&quot;">​</a></h1><p>上篇，我们讲到了 <a href="./实战：dockerfile最小实践.html">dockerfile 的最小实现</a>，但也抛出了一个问题，即使 docker 解决了环境和部署问题，但 CICD 还是让人感到心累，本章通过 docker 生成 jenkins 容器，并将 jenkins 与 github 结合，实现 一定程度上的 CI</p><h2 id="希望达到的效果" tabindex="-1">希望达到的效果 <a class="header-anchor" href="#希望达到的效果" aria-label="Permalink to &quot;希望达到的效果&quot;">​</a></h2><p>我希望我在 git push 后，代码推送至 jenkins ，在 jenkins 点击 发布，就能将我的代码推送至 服务器，我浏览页面，马上就能看到效果</p><p>git push 到仓库，在 jenkins 上点击发布就能发布。</p><p>jenkins 绑定 远端仓库 和 服务器</p><p>git push 到 仓库后，jenkins 监听到，执行脚本</p><p>删除原来的容器，并生成一个新的容器 映射出端口</p><h2 id="jenkins-快速入门" tabindex="-1">jenkins 快速入门 <a class="header-anchor" href="#jenkins-快速入门" aria-label="Permalink to &quot;jenkins 快速入门&quot;">​</a></h2><p>它是 java 语言写的 cicd，</p><p>它是一套用 java 写的 cicd 系统，通过 ssh 可以与服务器打交道</p><h2 id="实现思路" tabindex="-1">实现思路 <a class="header-anchor" href="#实现思路" aria-label="Permalink to &quot;实现思路&quot;">​</a></h2><p>jenkins</p><h2 id="实现步骤" tabindex="-1">实现步骤 <a class="header-anchor" href="#实现步骤" aria-label="Permalink to &quot;实现步骤&quot;">​</a></h2><p>第一步：拉取 jenkins 镜像，以此为镜像生成容器</p><p>第二步：安装配置 jenkins</p><p>第三步：准备 node 服务</p><p>第四步：jenkins 部署 node 服务</p><h2 id="第一步-生成-jenkins-容器" tabindex="-1">第一步：生成 jenkins 容器 <a class="header-anchor" href="#第一步-生成-jenkins-容器" aria-label="Permalink to &quot;第一步：生成 jenkins 容器&quot;">​</a></h2><p>先从 dockerhub 上拉取 jenkins</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> jenkins/jenkins:lts</span></span></code></pre></div><p>创建一个 jenkins 目录</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mkdir</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /home/johan/www/jenkins</span></span></code></pre></div><p>提高此文件的权限</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> chmod</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -R</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 777</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /home/johan/www/jenkins</span></span></code></pre></div><p>以 jenkins/jenkins:lts 为镜像生成一容器</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> jenkins</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 8080:8080</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 50000:50000</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /home/johan/www/jenkins:/var/jenkins_home</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> jenkins/jenkins:lts</span></span></code></pre></div><p><code>-d</code>： 后台运行</p><p><code>-v</code>： 数据卷，将容器中的内容映射到本机上</p><p>查看容器内部日志</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> logs</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> jenkins</span></span></code></pre></div><p>输入域名网址查看 <code>jenkins</code> 是否安装成功</p><p>看到 解锁 jenkins，输入 logs 中的密码，即能解锁</p><h2 id="第二步-安装配置-jenkins" tabindex="-1">第二步：安装配置 jenkins <a class="header-anchor" href="#第二步-安装配置-jenkins" aria-label="Permalink to &quot;第二步：安装配置 jenkins&quot;">​</a></h2><p>按照安装推荐插件安装 jenkins 的插件</p><h3 id="配合-jenkins" tabindex="-1">配合 jenkins <a class="header-anchor" href="#配合-jenkins" aria-label="Permalink to &quot;配合 jenkins&quot;">​</a></h3><p><img src="https://s2.loli.net/2022/04/25/ZAP7h9KdLGYF5EO.png" alt="docker_jenkins安装推荐的插件"></p><p>需要等一段时间，下载这些插件</p><p><img src="https://s2.loli.net/2022/04/25/j3JUkLx5TctPYub.png" alt="docker_jenkins新手"></p><p><strong>报错就重试，咔咔就是干</strong></p><h3 id="创建管理员账号" tabindex="-1">创建管理员账号 <a class="header-anchor" href="#创建管理员账号" aria-label="Permalink to &quot;创建管理员账号&quot;">​</a></h3><p><img src="https://s2.loli.net/2022/04/25/PI1vk6nUzNybFoj.png" alt="docker_jenkins创建账号"></p><p>保存成功，开始使用 jenkins</p><h3 id="换源" tabindex="-1">换源 <a class="header-anchor" href="#换源" aria-label="Permalink to &quot;换源&quot;">​</a></h3><p><code>https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json</code></p><p>前往 系统管理 ——&gt; 插件管理 ——&gt; 高级 ——&gt; 拉到最下面</p><p><img src="https://s2.loli.net/2022/04/25/inAJ68CsFcfvQP4.png" alt="docker_jenkins换源"></p><h3 id="下载-ssh-插件" tabindex="-1">下载 ssh 插件 <a class="header-anchor" href="#下载-ssh-插件" aria-label="Permalink to &quot;下载 ssh 插件&quot;">​</a></h3><p>前往 系统管理 ——&gt; 插件管理 ——&gt; 可选插件</p><p>搜索 &quot;Publish over SSH&quot;，并安装</p><p><img src="https://s2.loli.net/2022/04/25/3BWNFyp8JqdZztY.png" alt="docker_jenkins下载ssh插件"></p><h3 id="配置-ssh" tabindex="-1">配置 ssh <a class="header-anchor" href="#配置-ssh" aria-label="Permalink to &quot;配置 ssh&quot;">​</a></h3><p>前往 系统管理 ——&gt; 系统配置——&gt; 拉到最下面（Publish over SSH）</p><p><img src="https://s2.loli.net/2022/04/25/9OXJgE1MLa2SFhw.png" alt="docker_jenkins配置ssh2"></p><p>使用密码</p><p><img src="https://s2.loli.net/2022/04/25/tSAblr4fsK9au2Y.png" alt="docker_jenkins设置服务器上的ssh"></p><p>点击 Test Configuration，已经和服务器接通</p><h3 id="安装-nodejs-插件" tabindex="-1">安装 nodejs 插件 <a class="header-anchor" href="#安装-nodejs-插件" aria-label="Permalink to &quot;安装 nodejs 插件&quot;">​</a></h3><p>node 插件在跑 node 项目时需要使用，这里先安装好</p><p>前往 系统管理 ——&gt; 插件管理 ——&gt; 可选插件</p><p>搜索 node，并安装</p><h3 id="全局配置-node" tabindex="-1">全局配置 node <a class="header-anchor" href="#全局配置-node" aria-label="Permalink to &quot;全局配置 node&quot;">​</a></h3><p>前往 系统管理 ——&gt; 全局工具配置 ——&gt; NodeJS</p><p><img src="https://s2.loli.net/2022/04/25/1LbaU872FEdBGoe.png" alt="docker_jenkins安装node插件1"></p><p>应用并保存它</p><p>关于 jenkins 的搭建到此告一段落</p><h2 id="第三步-准备-node-服务" tabindex="-1">第三步：准备 node 服务 <a class="header-anchor" href="#第三步-准备-node-服务" aria-label="Permalink to &quot;第三步：准备 node 服务&quot;">​</a></h2><p>我们拿上一章讲的 koa 为例子讲解</p><p>生成 <code>.gitignore</code> 文件，并写入 <code>node_modules</code></p><p>将 dockerfile_koa_demo 上传至 github</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> init</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;first_commit&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> remote</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/johanazhu/dockerfile_koa_server.git</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> master</span></span></code></pre></div><h2 id="第四步-jenkins-部署-node-服务" tabindex="-1">第四步： jenkins 部署 node 服务 <a class="header-anchor" href="#第四步-jenkins-部署-node-服务" aria-label="Permalink to &quot;第四步： jenkins 部署 node 服务&quot;">​</a></h2><h3 id="创建一个任务" tabindex="-1">创建一个任务 <a class="header-anchor" href="#创建一个任务" aria-label="Permalink to &quot;创建一个任务&quot;">​</a></h3><p><img src="https://s2.loli.net/2022/04/25/Fihea7EWtySL48l.png" alt="jenkins新建任务"></p><h3 id="起任务名" tabindex="-1">起任务名 <a class="header-anchor" href="#起任务名" aria-label="Permalink to &quot;起任务名&quot;">​</a></h3><p><img src="https://s2.loli.net/2022/04/25/FjS2EtdcJC9Zhw5.png" alt="jenkins起任务名字"></p><h3 id="任务描述" tabindex="-1">任务描述 <a class="header-anchor" href="#任务描述" aria-label="Permalink to &quot;任务描述&quot;">​</a></h3><p><img src="https://s2.loli.net/2022/04/25/JkIsXdMNFDm1CQp.png" alt="jenkins任务描述1"></p><p><img src="https://s2.loli.net/2022/04/25/3J2vBIXWrfECmLg.png" alt="jenkins任务描述2"></p><p><img src="https://s2.loli.net/2022/04/25/3ny8Xafrt5whNvC.png" alt="jenkins任务描述3"></p><p><img src="https://s2.loli.net/2022/04/25/t1r6Ed8hP3zaxSC.png" alt="jenkins任务描述5"></p><p>代码如下：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> stop</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> koa_server_container</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> koa_server_container</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rmi</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> johanbo/koa_server:v.1.0.0</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /home/johan/www/jenkins/workspace/dockerfile_koa_server</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> johanbo/koa_server:v1.0.0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> koa_server_container</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 3011:3010</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  johanbo/koa_server:v1.0.0</span></span></code></pre></div><p>解读以上代码：</p><p>第一行：停止 koa_server_container 容器</p><p>第二行：删除此容器</p><p>第三行：删除生成此容器的镜像</p><p>第四行：进入服务器中的 jenkins 数据卷相对于的目录</p><p>注意：<code>dockerfile_koa_server</code>为你一开始创建该项目时的名字</p><p>第五行：生成一个名叫 johanbo/koa_server:v1.0.0 的镜像</p><p>第六行：生成一个以 johanbo/koa_server:v1.0.0 为镜像的名字叫做 koa_server_container 的容器，并将本机的 3011 端口与容器的 3010 做映射</p><p>应用并保存</p><h3 id="立即构建服务" tabindex="-1">立即构建服务 <a class="header-anchor" href="#立即构建服务" aria-label="Permalink to &quot;立即构建服务&quot;">​</a></h3><p><img src="https://s2.loli.net/2022/04/25/koaEIWOrUL9Ruqc.png" alt="jenkins控制台输出"></p><p>发现成功，并且能看到“hello，docker“</p><p>在本地更改原文件 app.js</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ctx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ctx.body </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;hello, docker, jenkins&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><p>提交代码至 github</p><p>通过 jenkins 再次部署 node 服务</p><p><img src="https://s2.loli.net/2022/04/25/seUBLPV5wdaNAcF.png" alt="jenkins立即构建"></p><p>构建完成，刷新浏览器，发现内容已经更换</p><p><img src="https://s2.loli.net/2022/04/25/x1myqfR4VeKJAEU.png" alt="jenkins部署成功"></p><blockquote><p>PS：此服务现已下架</p></blockquote><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>在实际开发中其实踩了很多坑，虽然有很好的别人写过的教程，但自己动手做时却有各种限制，比如操作系统不同，秘钥，jenkins 的 SSH 插件，jenkins 里支持 docker 命令的插件集成问题等等</p><p>网上关于两种的教程也有很多，但大多数是默认：jenkins 和应用部署在同一台服务器上，这样就能在相对应的文件中构建镜像，</p><p>但如果 jenkins 和应用程序是部署在两台服务器上该如何操作呢？留给下一个挑战者</p><h2 id="参考文章" tabindex="-1">参考文章 <a class="header-anchor" href="#参考文章" aria-label="Permalink to &quot;参考文章&quot;">​</a></h2><ul><li><a href="https://www.infoq.cn/article/0sueQNsY9tLDVi79UZms" target="_blank" rel="noreferrer">怎样用 Jenkins、Docker 和 CI/CD 构建无服务器应用程序？</a></li><li><a href="https://juejin.im/post/6844903984419831815" target="_blank" rel="noreferrer">【手把手系列之】Jenkins+Docker 自动化部署 vue 项目</a></li><li><a href="http://www.wallcopper.com/linux/3689.html" target="_blank" rel="noreferrer">Failed to add SSH key. Message “invalid privatekey” 问题</a></li><li><a href="https://zhuanlan.zhihu.com/p/39549204" target="_blank" rel="noreferrer">jenkins 配置 publish over ssh 遇到的问题</a></li><li><a href="https://www.slideshare.net/Docker/build-publish-deploy-and-test-docker-images-and-containers-with-jenkins-workflow" target="_blank" rel="noreferrer">Build, Publish, Deploy and Test Docker images and containers with Jenkins Workflow</a></li><li><a href="https://www.youtube.com/watch?v=mszE-OCI2V4" target="_blank" rel="noreferrer">Building Docker Images using Jenkins step by step | Devops Integration Live Demo | JavaTechie</a></li></ul>`,109)]))}const g=i(t,[["render",h]]);export{c as __pageData,g as default};
