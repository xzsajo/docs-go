import{_ as i,c as a,a3 as n,o as e}from"./chunks/framework.CAwIQbWu.js";const y=JSON.parse('{"title":"TypeScript 面试题","description":"","frontmatter":{},"headers":[],"relativePath":"JavaScript/TypeScript/面试题.md","filePath":"JavaScript/TypeScript/面试题.md","lastUpdated":1726642632000}'),t={name:"JavaScript/TypeScript/面试题.md"};function p(l,s,h,k,r,d){return e(),a("div",null,s[0]||(s[0]=[n(`<h1 id="typescript-面试题" tabindex="-1">TypeScript 面试题 <a class="header-anchor" href="#typescript-面试题" aria-label="Permalink to &quot;TypeScript 面试题&quot;">​</a></h1><h2 id="q-any、unknown、never-的区别是什么" tabindex="-1">Q：any、unknown、never 的区别是什么 <a class="header-anchor" href="#q-any、unknown、never-的区别是什么" aria-label="Permalink to &quot;Q：any、unknown、never 的区别是什么&quot;">​</a></h2><p>A：两者都是顶级类型（top type），任何类型的值都可以赋值给顶级类型变量</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> foo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 123</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 不报错</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> far</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> unknown</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 123</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 不报错</span></span></code></pre></div><p>但是 unknown 比 any 的类型检查更严格，any 什么检查都不做，unknown 要求收窄类型：</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> unknown</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Hello World&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> someString</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 报错 Type &#39;unknown&#39; is not assignable to type &#39;string&#39;.(2322)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> unknown</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Hello World&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> someString</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 不报错</span></span></code></pre></div><p>如果改成 any，基本在哪都不报错。所以能用 unknown 就优先用 unknown，类型更安全一点</p><h3 id="never" tabindex="-1">never <a class="header-anchor" href="#never" aria-label="Permalink to &quot;never&quot;">​</a></h3><p>never 是底类型，表示不应该出现的类型，这里有一个尤雨溪给出的例子</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> A</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;a&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> B</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;b&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> All</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> A</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> B</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> handleValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">val</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> All</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    switch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (val.type) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        case</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 这里 value 被收窄为 A</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        case</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;b&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // val 在这里为 B</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // val 在这里是 never</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            cont </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">exhaustiveCheck</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: never </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> val</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="q-interface-和-type-的区别" tabindex="-1">Q：interface 和 type 的区别 <a class="header-anchor" href="#q-interface-和-type-的区别" aria-label="Permalink to &quot;Q：interface 和 type 的区别&quot;">​</a></h2><p>A：</p><p>区别1：interface 只能描述对象，type 则描述所有数据类型</p><p>区别2：type 只是别名，interface 则是类型声明</p><p>区别3：type 不可重新赋值，interface 自动合并</p><p>所以一般对外 API 尽量用 interface，方便扩展；对内 API 尽量用 type，防止代码分散</p><h2 id="q-什么是联合类型和类型收窄" tabindex="-1">Q：什么是联合类型和类型收窄 <a class="header-anchor" href="#q-什么是联合类型和类型收窄" aria-label="Permalink to &quot;Q：什么是联合类型和类型收窄&quot;">​</a></h2><p>A：联合类型表示取值可以为多种类型中的一种</p><p>类型收窄是指在代码执行过程中通过一些检查将联合类型狭窄到一个特点类型</p><h2 id="q-ts-工具类型-partial、required、readonly、exclude、extract、omit、returntype-的作用和实现" tabindex="-1">Q：TS 工具类型 Partial、Required、Readonly、Exclude、Extract、Omit、ReturnType 的作用和实现? <a class="header-anchor" href="#q-ts-工具类型-partial、required、readonly、exclude、extract、omit、returntype-的作用和实现" aria-label="Permalink to &quot;Q：TS 工具类型 Partial、Required、Readonly、Exclude、Extract、Omit、ReturnType 的作用和实现?&quot;">​</a></h2><p>A:</p><ul><li>Partial 部分类型</li><li>Required 必填类型</li><li>Readonly 只读类型</li><li>Exclude 排除类型</li><li>Extract 提取类型</li><li>Omit 排除 key 类型</li><li>ReturnType 返回值类型</li></ul><h2 id="q-ts-中的-this-和-js-中的-this-有什么差异" tabindex="-1">Q：ts 中的 this 和 js 中的 this 有什么差异 <a class="header-anchor" href="#q-ts-中的-this-和-js-中的-this-有什么差异" aria-label="Permalink to &quot;Q：ts 中的 this 和 js 中的 this 有什么差异&quot;">​</a></h2><p>A: 一：静态类型检查</p><p>TypeScript 是一种强类型语言，它允许开发者在编写代码时指定 <code>this</code> 的类型。这对于确保 <code>this</code> 关键字在方法中使用时的正确性非常重要。例如，TypeScript 支持在类中通过类型注解来指定 <code>this</code> 的类型，这有助于避免运行时错误。</p><p>二：作用域和绑定</p><p>在 TypeScript 中，<code>this</code> 的解析更倾向于遵循词法作用域，这使得它在类方法和嵌套函数中能够更准确地解析出 <code>this</code> 的值。例如，使用箭头函数时，<code>this</code> 的值会继承自外层上下文。这在 JavaScript 中同样适用，但 TypeScript 提供了更强的语法支持与提示。</p><p>三：丢失 <code>this</code> 的处理</p><p>TypeScript 通过类型系统帮助识别 <code>this</code> 的丢失问题，并提供解决方案，比如使用类型声明或更改函数绑定。而在 JavaScript 中，开发者需要手动使用 <code>bind()</code>, <code>call()</code>, 或 <code>apply()</code> 方法来确保 <code>this</code> 的正确绑定。</p><h2 id="q-在-typescript-中使用-javascript-库-几种常用的方法" tabindex="-1">Q：在 TypeScript 中使用 JavaScript 库，几种常用的方法 <a class="header-anchor" href="#q-在-typescript-中使用-javascript-库-几种常用的方法" aria-label="Permalink to &quot;Q：在 TypeScript 中使用 JavaScript 库，几种常用的方法&quot;">​</a></h2><p>A: 1.直接使用，添加 // @ts-ingore</p><p>2.下载 <code>@types/xxx</code> 类型包</p><ul><li>如果没有，新建一个 xxx.d.ts 文件</li></ul><p>3.声明全局类型</p><h2 id="q-什么是泛型-generic" tabindex="-1">Q：什么是泛型（generic） <a class="header-anchor" href="#q-什么是泛型-generic" aria-label="Permalink to &quot;Q：什么是泛型（generic）&quot;">​</a></h2><p>A:</p><p>泛型（Generic Types）即多种类型。允许开发者在编写函数或类时，不预先确定具体的数据类型，而是使用类型参数来表示。</p><p>函数的本质是什么？</p><p>推后执行的、部分待定的代码</p><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h2><ul><li><a href="https://blog.fundebug.com/2021/06/28/typescript-the-difference-between-interface-and-type/" target="_blank" rel="noreferrer">使用 TypeScript 常见困惑：interface 和 type 的区别是什么？</a></li><li><a href="https://zhuanlan.zhihu.com/p/561423056" target="_blank" rel="noreferrer">TS 中 interface 和 type 的区别是什么？</a></li></ul>`,41)]))}const o=i(t,[["render",p]]);export{y as __pageData,o as default};
