import{_ as i,c as s,a3 as e,o as l}from"./chunks/framework.CAwIQbWu.js";const k=JSON.parse('{"title":"网络层面优化","description":"","frontmatter":{},"headers":[],"relativePath":"Performance/网络层面优化.md","filePath":"Performance/网络层面优化.md","lastUpdated":1728646326000}'),t={name:"Performance/网络层面优化.md"};function n(p,a,h,r,o,d){return l(),s("div",null,a[0]||(a[0]=[e(`<h1 id="网络层面优化" tabindex="-1">网络层面优化 <a class="header-anchor" href="#网络层面优化" aria-label="Permalink to &quot;网络层面优化&quot;">​</a></h1><p>这里其实可以以笔者之前写过一篇文章切入：<a href="https://blog.azhubaby.com/2022/04/15/2022-04-15-%E4%BB%8E%E8%BE%93%E5%85%A5%20url%20%E5%88%B0%E7%9C%8B%E5%88%B0%E9%A1%B5%E9%9D%A2%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88/" target="_blank" rel="noreferrer">网红面试题：从输入 url 到看到页面发生了什么</a>，我们就能一个资源从发起请求到页面渲染<strong>网络层面</strong>需要关心的路径是：</p><ul><li>HTTP缓存 —— DNS/IP解析 —— 建立 TCP 连接 —— HTTP 请求 —— 服务器返回资源 —— 断开 TCP 连接</li></ul><p>所以这一节我们着重讲三个部分</p><ul><li>HTTP 缓存</li><li>DNS 与 TCP</li><li>服务器优化</li></ul><p>其中内容和 <a href="./../HTTP/">HTTP</a> 中的内容有重合，可两两结合起来看</p><h2 id="http缓存" tabindex="-1">HTTP缓存 <a class="header-anchor" href="#http缓存" aria-label="Permalink to &quot;HTTP缓存&quot;">​</a></h2><p>HTTP缓存分为缓存和内容协商，也有强缓存和弱缓存之说</p><h3 id="如何使资源缓存" tabindex="-1">如何使资源缓存 <a class="header-anchor" href="#如何使资源缓存" aria-label="Permalink to &quot;如何使资源缓存&quot;">​</a></h3><ul><li>将资源放在 CDN 或者 OSS 上，CDN 会加上<code>Cache-Control: public, max-age=3600,must-revalidate</code></li><li>放服务器上，在 Nginx 中 加上 <code>addheader Cache-Control public, max-age=3600,must-revalidate</code></li></ul><h3 id="客户端不使用缓存的办法" tabindex="-1">客户端不使用缓存的办法 <a class="header-anchor" href="#客户端不使用缓存的办法" aria-label="Permalink to &quot;客户端不使用缓存的办法&quot;">​</a></h3><ul><li>强制刷新（Shift + F5）</li><li>浏览器设置清除缓存</li></ul><h3 id="服务器不使用缓存的办法" tabindex="-1">服务器不使用缓存的办法 <a class="header-anchor" href="#服务器不使用缓存的办法" aria-label="Permalink to &quot;服务器不使用缓存的办法&quot;">​</a></h3><p>index.html 引用的 js、css文件改变即可，一般来说，我们会通过webpack 打包前端代码，在每个 js 、css 等资源上加上 hash 值，每次打包生成 hash 值不同，就需要重新请求资源</p><h3 id="cache-control-解释" tabindex="-1">Cache-Control 解释 <a class="header-anchor" href="#cache-control-解释" aria-label="Permalink to &quot;Cache-Control 解释&quot;">​</a></h3><p>以上例子中写到了<code>Cache-Control: public, max-age=3600,must-revalidate</code>，这意味着什么</p><p>public，公开内容</p><ul><li>相对应的是 private，指定中间设备能否对其进行缓存</li></ul><p>max-age = 3600，缓存时间</p><ul><li>如果过期了，就要走下一个指令（must-revalidate）</li></ul><p>must-revalidate，必须重新校验</p><ul><li>如果可以，就继续用</li><li>如果删掉了，就重新请求</li></ul><h3 id="内容协商" tabindex="-1">内容协商 <a class="header-anchor" href="#内容协商" aria-label="Permalink to &quot;内容协商&quot;">​</a></h3><p>缓存中的缓存过期了还能否重用</p><h3 id="禁用缓存-服务器发起" tabindex="-1">禁用缓存（服务器发起） <a class="header-anchor" href="#禁用缓存-服务器发起" aria-label="Permalink to &quot;禁用缓存（服务器发起）&quot;">​</a></h3><p>问：不加 Cache-Control，浏览器还会缓存吗？</p><p>会</p><p>get 请求</p><p>200、203（非权威信息）、206（部分内容）</p><p>300（多选）、301（永久重定向）、401（已迁移）</p><blockquote><p>301 永久重定向</p><p>302 临时重定向，不会缓存</p></blockquote><h4 id="禁用缓存-服务器发起-1" tabindex="-1">禁用缓存（服务器发起） <a class="header-anchor" href="#禁用缓存-服务器发起-1" aria-label="Permalink to &quot;禁用缓存（服务器发起）&quot;">​</a></h4><p>Cache-Control:max-age=0,must-revalidate</p><p>这种写法等同于 Cache-Control:no-cache</p><p>不走缓存，但是可以内容协商</p><p>Cache-Control:no-store 不能强缓存，也不能内容协商</p><h4 id="禁用缓存-浏览器发起" tabindex="-1">禁用缓存（浏览器发起） <a class="header-anchor" href="#禁用缓存-浏览器发起" aria-label="Permalink to &quot;禁用缓存（浏览器发起）&quot;">​</a></h4><p>1.加随机数（打Hash）</p><p>2.请求头里加<code>xhr.setRequestHeader(&quot;Cache-Control&quot;,&quot;no-cache,no-store,max-age=0&quot;);</code></p><h2 id="dns-与-tcp" tabindex="-1">DNS 与 TCP <a class="header-anchor" href="#dns-与-tcp" aria-label="Permalink to &quot;DNS 与 TCP&quot;">​</a></h2><h3 id="dns" tabindex="-1">DNS <a class="header-anchor" href="#dns" aria-label="Permalink to &quot;DNS&quot;">​</a></h3><p>DNS：domain name system 域名系统</p><p>你给我一个域名，我给你一个 ip</p><h3 id="tcp" tabindex="-1">TCP <a class="header-anchor" href="#tcp" aria-label="Permalink to &quot;TCP&quot;">​</a></h3><p>三次握手和四次挥手</p><p>TCP连接：Transmission control protpcal</p><p>传输控制协议</p><p>四次挥手</p><p>为什么不和三次握手那样，把B说的知道和我也说完了合并在一起</p><p>因为在第二、第三次中间还可能会说其他内容</p><h2 id="服务器优化" tabindex="-1">服务器优化 <a class="header-anchor" href="#服务器优化" aria-label="Permalink to &quot;服务器优化&quot;">​</a></h2><p>目前</p><h3 id="nginx-开启-gzip-压缩" tabindex="-1">nginx 开启 gzip 压缩 <a class="header-anchor" href="#nginx-开启-gzip-压缩" aria-label="Permalink to &quot;nginx 开启 gzip 压缩&quot;">​</a></h3><div class="language-nginx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">http</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.......</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    gzip </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    gzip_min_length </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1k</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    gzip_buffers </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    4</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 16k</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    gzip_http_version </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    gzip_comp_level </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    gzip_types </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      text/plain application/x-javascript text/css application/xml text/javascript application/x-httpd-php application/javascript application/json;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    gzip_disable </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;MSIE [1-6]\\.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    gzip_vary </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="" tabindex="-1"><a class="header-anchor" href="#" aria-label="Permalink to &quot;&quot;">​</a></h3>`,55)]))}const u=i(t,[["render",n]]);export{k as __pageData,u as default};
