import{_ as e,c as a,a3 as r,o as i}from"./chunks/framework.CAwIQbWu.js";const h=JSON.parse('{"title":"Git 提交规范","description":"","frontmatter":{},"headers":[],"relativePath":"Engineered/StandardGuide/git提交规范.md","filePath":"Engineered/StandardGuide/git提交规范.md","lastUpdated":1647860032000}'),n={name:"Engineered/StandardGuide/git提交规范.md"};function o(d,t,l,p,s,c){return i(),a("div",null,t[0]||(t[0]=[r('<h1 id="git-提交规范" tabindex="-1">Git 提交规范 <a class="header-anchor" href="#git-提交规范" aria-label="Permalink to &quot;Git 提交规范&quot;">​</a></h1><h2 id="git-规范" tabindex="-1">Git 规范 <a class="header-anchor" href="#git-规范" aria-label="Permalink to &quot;Git 规范&quot;">​</a></h2><p>使用 <a href="https://github.com/conventional-changelog/commitlint" target="_blank" rel="noreferrer">commitlint</a> 工具，常用有以下几种类型：</p><p>-feat ：新功能</p><p>-fix ：修复 bug</p><p>-chore ：对构建或者辅助工具的更改</p><p>-refactor ：既不是修复 bug 也不是添加新功能的代码更改</p><p>-style ：不影响代码含义的更改 (例如空格、格式化、少了分号)</p><p>-docs ：只是文档的更改</p><p>-perf ：提高性能的代码更改</p><p>-revert ：撤回提交</p><p>-test ：添加或修正测试 举例 git commit -m &#39;feat: add list&#39;</p><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h2><ul><li><a href="https://github.com/pigcan/blog/issues/15" target="_blank" rel="noreferrer">用工具思路来规范化 git commit message </a></li></ul>',14)]))}const m=e(n,[["render",o]]);export{h as __pageData,m as default};
