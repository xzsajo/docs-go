import{_ as i,c as a,a3 as t,o as e}from"./chunks/framework.CAwIQbWu.js";const o=JSON.parse('{"title":"TypeScript 入门省流版","description":"","frontmatter":{},"headers":[],"relativePath":"JavaScript/TypeScript/TypeScript省流版.md","filePath":"JavaScript/TypeScript/TypeScript省流版.md","lastUpdated":1724059762000}'),p={name:"JavaScript/TypeScript/TypeScript省流版.md"};function n(h,s,l,k,r,d){return e(),a("div",null,s[0]||(s[0]=[t(`<h1 id="typescript-入门省流版" tabindex="-1">TypeScript 入门省流版 <a class="header-anchor" href="#typescript-入门省流版" aria-label="Permalink to &quot;TypeScript 入门省流版&quot;">​</a></h1><h2 id="typescript-是什么" tabindex="-1">TypeScript 是什么 <a class="header-anchor" href="#typescript-是什么" aria-label="Permalink to &quot;TypeScript 是什么&quot;">​</a></h2><p>JavaScript 的超集，主要提供了类型检测和对 ES6 的支持</p><p>简单来说，就是 TypeScript = ES6 +类型。因为写类型，能在写代码时检测出错误，以至于减少bug。现在前端项目越来越大、各种前端工程化、全栈化、各种前端框架等等， TypeScript 随之流行也很正常</p><h2 id="为什么学-typescipt" tabindex="-1">为什么学 Typescipt <a class="header-anchor" href="#为什么学-typescipt" aria-label="Permalink to &quot;为什么学 Typescipt&quot;">​</a></h2><p>它提供静态类型系统，增加代码的可读性以及可维护性，已经成为大型项目的标配</p><p>用了之后就不想用 Javascript 了，有代码提示，不用担心会写错误代码了</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> button</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;XXX&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">button?.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;click&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 自动加 ? 等于 if (button) {}</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.style.border </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;1px solid red&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // ok</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 报错提示</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><h2 id="起手式" tabindex="-1">起手式 <a class="header-anchor" href="#起手式" aria-label="Permalink to &quot;起手式&quot;">​</a></h2><p>安装 typescript</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> typescript</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -g</span></span></code></pre></div><p>编写 ts 文件</p><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> hello</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;hello&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>编译 ts 文件</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>tsc hello.ts</span></span></code></pre></div><p>编译之后就生成了 <code>hello.js</code></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hello </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>如此，你的第一个 ts 文件就写好了</p><blockquote><p>这里我们用 typescript 来实现类型擦除，还可以用esbuild、swc 来实现，性能比 typescript 快很多，但是后两者不检查语法，所以快</p></blockquote><h2 id="数据类型" tabindex="-1">数据类型 <a class="header-anchor" href="#数据类型" aria-label="Permalink to &quot;数据类型&quot;">​</a></h2><p>TS 的数据</p><h3 id="类型断言-as" tabindex="-1">类型断言 as <a class="header-anchor" href="#类型断言-as" aria-label="Permalink to &quot;类型断言 as&quot;">​</a></h3><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> unknown</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 报错，不能将类型“unknown”分配给类型“number”。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> data1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用 类型断言as 将 unknown 类型转换为 number 类型</span></span></code></pre></div><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h2><ul><li><a href="https://ts.xcatliu.com/" target="_blank" rel="noreferrer">TypeScript 入门教程</a></li><li><a href="https://segmentfault.com/a/1190000022282306" target="_blank" rel="noreferrer">图雀的 typescript 教程</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=Mzg3NTcwMTUzNA==&amp;mid=2247486311&amp;idx=1&amp;sn=e673c558cde252bcd3357074fbf0a365&amp;source=41#wechat_redirect" target="_blank" rel="noreferrer">编写高质量可维护的代码：Awesome TypeScript</a></li><li><a href="https://mp.weixin.qq.com/s/v7uZrEmEaPVfL76PHGD1oQ" target="_blank" rel="noreferrer">字节 React + TypeScript 实践总结篇</a></li><li><a href="https://juejin.cn/post/7031787942691471396" target="_blank" rel="noreferrer">最全的 TypeScript 学习指南</a></li><li><a href="https://mp.weixin.qq.com/s/0aJmPyh_Npn3CiGJuyd5aw" target="_blank" rel="noreferrer">如何优雅地在 React 中使用TypeScript，看这一篇就够了！</a></li></ul>`,25)]))}const y=i(p,[["render",n]]);export{o as __pageData,y as default};
