import{_ as i,c as a,a3 as n,o as e}from"./chunks/framework.CAwIQbWu.js";const o=JSON.parse('{"title":"ES6至ES12的新特性","description":"","frontmatter":{},"headers":[],"relativePath":"ES6/ES6至ES12的新特性.md","filePath":"ES6/ES6至ES12的新特性.md","lastUpdated":1726294467000}'),l={name:"ES6/ES6至ES12的新特性.md"};function t(p,s,h,k,r,d){return e(),a("div",null,s[0]||(s[0]=[n(`<h1 id="es6至es12的新特性" tabindex="-1">ES6至ES12的新特性 <a class="header-anchor" href="#es6至es12的新特性" aria-label="Permalink to &quot;ES6至ES12的新特性&quot;">​</a></h1><h2 id="我最常用的" tabindex="-1">我最常用的 <a class="header-anchor" href="#我最常用的" aria-label="Permalink to &quot;我最常用的&quot;">​</a></h2><p>ES6 的特性是使用最多的，包括类、模块化、箭头函数、函数参数默认值、模板字符串、解构赋值、延展操作符、Promise、let 与 const 等等，这部分已经是开发必备了，没什么好说的</p><p>另外还有：</p><ul><li>ES7 的 <code>Array.prototype.includes()</code> 、 <code>**</code> （指数运算符）</li><li>ES8 的 async/await 、String padding: <code>padStart()</code>和<code>padEnd()</code> 、 <code>Object.values()</code></li><li>ES9 的 Rest/Spread 属性、for await of、 <code>Promise.finally()</code></li><li>ES10 的 <code>Array.prototype.flat()</code> 、 <code>Array.prototype.flatMap()</code> 、String 的 <code>trimStart()</code> <code>trimEnd()</code></li><li>ES11 的 <code>Promise.allSettled</code> 、空值处理及可选链</li><li>ES12 的逻辑赋值操作符、数字分隔符、 <code>Promise.any()</code></li></ul><h2 id="es8-es2018" tabindex="-1">ES8（ES2018） <a class="header-anchor" href="#es8-es2018" aria-label="Permalink to &quot;ES8（ES2018）&quot;">​</a></h2><ul><li>async/await</li><li>Object.values/Object.entries</li><li>padStart()/padEnd()</li><li>getOwnPropertyDescriptors</li><li>参数可以有多余逗号</li><li>共享内存和原子操作</li></ul><h3 id="object-values-object-entries" tabindex="-1">Object.values/Object.entries <a class="header-anchor" href="#object-values-object-entries" aria-label="Permalink to &quot;Object.values/Object.entries&quot;">​</a></h3><p>Object.entries：将对象转换为数组，获取键值对</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> arr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;johan&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    age: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">18</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    gender: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;男&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">enties</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr) </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//	[&#39;name&#39;: &#39;johan&#39;],</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//  [&#39;age&#39;: 18],</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//  [&#39;gender&#39;: &#39;男&#39;]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ]</span></span></code></pre></div><p>Object.values：只获取值</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> arr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;johan&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    age: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">18</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    gender: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;男&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">values</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [&#39;johan&#39;, 18, &#39;男&#39;]</span></span></code></pre></div><p>之前 ES5 的 Object.keys：只获取键</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> arr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;johan&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    age: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">18</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    gender: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;男&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">values</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [&#39;name&#39;, &#39;age&#39;, &#39;gender&#39;]</span></span></code></pre></div><h2 id="最有用的" tabindex="-1">最有用的 <a class="header-anchor" href="#最有用的" aria-label="Permalink to &quot;最有用的&quot;">​</a></h2><p>ES6 的特性都很有用，ES7-ES11 中，我比较感兴趣的是：</p><ul><li>ES8 的 async/await</li><li>ES9 的 for await of</li><li>ES11 的 <code>Promise.allSettled</code> 、ES9 的 <code>Promise.finally()</code> 、ES12 的 <code>Promise.any()</code></li><li>还有常用的逻辑操作：逻辑赋值操作符、数字分隔符、空值处理及可选链等都很大的简洁优化了我们的代码</li></ul><p>其中，async/await 异步终极解决方案，<code>for await of</code> 异步串行，<code>Promise.allSettled</code> 解决了 <code>Promise.all</code> 的只要一个请求失败了就会抛出错误的问题，当我们一次发起多个请求时，所有结果都能返回，无论成功或失败，等等等，不了解的可以往下查找</p><h2 id="空值合并运算符" tabindex="-1">空值合并运算符（??） <a class="header-anchor" href="#空值合并运算符" aria-label="Permalink to &quot;空值合并运算符（??）&quot;">​</a></h2><p><strong>空值合并运算符</strong>（<strong><code>??</code></strong>）是一个逻辑运算符，当左侧的操作数为 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/null" target="_blank" rel="noreferrer"><code>null</code></a> 或者 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined" target="_blank" rel="noreferrer"><code>undefined</code></a> 时，返回其右侧操作数，否则返回左侧操作数。</p><p>相当于是 <code>||</code> 的升级版，因为 <code>||</code> 不能判断 <code>&#39;&#39;</code>、<code>0</code> 等情况， <code>&#39;&#39;</code>、<code>0</code> 会被视为 false</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> foo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ??</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;default string&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(foo);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出: &quot;default string&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> baz</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ??</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 42</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(baz);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出: 0</span></span></code></pre></div><h2 id="可选链运算符" tabindex="-1">可选链运算符（?.） <a class="header-anchor" href="#可选链运算符" aria-label="Permalink to &quot;可选链运算符（?.）&quot;">​</a></h2><p><strong>可选链运算符</strong>（<strong><code>?.</code></strong>）允许读取位于连接对象链深处的属性的值，而不必明确验证链中的每个引用是否有效</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> adventurer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Alice&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  cat: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Dinah&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> dogName</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> adventurer.dog?.name;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dogName);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出: undefined</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(adventurer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">someNonExistentMethod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">?.());</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出: undefined</span></span></code></pre></div><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h2><ul><li><a href="https://zhuanlan.zhihu.com/p/342882092?utm_source=wechat_session&amp;utm_medium=social&amp;utm_oi=56197411504128" target="_blank" rel="noreferrer">从 ES6 到 ES10 的新特性万字大总结</a></li><li><a href="https://mp.weixin.qq.com/s/H6jUAGlkREM5SJgXc1Mjvw" target="_blank" rel="noreferrer">JS 之 ES7 详解</a></li><li><a href="https://segmentfault.com/a/1190000041293383" target="_blank" rel="noreferrer">盘点 ES12 中的一些新特性！</a></li></ul>`,27)]))}const c=i(l,[["render",t]]);export{o as __pageData,c as default};
