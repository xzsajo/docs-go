import{_ as i,c as a,j as l,a as r,G as o,a3 as u,B as c,o as s}from"./chunks/framework.CAwIQbWu.js";const x=JSON.parse('{"title":"React 导航","description":"","frontmatter":{},"headers":[],"relativePath":"React/index.md","filePath":"React/index.md","lastUpdated":1728959573000}'),R={name:"React/index.md"};function h(f,e,n,d,k,m){const t=c("RoadMap");return s(),a("div",null,[e[0]||(e[0]=l("h1",{id:"react-导航",tabindex:"-1"},[r("React 导航 "),l("a",{class:"header-anchor",href:"#react-导航","aria-label":'Permalink to "React 导航"'},"​")],-1)),e[1]||(e[1]=l("blockquote",null,[l("p",null,"学习一个东西之前，首先在大脑中积累充分的”疑惑感“。即弄清面临的问题到底是什么，在浏览方法本身之前，最好先使劲问问自己都想到什么方法。一个公认的事实是，你对问题的疑惑越大，在之前做的自己的思考越多，当看到解答之后印象就越深刻")],-1)),e[2]||(e[2]=l("p",null,"俺是做 React 开发的，React 的知识点有很多，延伸出的点更多，该如何做取舍？我们是要做到事无巨细逐个分析，还是针对常见问题进行讲解。我认为，没有一个全面的指导思路路会走窄，而一味求全只做蜻蜓点水式的了解根本进不了大厂。所以俺不得既要全，又要深。本章节以常见面试题为抓手，测量自己对 React 的了解程度，再对每个知识点进行分析讲解，能做多少就做多少，尽量都写到",-1)),o(t,{data:[{title:"React",x:300,y:80,download:!0},{title:"React面试题",right:[[{title:"🔥常见面试题",link:"/React/面试题"}],[{title:"代码题",link:"/React/面试题/代码题"}],[{title:"十万条数据",link:"/React/面试题/渲染十万条数据解决方案"}]]},{title:"React快速了解",link:"/React/React快速了解",left:[[{title:"哲学"},[-50],[["单向数据流"],["不可变特性"]]],[{title:"特征"},[["UI = f(data)"],["一切都是组件"],["声明式编程"]]]]},{title:"Fiber",link:"/React/Fiber",right:[["Fiber 是什么"],["Fiber 的作用"],["为什么有 Fiber"],["Fiber 理论实现"],["Fiber 实现原理"],["Fiber 如何工作"]]},{title:"VirtualDOM",link:"/React/VirtualDOM",left:[["什么是 VM"],["为什么需要 VM"],["如何实现 VM"]]},{title:"Diff算法",link:"/React/Diff",right:[["是什么"],["有什么用"]]},{title:"Hooks",link:"/React/Hooks",left:[["基础介绍"],["由来"],["是什么"]],right:[[{title:"各种 Hooks"},[["useState"],["useEffect"],["useContext"],["useReducer"],[{title:"🔥useMemo",link:"/React/useCallback和useMemo"}],[{title:"🔥Ref以及useRef",link:"/React/Ref以及useRef"}],[{title:"🔥Hooks 踩坑",link:"/React/Hooks踩坑"}],[{title:"🔥Hooks实现原理",link:"/React/Hooks实现原理"}],[{title:"🔥自定义Hooks",link:"/React/手写自定义HooksS"}]]]]},{title:"快问快答 setState",right:[["为什么这么用"],[{title:"setState原理",link:"/React/setState"}]]},{title:"其他知识点",link:"/React/Diff",left:[[{title:"🔥函数式VS类组件",link:"/React/函数式组件与类组件有何不同"}],[{title:"性能优化",link:"/React/性能优化"}],[{title:"事件机制",link:"/React/事件机制"}],[{title:"版本更新",link:"/React/React版本更新"}]]},{title:"生态",link:"/React/生态/",right:[[{title:"🔥Redux",link:"/React/从Redux说起，到手写，再到状态管理"}],[{title:"ReactRedux",link:"/React/ReactRedux"}],[{title:"ReactRouter",link:"/React/ReactRouter"}]]},{title:"完"}]}),e[3]||(e[3]=u('<h2 id="react-面试题" tabindex="-1">React 面试题 <a class="header-anchor" href="#react-面试题" aria-label="Permalink to &quot;React 面试题&quot;">​</a></h2><p>这些面试题基本和基础知识点中的知识点有所联系，</p><ul><li><a href="./面试题/">常见面试题</a></li><li><a href="./面试题/代码题.html">代码题</a></li><li><a href="./面试题/渲染十万条数据解决方案.html">渲染十万条数据解决方案</a></li></ul><h2 id="react-各种知识点" tabindex="-1">React 各种知识点 <a class="header-anchor" href="#react-各种知识点" aria-label="Permalink to &quot;React 各种知识点&quot;">​</a></h2><ul><li><a href="./React快速了解.html">React 快速了解</a></li><li><a href="./Fiber.html">Fiber</a><ul><li>Fiber 是什么</li><li>Fiber 的作用</li><li>为什么会有 Fiber</li><li>Fiber 理论实现</li><li>Fiber 实现原理</li><li>Fiber 是如何工作的</li></ul></li><li><a href="./VirtualDOM.html">VirtualDOM</a><ul><li>什么是 VM</li><li>为什么需要 VM</li><li>如何实现 VM</li></ul></li><li><a href="./Diff.html">Diff</a><ul><li>是什么？</li><li>有什么用？</li></ul></li><li><a href="./Hooks.html">Hooks</a><ul><li>基础介绍</li><li>由来</li><li>各个 Hooks <ul><li>useState（状态）</li><li>useEffect（副作用） <ul><li>与 useLayoutEffect 的区别</li></ul></li><li>useContext（上下文）</li><li>useReducer（Redux）</li></ul></li><li><a href="./useCallback和useMemo.html">useCallback、useMemo</a></li><li><a href="./Ref以及useRef.html">Ref以及useRef</a></li><li><a href="./Hooks踩坑.html">Hooks 踩坑</a></li><li><a href="./Hooks实现原理.html">Hooks实现原理</a></li><li><a href="./手写自定义Hooks.html">手写自定义Hooks</a></li></ul></li><li><a href="./快问快答setState.html">快问快答setState</a><ul><li>为什么要用 setState，而不是直接 <code>this.statet.xx == oo</code>？</li><li><a href="./setState.html">setState 异步的原理</a></li></ul></li><li><a href="./函数式组件与类组件有何不同.html">函数式组件与类组件有何不同</a></li><li><a href="./性能优化.html">性能优化</a></li><li><a href="./事件机制.html">事件机制</a></li><li><a href="./里程碑.html">里程碑</a><ul><li>React 从13年开始到V15的Class组件 + 生命周期 再到Function + Hooks 的时间节点里程碑</li></ul></li><li><a href="./React版本更新.html">React版本更新</a></li><li><a href="./生命周期.html">生命周期</a>（已过时） <ul><li>class 才有生命周期</li><li>15 的生命周期</li><li>16.3 的生命周期</li><li>16.4 及以上的生命周期</li></ul></li></ul><h2 id="生态" tabindex="-1">生态 <a class="header-anchor" href="#生态" aria-label="Permalink to &quot;生态&quot;">​</a></h2><ul><li><p><a href="./生态/从Redux说起，到手写，再到状态管理.html">Redux</a></p><ul><li>Redux 是什么</li><li>它的作用</li></ul></li><li><p><a href="./生态/ReactRedux.html">ReactRedux</a></p><ul><li>是什么？ 单向数据流</li><li>有什么用？</li><li>手写</li><li>连接 React 与 Redux</li></ul></li><li><p><a href="./生态/ReactRouter.html">ReactRouter</a></p></li><li><p><a href="./生态/Redux-Sage.html">Redux-Sage</a>：还未写</p></li><li><p><a href="./生态/Redux-thunk.html">Redux-thunk</a>：还未写</p></li><li><p><a href="./生态/Dva.html">Dva</a>：还未写</p></li><li><p><a href="./生态/Mobx.html">Mobx</a>：还未写</p></li><li><p><a href="./生态/状态管理.html">各个状态库对比</a>：还未写</p></li><li><p><a href="./生态/Immutable.html">Immutable</a>：还未写</p></li></ul>',7))])}const b=i(R,[["render",h]]);export{x as __pageData,b as default};
