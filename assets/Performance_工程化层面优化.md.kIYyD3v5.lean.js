import{_ as i,c as a,a3 as n,o as l}from"./chunks/framework.CAwIQbWu.js";const c=JSON.parse('{"title":"工程化层面优化","description":"","frontmatter":{},"headers":[],"relativePath":"Performance/工程化层面优化.md","filePath":"Performance/工程化层面优化.md","lastUpdated":1723545460000}'),p={name:"Performance/工程化层面优化.md"};function e(h,s,t,k,r,E){return l(),a("div",null,s[0]||(s[0]=[n(`<h1 id="工程化层面优化" tabindex="-1">工程化层面优化 <a class="header-anchor" href="#工程化层面优化" aria-label="Permalink to &quot;工程化层面优化&quot;">​</a></h1><p>常见问题：如何让 webpack 打包更快</p><p>并发：使用多进程打包</p><p>缓存：打包时利用缓存</p><p>打包量要小：缩小文件搜索范围，减小不必要的编译工作</p><h2 id="webpack优化" tabindex="-1">webpack优化 <a class="header-anchor" href="#webpack优化" aria-label="Permalink to &quot;webpack优化&quot;">​</a></h2><p>单独打包 runtime</p><p>splitChunks 将 react、vue 依赖单独打包</p><p>modulelds</p><p>多页面</p><p>common插件</p><p>code split 代码分割</p><ul><li>runtime</li><li>node modules -&gt; verdors 全局</li><li>common 公共模块</li><li>self（main/admin）自身</li></ul><h3 id="为什么-runtime-单独打包" tabindex="-1">为什么 runtime 单独打包 <a class="header-anchor" href="#为什么-runtime-单独打包" aria-label="Permalink to &quot;为什么 runtime 单独打包&quot;">​</a></h3><p>额外的代码就是runtime</p><p>因为如果不单独打包，那么我们在修改webpack 配置的时候会导致用户的缓存失效，必须下载最新的main.js</p><p>如果单独打包，只要我不修改 index.js 里的内容，main.js 就不需要重新请求，节省用户带宽，用户访问速度就会加快</p><h3 id="splitchunks-将-react、vue-依赖单独打包" tabindex="-1">splitChunks 将 react、vue 依赖单独打包 <a class="header-anchor" href="#splitchunks-将-react、vue-依赖单独打包" aria-label="Permalink to &quot;splitChunks 将 react、vue 依赖单独打包&quot;">​</a></h3><p>vendors 表示 第三方的意思</p><h3 id="webpack-多页面" tabindex="-1">webpack 多页面 <a class="header-anchor" href="#webpack-多页面" aria-label="Permalink to &quot;webpack 多页面&quot;">​</a></h3><p>common chunks 共有文件</p><p>打包优化</p><ul><li>webpack <ul><li>loader</li><li>dll</li><li>happypack</li><li>代码压缩</li><li>tree shaking</li><li>scope hositing</li><li>code splitting</li></ul></li><li>图片 base64，cdn</li></ul><p>如何做页面的性能优化</p><p>1.减少体积（打包优化、babel 优化）</p><p>webpack 打包，使用 webpack content-hash</p><p>文件指纹是打包后输出的文件名的后缀</p><ul><li><p><code>Hash</code> ：和整个项目的构建相关，只要项目文件有修改，整个项目构建的 hash 值就会更改</p></li><li><p><code>Chunkhash</code>：和 webpack 打包的 chunk 有关，不同的入口会有不同的 chunkhash</p></li><li><p><code>Contenthash</code>：根据文件内容来定义 hash，文件内容不变，则 contenthash 不变</p><p>2.延迟加载（资源的异步加载）</p></li></ul><h3 id="资源合并" tabindex="-1">资源合并 <a class="header-anchor" href="#资源合并" aria-label="Permalink to &quot;资源合并&quot;">​</a></h3><p>CSS 雪碧图 -&gt; Icon Font -&gt; SVG Symbols</p><p>webpack</p><h3 id="资源内敛" tabindex="-1">资源内敛 <a class="header-anchor" href="#资源内敛" aria-label="Permalink to &quot;资源内敛&quot;">​</a></h3><p>小图片 -&gt; data url</p><p>小 CSS 文件 -&gt; <code>&lt;style&gt;代码&lt;/style&gt;</code></p><p>小 JS 文件 -&gt;<code>&lt;script&gt;代码&lt;/script&gt;</code></p><p>webpack 配置即刻</p><h3 id="资源压缩-gzip" tabindex="-1">资源压缩（gzip） <a class="header-anchor" href="#资源压缩-gzip" aria-label="Permalink to &quot;资源压缩（gzip）&quot;">​</a></h3><p>nginx 、 Apache、Node.js</p><h3 id="资源精简" tabindex="-1">资源精简 <a class="header-anchor" href="#资源精简" aria-label="Permalink to &quot;资源精简&quot;">​</a></h3><p>HTML -&gt; 删空格、删闭合</p><p>CSS -&gt; 删未用</p><p>JS -&gt; 改名、tree shaking</p><p>SVG -&gt; 删无用标签、属性</p><p>图片 -&gt; 减少体积（有损/无损）</p><h3 id="减少-cookie-体积" tabindex="-1">减少 Cookie 体积 <a class="header-anchor" href="#减少-cookie-体积" aria-label="Permalink to &quot;减少 Cookie 体积&quot;">​</a></h3><p>4kb 新域名</p><h3 id="cdn-的原理和实施" tabindex="-1">CDN 的原理和实施 <a class="header-anchor" href="#cdn-的原理和实施" aria-label="Permalink to &quot;CDN 的原理和实施&quot;">​</a></h3><p>CDN 内容分发网络</p><ol><li>分离 Manifest</li><li>Code Splitting（代码分割）</li><li>Bundle Splitting（打包分割）</li><li>Tree Shaking（删除死代码）</li><li>开启 gzip</li></ol><h3 id="分离-manifest" tabindex="-1">分离 Manifest <a class="header-anchor" href="#分离-manifest" aria-label="Permalink to &quot;分离 Manifest&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    config</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      .optimization</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">runtimeChunk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;manifest&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="code-splitting" tabindex="-1">Code Splitting <a class="header-anchor" href="#code-splitting" aria-label="Permalink to &quot;Code Splitting&quot;">​</a></h3><ol><li>使用动态 import 或者 require.ensure 语法</li><li>使用 <code>babel-plugin-import</code> 插件按需引入一些组件库</li></ol><h3 id="bundle-splitting" tabindex="-1">Bundle Splitting <a class="header-anchor" href="#bundle-splitting" aria-label="Permalink to &quot;Bundle Splitting&quot;">​</a></h3><p>将公共的包提取到 <code>vendors</code> 里面，比如你</p><h3 id="tree-shaking" tabindex="-1">Tree Shaking <a class="header-anchor" href="#tree-shaking" aria-label="Permalink to &quot;Tree Shaking&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">config.optimization.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">usedExports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>开发环境：</p><ol><li><p>值得去配置的：</p><ol><li><p>优化开发体验</p><ol><li><p>自动刷新 -&gt; 模块热更新</p><ol><li><p>实时预览反应更快，等待时间更短</p></li><li><p>不刷新浏览器能保留当前网页的运行状态</p><p>需要在入口文件进行配置：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 入口文件</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.hot) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.hot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">accept</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./App&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        render</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">App</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;, document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;app&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>PS: 模块热更新机制</p><pre><code>1. 当子模块发生更新时，更新事件会一层层往上传递，也就是从 App.js 文件传递到 main.js 文件，直到有某层的文件接受了当前变化的模块，也就是 main.js 文件中定义的 module.hot.appept([&#39;./App&#39;, callback])，这时就会调用 callback 函数去执行自定义逻辑
2. 如果事件一直往上抛到最外层都没有文件接受它，就会直接刷新网页
</code></pre><p>webpack 方面也有相应的开启热跟新的处理</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> HotModuleReplacementPlugin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;webpack/lib/HotModuleReplacementPlugin&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> webpackMerge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(baseConfig, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    plugins: [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HotModuleReplacementPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    devServer: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 每次构建时候自动打开浏览器并访问网址</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        open: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 开启热更新</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        hot: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 设置静态资源地址如：/public，从这获取你想要的一些外链资源，图片。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        contentBase: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">DIST_PATH</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 设置端口号</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        port: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 将热更新代码注入到模块中</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        inline: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 如果你希望服务器外部可访问</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        host: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;0.0.0.0&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 设置 proxy 代理</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        proxy: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            context: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/api&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            target: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;//www.proxy.com&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            pathRewrite: { </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;^/api&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        },</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 设置 https</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        https: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><ol start="2"><li>配置 sourcemap，方便调试</li></ol></li></ol><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    devtool: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;source-map&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p>PS: devtool 有各种选择，不同的选项构建速度不同</p></li></ol></li><li><p>尽可能减少构建时间</p><ol><li><p>减少模块朝招范围，缩小 Babel 的编译范围，并使用 webpack cache 缓存模块</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 减小模块的查找范围</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    resolve: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        modules: [path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(__dirname, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node_modules&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    module: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        rules: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                test:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#22863A;--shiki-light-font-weight:bold;--shiki-dark:#85E89D;--shiki-dark-font-weight:bold;">\\.</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">js</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                use: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                        loader: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;babel-loader&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                        query: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                            // 将 babel 编译过的模块缓存在 webpack_cache 目录下，下次优先复用</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                            cacheDirectory: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./webpack_cache/&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                        },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                ],</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // 减少 babel 编译范围，忘记设置会让 webpack 编译慢上好几倍</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                include: path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(__dirname, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;src&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><ol start="2"><li><p>使用 DllPlugin 预先打包好第三方库</p><pre><code>  	1. \`\`\`javascript
 // dll.config.js
 const webpack = require(&#39;webpack&#39;);
 const path = require(&#39;path&#39;);
 const DllPlugin = require(&#39;webpack/lib/DllPlugin&#39;)
 const vendors = [
   &#39;react&#39;,
   &#39;react-dom&#39;,
   &#39;react-router&#39;,
   &#39;redux&#39;,
   &#39;react-redux&#39;,
   &#39;jquery&#39;,
   &#39;antd&#39;,
   &#39;lodash&#39;,
 ]
 module.exports = {
   entry: {
     &#39;dll&#39;: vendors,
   },
   output: {
     filename: &#39;[name].js&#39;,
     path: path.resolve(__dirname, &#39;public&#39;),
     library: &#39;__[name]__lib&#39;,
   },
   plugins: [
     new DllPlugin({
       name: &#39;__[name]__lib&#39;,
       path: path.join(__dirname, &#39;build&#39;, &#39;[name].manifest.json&#39;),
     }),
   ]
 }
</code></pre><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>具体配置</span></span>
<span class="line"><span></span></span>
<span class="line"><span>3. 使用 Happypack 多线程加快构建</span></span></code></pre></div></li></ol><p>webpack 构建慢是因为要解析和处理大量的文件，它需要一件件去做。 Happypack 的核心原理就是把这部分任务分解到多个进程去并行处理，从而减少总的构建时间</p><p>需要配置哪些 loader 使用 Happypack 就要改写那些配置，比如你想要修改 babel 为多核编译:</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    module: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        rules: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                test:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#22863A;--shiki-light-font-weight:bold;--shiki-dark:#85E89D;--shiki-dark-font-weight:bold;">\\.</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">js</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                use: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;happypack/loader?id=babel&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                include: path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(__dirname, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;src&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    plugins: [</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HappyPack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            id: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;babel&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            loaders: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    loader: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;babel-loader&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    query: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                        cacheDirectory: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./webpack_cache/&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><ol start="4"><li><p>不使用 webpack css 模块方案</p><p>css in js 会增加机器的编译时间，所以不使用</p></li></ol></li></ol></li><li><p>不值得去配置的</p><pre><code>1. 代码丑化
	2. 模块拆包，持久化缓存
    	3. 减少打包文件大小
</code></pre></li></ol></li></ol><p>生存环境：</p><ol><li>值得去配置的 <ol><li>模块拆包</li><li>尽可能减少打包文件大小</li><li>代码丑化压缩</li><li>尽可能减少构建时间</li></ol></li><li>不值得去配置 1. 优化开发体验 2. 开发环境才需要的配置</li></ol><h3 id="预取-预加载模块-prefetch-preload-module" tabindex="-1">预取/预加载模块(prefetch/preload module) <a class="header-anchor" href="#预取-预加载模块-prefetch-preload-module" aria-label="Permalink to &quot;预取/预加载模块(prefetch/preload module)&quot;">​</a></h3><p>作用：先加载页面需要的，而异步操作等浏览器进程闲置的时候再会去加载</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* webpackPrefetch: true */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ‘LoginModal’)</span></span></code></pre></div><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h2><ul><li><a href="https://zhuanlan.zhihu.com/p/33377189" target="_blank" rel="noreferrer">webpack 大型应用优化实践</a></li><li><a href="https://mp.weixin.qq.com/s/O5GYyd70Toe010f18SOkWA" target="_blank" rel="noreferrer">前端性能优化——webpack 篇</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MjM5NTk4MDA1MA==&amp;mid=2458073274&amp;idx=1&amp;sn=c9b763bf04624a39d06c8ef620f29983&amp;chksm=b187aec786f027d19a1fa53885e86f87fd2968655715f0f600c2389ad5e419c28e0809cfdba6&amp;mpshare=1&amp;scene=1&amp;srcid=&amp;sharer_sharetime=1583157673155&amp;sharer_shareid=778ad5bf3b27e0078eb105d7277263f6#rd" target="_blank" rel="noreferrer">玩转 webpack，使你的打包速度提升 90%</a></li><li><a href="https://github.com/twinkle77/Knowledge-sharing/issues/81" target="_blank" rel="noreferrer">webpack 优化笔记</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzI1ODE4NzE1Nw==&amp;mid=2247487301&amp;idx=1&amp;sn=66f1ffad37081f1da2755102637c10bb&amp;chksm=ea0d45bfdd7acca9096a8664b8ab1dd3ffd0f14fa4a59a6467a20faf18178458a6ed8c1a72c6&amp;mpshare=1&amp;scene=1&amp;srcid=&amp;sharer_sharetime=1582717204519&amp;sharer_shareid=778ad5bf3b27e0078eb105d7277263f6#rd" target="_blank" rel="noreferrer">腾讯 IMWeb 团队的前端构建秘籍</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzA4Nzg0MDM5Nw==&amp;mid=2247484435&amp;idx=1&amp;sn=8b6fa24209f18864c26023e9171bd6cf&amp;source=41#wechat_redirect" target="_blank" rel="noreferrer">Webpack 打包太慢怎么办? 试试 Dllplugin</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=Mzg5ODA5NTM1Mw==&amp;mid=2247484358&amp;idx=1&amp;sn=cbccc1bb47ef230816d770b5741691c5&amp;chksm=c0668250f7110b4646833f93072bacadee06edf3e43e760244689a0436523b3d3ac2d93cb2ef&amp;mpshare=1&amp;scene=1&amp;srcid=&amp;sharer_sharetime=1567384391143&amp;sharer_shareid=778ad5bf3b27e0078eb105d7277263f6#rd" target="_blank" rel="noreferrer">Webpack 优化技巧，构建效率提升 50%</a></li><li><a href="https://juejin.cn/post/6844903924806189070" target="_blank" rel="noreferrer">Webpack 优化——将你的构建效率提速翻倍</a></li><li><a href="https://zhuanlan.zhihu.com/p/33377189" target="_blank" rel="noreferrer">webpack 大型应用优化实践</a></li><li><a href="https://github.com/happylindz/blog/issues/17" target="_blank" rel="noreferrer">使用 Proload/Prefect 优化你的应用</a></li></ul>`,66)]))}const o=i(p,[["render",e]]);export{c as __pageData,o as default};
