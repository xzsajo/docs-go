import{_ as i,c as a,a3 as n,o as l}from"./chunks/framework.CAwIQbWu.js";const c=JSON.parse('{"title":"模拟题八","description":"","frontmatter":{},"headers":[],"relativePath":"Interview/book8.md","filePath":"Interview/book8.md","lastUpdated":1736435697000}'),h={name:"Interview/book8.md"};function t(e,s,p,k,r,E){return l(),a("div",null,s[0]||(s[0]=[n(`<h1 id="模拟题八" tabindex="-1">模拟题八 <a class="header-anchor" href="#模拟题八" aria-label="Permalink to &quot;模拟题八&quot;">​</a></h1><h2 id="_1-css-设置元素不可见的几种方法" tabindex="-1">1.css 设置元素不可见的几种方法 <a class="header-anchor" href="#_1-css-设置元素不可见的几种方法" aria-label="Permalink to &quot;1.css 设置元素不可见的几种方法&quot;">​</a></h2><p><code>display: none</code> ：设置后元素（及其子元素）不占据空间，不可点击（会引起会流）</p><p><code>visibility: hidden</code>：设置后元素（及其子元素）占据空间，不可点击（只会重绘）</p><p><code>opacity: 0</code>：设置后元素（及其子元素）占据空间，可点击（只会重绘）</p><p>还有其他方案：</p><ul><li>z-index: -1</li><li>font-size：0</li><li>clip-path: polygon(50% 0, 100% 0, 100% 100%, 0 100%);</li><li>transform: scale(0)</li><li>transform: translate(0 ,100%)</li><li>width: 0、height: 0</li><li>overflow: hidden</li></ul><h2 id="_2-实现发布订阅" tabindex="-1">2. 实现发布订阅 <a class="header-anchor" href="#_2-实现发布订阅" aria-label="Permalink to &quot;2. 实现发布订阅&quot;">​</a></h2><p>发布订阅模式无需知道对方，通过监听数据</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> EventEmitter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.event </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {};</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">callback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.event[type]) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.event[type] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [callback];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.event[type].</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(callback);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    off</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">callback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.event[type]) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.event[type] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.event[type].</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">filter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">item</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> item </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> callback;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    emit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.event[type]) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.event[type].</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">callback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            callback.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, args);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    once</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">callback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            callback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">off</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type, f);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type, f);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>使用示例：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> eventEmitter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> EventEmitter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 订阅事件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">eventEmitter.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;公众号&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`我订阅了\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 发布事件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">eventEmitter.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">emit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;公众号&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">， </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;随朱波流&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>衍生问题：你还知道哪些设计模式、Redux</p><h3 id="你还知道哪些设计模式" tabindex="-1">你还知道哪些设计模式 <a class="header-anchor" href="#你还知道哪些设计模式" aria-label="Permalink to &quot;你还知道哪些设计模式&quot;">​</a></h3><p>单例模式：保证一个类只有一个实例，并提供一个全局访问点。</p><p>redux，vuex 等唯一状态数据库，JQuery 只有一个$</p><ul><li>实现唯一性</li><li>减少内存空间</li></ul><p>工厂模式：定义一个创建对象的类</p><p>观察者模式：就是发布订阅的代表</p><p>装饰器模式：不改变原对象的基础上，通过对其进行包装扩展，使原有对象满足用户的复杂需求</p><p>适配器模式：通过将一个类的接口换成客户端所期待的接口，可以帮我们剞劂不兼容问题</p><h3 id="redux" tabindex="-1">Redux <a class="header-anchor" href="#redux" aria-label="Permalink to &quot;Redux&quot;">​</a></h3><p>Redux 是状态管理库，它由数据驱动，发起 action，会引发 reducer 的数据更新，从而更新到最新的 store</p><p>Redux 用到了很多设计模式，例如发布订阅模式，单例模式，装饰器模式</p><p>发布订阅模式</p><ul><li>先订阅，</li></ul><p>单例模式</p><ul><li>全局只有一个 store，Redux 像一个状态机，你传入 state 和 action，返回新的 state</li></ul><p>装饰器模式</p><ul><li>它的enhancer、中间件都是装饰器模式，就在 Redux 基础上再包了一层</li></ul><h2 id="_3-垃圾回收机制" tabindex="-1">3.垃圾回收机制 <a class="header-anchor" href="#_3-垃圾回收机制" aria-label="Permalink to &quot;3.垃圾回收机制&quot;">​</a></h2><p>详见原理：<a href="https://docs-go.vercel.app/JavaScript/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6.html" target="_blank" rel="noreferrer">垃圾回收机制</a></p><p>V8 进程的内存由以下部分组成：</p><ul><li>新生代内存区</li><li>老生代内存区</li><li>其他（大对象区、代码区、map 区）</li></ul><p>新生代存在生存时间短的对象，老生代存放生存时间久的对象</p><p>新生代通常只支持1-8M的容量，而老生代区会支持更大的容量，而针对这两块区域，V8 分别使用两个不同的垃圾回收器</p><ul><li>主垃圾回收器，负责老生代的垃圾回收</li><li>副垃圾回收器，负责新生代的垃圾回收</li></ul><p>新生代内存回收：Scavenge 算法</p><ul><li>将空间分成两半，一半是 from 空间，一半是 to 空间，新加入的对象会放在 from 空间，当空间快满时，执行垃圾清理；再角色调换，当调换完后的 from 空间快满时，再执行垃圾清理，如此反复</li></ul><p>老生代内存回收：标记-清除-整理（Mark - Sweep），此为两个算法，「标记-清理」算法和 「标记-整理」算法</p><ul><li>标记-清理：标记用不到的变量，清理掉</li><li>标记-整理：整理完内存后，会产生不连续的内容空间，为节省空间，整理算法会将内容排序到一处空间，空间就变大了</li></ul><p>引用计数：引擎中有张“引用表”，保存了内存里面的资源的引用次数，如果一个值的引用次数是0，就表示这个只不再用到，因此可以将这块内存释放</p><ul><li>缺点：循环引用，从而导致内容泄露</li></ul><h2 id="_4-es6特性-扩展运算符和剩余运算符" tabindex="-1">4.ES6特性：扩展运算符和剩余运算符 <a class="header-anchor" href="#_4-es6特性-扩展运算符和剩余运算符" aria-label="Permalink to &quot;4.ES6特性：扩展运算符和剩余运算符&quot;">​</a></h2><p>以不同的语法形式出现在 函数调用中，数组字面量中以及对象字面量中</p><h2 id="_5-react中一个父组件-两个子组件-一个传props-一个不传props-父组件重新渲染-两个子组件会不会都重新渲染" tabindex="-1">5.React中一个父组件，两个子组件，一个传props，一个不传props，父组件重新渲染，两个子组件会不会都重新渲染 <a class="header-anchor" href="#_5-react中一个父组件-两个子组件-一个传props-一个不传props-父组件重新渲染-两个子组件会不会都重新渲染" aria-label="Permalink to &quot;5.React中一个父组件，两个子组件，一个传props，一个不传props，父组件重新渲染，两个子组件会不会都重新渲染&quot;">​</a></h2><p>父组件重新渲染：当父组件因为状态变化重新渲染时，所有子组件都会被重新渲染，即使它们本身的props没有变化</p><p>组件优化： 如果希望避免不必要的子组件重新渲染，可以使用 <code>React.memo</code> 来优化组件，这样只有在props发生变化时才会重新渲染。</p><p><strong>采用纯组件(Pure Component)</strong>：纯组件特性是如果props没有变化，则不会重新渲染，常用于提升性能和减少渲染次数，在 function 组件中就是用 React.memo 包裹组件</p><p>衍生问题：React 父子组件如何通讯、受控组件和非受控组件</p><h3 id="react-父子组件如何通讯" tabindex="-1">React 父子组件如何通讯 <a class="header-anchor" href="#react-父子组件如何通讯" aria-label="Permalink to &quot;React 父子组件如何通讯&quot;">​</a></h3><p>通过 Props：父组件可以利用 props 向子组件传递数据和回调函数，实现数据的单向流动</p><p>回调函数：子组件可以定义属性接收父组件传入的回调函数，从而在需要的时候将数据传回父组件</p><p>React Context 对于跨层级或兄弟组件的通信，可以使用 React Context 来共享状态，而无需逐层传递 props。</p><p>状态管理库：Redux、MobX等状态管理工具来处理组件间的通信</p><h3 id="受控组件和非受控组件" tabindex="-1">受控组件和非受控组件 <a class="header-anchor" href="#受控组件和非受控组件" aria-label="Permalink to &quot;受控组件和非受控组件&quot;">​</a></h3><p>受控组件，简单来讲，就是受我们控制的组件，组件的状态全程响应外部数据</p><p>非受控组件，简单来讲，就是不受我们控制的组件</p><h2 id="_6-react17、18、19-更新以及什么是服务端组件" tabindex="-1">6.React17、18、19 更新以及什么是服务端组件 <a class="header-anchor" href="#_6-react17、18、19-更新以及什么是服务端组件" aria-label="Permalink to &quot;6.React17、18、19 更新以及什么是服务端组件&quot;">​</a></h2><p>React17、18、19 更新以及服务端组件</p><h3 id="react17" tabindex="-1">React17 <a class="header-anchor" href="#react17" aria-label="Permalink to &quot;React17&quot;">​</a></h3><h4 id="全新的-jsx-转换" tabindex="-1">全新的 JSX 转换 <a class="header-anchor" href="#全新的-jsx-转换" aria-label="Permalink to &quot;全新的 JSX 转换&quot;">​</a></h4><p>React 17之前必须引入 <code>import React from &#39;react&#39;;</code> ，打包工具才能正常编译</p><p>React 17 之后，React 引入了 <code>react/jsx-runtime</code>，编译工具会自动识别 React 组件并将代码编译为 React.createElement</p><h4 id="事件委托的变更" tabindex="-1">事件委托的变更 <a class="header-anchor" href="#事件委托的变更" aria-label="Permalink to &quot;事件委托的变更&quot;">​</a></h4><p>React v17 中，React 不会再将事件处理添加到 <code>document</code> 上，而是将事件处理添加到渲染 React 树的根 DOM 容器中</p><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> rootNode</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;root&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ReactDOM.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">render</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">App</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;, rootNode);</span></span></code></pre></div><p><img src="https://pub-15dc9987604d4311befe731fecc8adb9.r2.dev/1a3310a5a82e1ae46fe8d3464567234c.png" alt="image-20240513105744250"></p><p>在 React 16 和更早的版本中，React 将对大多数事件执行document.addEventListener（）。</p><p>React 17 将在后调用rootNode.addEventListener（）</p><h3 id="react-18-更新" tabindex="-1">React 18 更新 <a class="header-anchor" href="#react-18-更新" aria-label="Permalink to &quot;React 18 更新&quot;">​</a></h3><h4 id="并发模式" tabindex="-1">并发模式 <a class="header-anchor" href="#并发模式" aria-label="Permalink to &quot;并发模式&quot;">​</a></h4><p>v18的新特性是使用现代浏览器的特性构建的，彻底放弃对 IE 的支持。</p><p>v17 和 v18 的区别就是：从同步不可中断更新变成了异步可中断更新，v17可以通过一些试验性的API开启并发模式，而v18则全面开启并发模式</p><blockquote><p>V16就提出了Fiber架构，React 并发（concurrent）模式还在构建中（处于实验阶段），到V18才正式投入</p></blockquote><h4 id="更新-render-api" tabindex="-1">更新 render API <a class="header-anchor" href="#更新-render-api" aria-label="Permalink to &quot;更新 render API&quot;">​</a></h4><p>v18 使用 ReactDOM.createRoot() 创建一个新的根元素进行渲染，使用该 API，会自动启用并发模式。</p><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// v17</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ReactDOM </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;react-dom&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> App </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./App&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ReactDOM.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">render</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">App</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;, document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;root&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// v18</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ReactDOM </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;react-dom/client&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> App </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./App&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ReactDOM.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createRoot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;root&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HTMLElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">render</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">App</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;)</span></span></code></pre></div><h4 id="自动批处理" tabindex="-1">自动批处理 <a class="header-anchor" href="#自动批处理" aria-label="Permalink to &quot;自动批处理&quot;">​</a></h4><p>批处理是指 React 将多个状态更新，聚合到一次 render 中执行，以提升性能</p><p>在v17的批处理只会在事件处理函数中实现，而在Promise链、异步代码、原生事件处理函数中失效。而v18则所有的更新都会自动进行批处理。</p><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// v17</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> handleBatching</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // re-render 一次，这就是批处理的作用</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  setCount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  setFlag</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">f)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// re-render两次</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   setCount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   setFlag</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">f)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// v18</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> handleBatching</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // re-render 一次</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  setCount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  setFlag</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">f)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 自动批处理：re-render 一次</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   setCount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   setFlag</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">f)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>如果在某些场景不想使用批处理，可以使用 <code>flushSync</code>退出批处理，强制同步执行更新。</p><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// flushSync 会以函数为作用域，函数内部的多个 setState 仍然是批量更新</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> handleAutoBatching</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 退出批处理</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  flushSync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    setCount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  flushSync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    setFlag</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">f)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="suspense-支持-ssr" tabindex="-1">Suspense 支持 SSR <a class="header-anchor" href="#suspense-支持-ssr" aria-label="Permalink to &quot;Suspense 支持 SSR&quot;">​</a></h4><p>SSR 一次页面渲染的流程：</p><ol><li>服务器获取页面所需数据</li><li>将组件渲染成 HTML 形式作为响应返回</li><li>客户端加载资源</li><li>（hydrate）执行 JS，并生成页面最终内容</li></ol><h4 id="新功能-新api-过渡-starttransition" tabindex="-1">新功能（新API）：过渡（startTransition） <a class="header-anchor" href="#新功能-新api-过渡-starttransition" aria-label="Permalink to &quot;新功能（新API）：过渡（startTransition）&quot;">​</a></h4><h4 id="新增-useid、usetransition-和-usedeferredvalue" tabindex="-1">新增 useId、useTransition 和 useDeferredValue <a class="header-anchor" href="#新增-useid、usetransition-和-usedeferredvalue" aria-label="Permalink to &quot;新增 useId、useTransition 和 useDeferredValue&quot;">​</a></h4><ul><li>useTransition</li><li>useDeferredValue</li></ul><h4 id="放弃-ie" tabindex="-1">放弃 IE <a class="header-anchor" href="#放弃-ie" aria-label="Permalink to &quot;放弃 IE&quot;">​</a></h4><h4 id="服务端组件" tabindex="-1">服务端组件 <a class="header-anchor" href="#服务端组件" aria-label="Permalink to &quot;服务端组件&quot;">​</a></h4><h2 id="_7-interface-和-type-的区别" tabindex="-1">7. Interface 和 Type 的区别 <a class="header-anchor" href="#_7-interface-和-type-的区别" aria-label="Permalink to &quot;7. Interface 和 Type 的区别&quot;">​</a></h2><p>区别1：interface 只能描述对象，type 则描述所有数据类型</p><p>区别2：type 只是别名，interface 则是类型声明</p><p>区别3：type 不可重新赋值，interface 自动合并</p><p>所以一般对外 API 尽量用 interface，方便扩展；对内 API 尽量用 type，防止代码分散</p><p>衍生题：什么是联合类型 和 类型收窄</p><h3 id="联合类型和类型收窄" tabindex="-1">联合类型和类型收窄 <a class="header-anchor" href="#联合类型和类型收窄" aria-label="Permalink to &quot;联合类型和类型收窄&quot;">​</a></h3><p>联合类型表示取值可以为多种类型中的一种</p><p>类型收窄是指在代码执行过程中通过一些检查将联合类型狭窄到一个特点类型</p><h2 id="_8-项目构建工具有考虑换vite吗-vite有什么优势" tabindex="-1">8.项目构建工具有考虑换vite吗？vite有什么优势？ <a class="header-anchor" href="#_8-项目构建工具有考虑换vite吗-vite有什么优势" aria-label="Permalink to &quot;8.项目构建工具有考虑换vite吗？vite有什么优势？&quot;">​</a></h2><p>或者问 webpack 与 vite 的区别是什么？</p><p>1.开发环境区别</p><ul><li>vite 自己实现 server，不对代码打包，充分利用浏览器的<code>&lt;script type=&quot;module&quot;&gt;</code> 的支持 <ul><li>假设 main.js 引入了 vue</li><li>该 server 会把 <code>import { createApp } from &#39;vue&#39;</code> 改成 <code>import {createApp} from &quot;/node_modules/.vite/vue.js&quot;</code> 这样浏览器就知道去哪里做到 vue.js</li></ul></li><li>webpack-dev-server 常使用 babel-loader 基于内存打包，比 vite 慢很多很多 <ul><li>该 server 会把 vue.js 的代码（递归地）打包进 main.js</li></ul></li></ul><p>2.生产环境区别</p><ul><li>vite 使用 rollup + esbuild 来打包 JS 代码</li><li>webpack 使用 babel 来打包 JS 代码，比 esbuild 慢很多很多 <ul><li>webpack 能使用 esbuild 吗？可以，你需要配置（很麻烦）</li><li>esbuild 为什么快 <ul><li>babel 用 js 写，esbuild 用 go 写的</li><li>webpack 和 rollup 一个层级</li><li>babel 和 esbuild 一个层级的</li><li>vite 相当于比 webpack 再封装了一层</li></ul></li></ul></li></ul><p>3.文件处理时机</p><ul><li>vite 只会在你请求某个文件的时候处理该文件</li><li>webpack 会提前打包好 main.js，等你请求的时候直接输出打包好的 JS 给你</li></ul><p>目前已知 vite 的缺点有</p><ol><li>热更新常常失败，原因不清楚</li><li>有些功能 rollup 不支持，需要自己写 rollup 插件</li><li>不支持非现代浏览器</li></ol><p>衍生问题：swc、esbuild 是什么？</p><h3 id="swc、esbuild-是什么" tabindex="-1">swc、esbuild 是什么？ <a class="header-anchor" href="#swc、esbuild-是什么" aria-label="Permalink to &quot;swc、esbuild 是什么？&quot;">​</a></h3><p>swc、esbuild 对标 babel</p><h4 id="swc" tabindex="-1">swc <a class="header-anchor" href="#swc" aria-label="Permalink to &quot;swc&quot;">​</a></h4><p>实现语言：Rust</p><p>功能：编译 JS/TS、打包 JS/TS</p><p>优势：比 babel 快很多（20倍以上）</p><p>能否集成进 webpack：能</p><p>使用者：NextJS、Parcel、Deno、Vercel、ByteDance、Tencent、Shopify...</p><p>做不到：</p><ul><li>对 TS 代码进行类型检查（用 tsc 可以）</li><li>打包CSS、SVG</li></ul><h4 id="esbuild" tabindex="-1">esbuild <a class="header-anchor" href="#esbuild" aria-label="Permalink to &quot;esbuild&quot;">​</a></h4><p>实现语言：Go</p><p>功能：同上</p><p>优势：比 babel 快很多（10-100倍以上）</p><p>能否集成进 webpack：能</p><p>使用者：vite、vuepress、snowpack、umijs</p><p>做不到：</p><ul><li>对 TS 代码进行类型检查</li><li>打包CSS、SVG</li></ul><p>为什么 rust 性能比 go 好，但是 esbuild 的打包速度会比 swc 快，因为 esbuild 的开发者是个 ceo，代码能力比 swc 的开源者强</p><h2 id="_9-浏览器-跨域" tabindex="-1">9. 浏览器：跨域 <a class="header-anchor" href="#_9-浏览器-跨域" aria-label="Permalink to &quot;9. 浏览器：跨域&quot;">​</a></h2><p>具体可看<a href="/Browser/跨域.html">跨域的十种解决方案</a></p><h3 id="同源策略" tabindex="-1">同源策略 <a class="header-anchor" href="#同源策略" aria-label="Permalink to &quot;同源策略&quot;">​</a></h3><p>一个安全策略</p><p>同源：同一协议（protocol）、域名（domain）、端口（port）</p><h3 id="跨域解决方案" tabindex="-1">跨域解决方案 <a class="header-anchor" href="#跨域解决方案" aria-label="Permalink to &quot;跨域解决方案&quot;">​</a></h3><h4 id="jsonp" tabindex="-1">JSONP <a class="header-anchor" href="#jsonp" aria-label="Permalink to &quot;JSONP&quot;">​</a></h4><ul><li>最古老的彼岸者，利用 <code>script</code> 标签没有跨域限制这个特点</li><li>仅支持 GET 方法</li><li>步骤 <ul><li>定义jsonp回调函数方法jsonpCallback</li><li>script 请求接口（后端）时带上cb=jsonpCallback 参数，如 <code>/api?callback=jsonpCallback </code></li><li>后端 response 返回 jsonpCallback ({a: &#39;b&#39;})，前端执行 <code>jsonpCallback</code> ，就拿到注入的数据</li></ul></li></ul><h4 id="cors-跨域资源共享" tabindex="-1">CORS（跨域资源共享） <a class="header-anchor" href="#cors-跨域资源共享" aria-label="Permalink to &quot;CORS（跨域资源共享）&quot;">​</a></h4><p>在服务端/后端的相应头中添加<code>Access-Control-Allow-*</code> 头，告知浏览器端通过此请求只需要服务器端/后端支持即可，不涉及前端改动</p><h4 id="window-postmessage" tabindex="-1">window.postMessage <a class="header-anchor" href="#window-postmessage" aria-label="Permalink to &quot;window.postMessage&quot;">​</a></h4><p>postMessage是HTML5引入的一种跨文档通信的机制。a 页面通过<code>iframe.contentWindow.postMessage({msg: &#39;hello&#39;}, &#39;b.html(目标页面)&#39;)</code> 发送消息，b 页面通过 <code>window.addEventListener(&#39;message&#39;, function(e){})</code> 接受信息，通讯就完成了</p><h4 id="websocket" tabindex="-1">WebSocket <a class="header-anchor" href="#websocket" aria-label="Permalink to &quot;WebSocket&quot;">​</a></h4><p>双向数据通信，不是 http 协议，所以不受跨域限制，服务端直接传数据给前端</p><h4 id="nginx-代理" tabindex="-1">Nginx 代理 <a class="header-anchor" href="#nginx-代理" aria-label="Permalink to &quot;Nginx 代理&quot;">​</a></h4><p>Nginx.conf 设置反向代理</p><h4 id="node-代理" tabindex="-1">Node 代理 <a class="header-anchor" href="#node-代理" aria-label="Permalink to &quot;Node 代理&quot;">​</a></h4><p>本地开发时，即用 webpack 或者 vite 构建工具时，配置方向代理</p><h4 id="document-domain-iframe" tabindex="-1">document.domain + iframe <a class="header-anchor" href="#document-domain-iframe" aria-label="Permalink to &quot;document.domain + iframe&quot;">​</a></h4><h4 id="document-location-hash-iframe" tabindex="-1">document.location.hash + iframe <a class="header-anchor" href="#document-location-hash-iframe" aria-label="Permalink to &quot;document.location.hash + iframe&quot;">​</a></h4><h4 id="window-name-iframe" tabindex="-1">window.name + iframe <a class="header-anchor" href="#window-name-iframe" aria-label="Permalink to &quot;window.name + iframe&quot;">​</a></h4><h4 id="修改浏览器安全配置" tabindex="-1">修改浏览器安全配置 <a class="header-anchor" href="#修改浏览器安全配置" aria-label="Permalink to &quot;修改浏览器安全配置&quot;">​</a></h4><h2 id="_10-算法题-最大子序和" tabindex="-1">10.算法题：最大子序和 <a class="header-anchor" href="#_10-算法题-最大子序和" aria-label="Permalink to &quot;10.算法题：最大子序和&quot;">​</a></h2><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> maxSubArray</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">nums</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ans </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nums[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> num</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nums) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (sum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            sum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            sum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ans </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">max</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ans, sum)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ans;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div>`,155)]))}const o=i(h,[["render",t]]);export{c as __pageData,o as default};
