import{_ as i,c as s,a3 as a,o as l}from"./chunks/framework.CAwIQbWu.js";const u=JSON.parse('{"title":"Linux常用命令","description":"","frontmatter":{},"headers":[],"relativePath":"Linux/常用命令.md","filePath":"Linux/常用命令.md","lastUpdated":1731245960000}'),t={name:"Linux/常用命令.md"};function d(o,e,p,n,c,h){return l(),s("div",null,e[0]||(e[0]=[a('<h1 id="linux常用命令" tabindex="-1">Linux常用命令 <a class="header-anchor" href="#linux常用命令" aria-label="Permalink to &quot;Linux常用命令&quot;">​</a></h1><h2 id="常用命令列表" tabindex="-1">常用命令列表 <a class="header-anchor" href="#常用命令列表" aria-label="Permalink to &quot;常用命令列表&quot;">​</a></h2><p><code>ps</code>：查看进程</p><ul><li><code>ps -ef </code> 是否有进程</li><li><code>ps -ef | grep xxx</code>：管道筛选相应进程</li></ul><p><code>grep</code>：管道</p><ul><li><code>ps -ef | grep redis</code>：查看启动的 redis 进程</li><li><code>ps -ef | grep nginx</code>：查看启动的 nginx 进程</li><li><code>ps -ef | grep node</code>：查看启动的 node 进程</li></ul><p><code>pwd</code>：查看所在目录位置</p><p><code>ifconfig</code>：查看网络设备信息</p><p><code>free</code>：检查内存</p><ul><li><code>free -h</code>：查看内存，显示单位</li></ul><p><code>df -lh</code>：查看磁盘空间</p><p><code>du</code>：查看占用空间</p><ul><li><code>du -sh *</code>：查看目录下的各个文件所占内存</li></ul><p><code>uname</code>：显示系统内核信息</p><ul><li><code>uname</code>：系统内核名称</li><li><code>uname -a</code>：系统所有相关信息</li><li><code>uname -m</code>：计算机硬件架构</li><li><code>uname -r</code>：系统内核版本号</li><li><code>uname -i</code>：系统硬件架构</li></ul><p><code>ls /etc/*release</code>：查看发行版的版本号</p><p><code>lsb_release -a</code>：⭐查询系统版本</p><p><code>cat /etc/lsb-release</code>：查看系统版本</p><p><code>which</code>：查看安装位置</p><ul><li><code>which nginx</code>：查看 nginx 的安装位置</li></ul><p><code>whereis</code>：显示与至相关的文件的路径位置</p><ul><li><code>whereis nginx</code>：与 nginx 香瓜你的文件的路径位置</li></ul><p><code>find</code>：查找</p><ul><li><code>find -name &#39;*.jar&#39;</code></li><li><code>find / -name redis.conf</code></li></ul><p><code>tar</code>：解压</p><ul><li><code>tar -zxvf xxxx.tar.gz</code>：解压文件</li></ul><p><code>help</code>：帮助手册</p><p><code>cp</code>：复制</p><p><code>mv</code>：移动/改名</p><ul><li><code>mv filename.txt /home/johan/</code></li><li><code>mv code-react-app app</code></li></ul><p><code>jobs</code>：查看后台程序</p><p><code>netstat</code>：</p><ul><li><code>netstat -ntlp</code>：查看占用的端口</li></ul><p><code>tail</code>：查看文件尾部内容</p><ul><li><code>tail -n 10</code>：查看最新的10行日志</li><li><code>tail -n 5 /etc/passwd</code>：查看用户</li></ul><p><code>sz</code>：下载</p><ul><li><code>sz error.log</code>：下载日志到本地</li></ul><p><code>nohup</code>：⭐后台启动程序</p><ul><li><code>nohup xxx &amp;</code>：后台启动程序</li></ul><p><code>kill</code>：杀掉进程</p><ul><li><code>kill -9 xx(进程号)</code></li><li>通过 <code>ps -ef</code> 来查找进程</li></ul><p><code>chmod</code>：提高文件权限</p><ul><li><code>chmod 600 start.sh</code></li></ul><p><code>yum</code>：安装</p><p><code>wget</code>：下载安装包</p><p><code>apt</code>：apt 是一个命令行包管理器用于在基于Debian 的 Linux 发行版，例如Ubuntu Linux mint。安装，更新，删除和管理 deb 软件包</p><h2 id="查看系统架构信息" tabindex="-1">查看系统架构信息 <a class="header-anchor" href="#查看系统架构信息" aria-label="Permalink to &quot;查看系统架构信息&quot;">​</a></h2><p><code>uname -a</code>：查看内核版本</p><p><code>arch</code>：显示当前架构信息</p><p><code>cat /etc/os-release</code>：查看系统版本信息</p><ul><li><code>lsb_release -a</code>：同上</li></ul><p><code>lscpu</code>：查看 CPU 信息</p><p><code>free</code>：查看内存信息</p><p><code>df -h</code>：查看磁盘信息</p><ul><li><code>fdish -l</code>：同上（更全）</li></ul><p><code>top</code>：查看系统资源实时信息</p><p><code>iostat -t 1 3</code>：查看磁盘读写速度</p><ul><li>1s一次，查看3次</li></ul><h2 id="查看端口" tabindex="-1">查看端口 <a class="header-anchor" href="#查看端口" aria-label="Permalink to &quot;查看端口&quot;">​</a></h2><p><code>netstat</code>：</p><ul><li><code>netstat -ntlp</code>：查看占用的端口</li><li><code> netstat -tuln | grep 5432</code>：检查PostgreSQL端口监听状态</li></ul><h2 id="防火墙" tabindex="-1">防火墙 <a class="header-anchor" href="#防火墙" aria-label="Permalink to &quot;防火墙&quot;">​</a></h2><ul><li>RedHat/CentOS 使用的是 Firewall 防火墙。</li><li>Debian/Ubuntu 使用的是 UFW 防火墙。</li></ul><h3 id="redhat-centos-安装" tabindex="-1">RedHat/CentOS 安装 <a class="header-anchor" href="#redhat-centos-安装" aria-label="Permalink to &quot;RedHat/CentOS 安装&quot;">​</a></h3><p><strong>1、更新软件包</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> yum</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> update</span></span></code></pre></div><p><strong>2、安装 firewalld</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> yum</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> firewalld</span></span></code></pre></div><p><strong>3、启动 firewalld</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> start</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> firewalld</span></span></code></pre></div><p><strong>4、如果你在远程位置连接你的服务器，在启用 firewalld 防火墙之前，你必须显式允许进来的 SSH 连接。否则，你将永远都无法连接到机器上。</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> firewall-cmd</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --zone=public</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --add-port=22/tcp</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --permanent</span></span></code></pre></div><blockquote><p>如果 SSH 运行在非标准端口，你需要将上述命令中的 22 端口替换为对应的 SSH 端口。</p></blockquote><p><strong>5、放开 1Panel 系统端口。</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> firewall-cmd</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --zone=public</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --add-port=8090/tcp</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --permanent</span></span></code></pre></div><blockquote><p>上述命令中的 8090 端口需要替换为安装 1Panel 系统时自定义的端口。</p></blockquote><p><strong>6、重新加载防火墙规则，使更改生效</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> firewall-cmd</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --reload</span></span></code></pre></div><p><strong>7、设置开机启动 firewalld</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> enable</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> firewalld</span></span></code></pre></div><h3 id="systemctl-管理系统服务" tabindex="-1">systemctl：管理系统服务 <a class="header-anchor" href="#systemctl-管理系统服务" aria-label="Permalink to &quot;systemctl：管理系统服务&quot;">​</a></h3><p>systemctl命令来自英文词组 system control 的缩写，其功能是管理系统服务。从RHEL 7/ CentOS 7版本起，初始化进程服务init被替代为systemd服务，systemd初始化进程服务的管理是通过systemctl命令完成的，该命令涵盖了service、chkconfig、init、setup等多个命令的大部分功能。</p><p>语法格式：<code>systemctl 参数 动作 服务名</code></p><ul><li><code>systemctl start docker</code>：启动指定的服务</li><li><code>systemctl stop docker</code>：停止指定的服务</li><li><code>systemctl restart docker</code>：重启指定的服务</li><li><code>systemctl status docker</code>：查看指定的服务状态</li><li><code>systemctl enable docker</code>：将指定的服务加入到开启启动项中</li><li><code>systemctl disable docker</code>：将指定的服务从开启启动项中取消</li><li><code>systemctl list-units --type=service</code>：显示系统中所有已启动的服务列表信息</li></ul><h3 id="firewall-cmd-防火墙策略管理工具" tabindex="-1">firewall-cmd：防火墙策略管理工具 <a class="header-anchor" href="#firewall-cmd-防火墙策略管理工具" aria-label="Permalink to &quot;firewall-cmd：防火墙策略管理工具&quot;">​</a></h3><p>firewall-cmd 命令的功能是管理防火墙策略，是 firewalld 服务的配置工具。使用 firewall-cmd 命令修改的防火墙策略会立即生效，但重启后失效，因此在使用时推荐加上permanent参数。</p><p>语法格式：<code>firewall-cmd 参数 对象 </code></p><ul><li><code>firewall-cmd --state</code>：查看当前防火墙状态</li><li><code>firewall-cmd --zone=public --list-ports</code>：查看防火墙当前放行端口列表</li><li><code>firewall-cmd --reload</code>：重新加载防火墙策略，立即生效</li><li><code>firewall-cmd --zone=public --add-port=8080-8081/tcp</code>：设置 8080-8081 为防火墙运行放行的端口号</li><li><code>firewall-cmd --zone=public --add-port=80/tcp --permanent</code>：添加 80 端口</li><li><code>firewall-cmd --zone=public --remove-port=80/tcp --permanent</code>：删除 80 端口</li></ul><h3 id="命令参数" tabindex="-1">命令参数 <a class="header-anchor" href="#命令参数" aria-label="Permalink to &quot;命令参数&quot;">​</a></h3><ul><li>--zone：指定要添加服务的区域名称。</li><li>--add-service：指定要添加的服务名称。</li><li>--permanent：指定该规则永久生效。</li></ul><p>除此之外，还有其他可选参数：</p><ul><li>--list-all：列出所有规则。</li><li>--reload：重新加载防火墙规则。</li><li>--permanent：将规则保存到永久配置中，以便系统重启后仍然有效。</li><li>--delete-service：删除服务。</li><li>--list-services：列出当前系统中所有可用服务。</li><li>--add-source：添加一个 IP 或 IP 段。</li><li>--remove-source：删除一个 IP 或 IP 段。</li><li>--list-sources：列出所有已添加的 IP 或 IP 段。</li><li>--add-port：添加端口。</li><li>--remove-port：删除端口。</li><li>--list-ports：列出所有已添加的端口。</li><li>--add-rich-rule：添加一个更加复杂的规则。</li><li>--query-service：查询服务是否可用。</li><li>--get-zones：列出所有可用的区域。</li><li>--zone=zone-name：指定一个区域。</li></ul><h3 id="debian-ubuntu-安装" tabindex="-1">Debian/Ubuntu 安装 <a class="header-anchor" href="#debian-ubuntu-安装" aria-label="Permalink to &quot;Debian/Ubuntu 安装&quot;">​</a></h3><p><strong>1、更新软件包</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> update</span></span></code></pre></div><p><strong>2、安装 UFW</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ufw</span></span></code></pre></div><p><strong>3、如果你在远程位置连接你的服务器，在启用 UFW 防火墙之前，你必须显式允许进来的 SSH 连接。否则，你将永远都无法连接到机器上。</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ufw</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> allow</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 22/tcp</span></span></code></pre></div><blockquote><p>如果 SSH 运行在非标准端口，你需要将上述命令中的 22 端口替换为对应的 SSH 端口。</p></blockquote><p><strong>4、放开 1Panel 系统端口。</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ufw</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> allow</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 8090/tcp</span></span></code></pre></div><blockquote><p>上述命令中的 8090 端口需要替换为安装 1Panel 系统时自定义的端口。</p></blockquote><p><strong>5、启动 UFW</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ufw</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> enable</span></span></code></pre></div><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h2><ul><li><a href="https://zhuanlan.zhihu.com/p/22654634" target="_blank" rel="noreferrer">linux 学习资源整理</a></li><li><a href="https://blog.laoda.de/archives/useful-script#docker%E7%9B%B8%E5%85%B3" target="_blank" rel="noreferrer">整理一些常用的脚本（持续更新中）</a></li><li><a href="https://www.myfreax.com/linux-tutorial/" target="_blank" rel="noreferrer">Linux 教程</a></li></ul>',107)]))}const k=i(t,[["render",d]]);export{u as __pageData,k as default};
