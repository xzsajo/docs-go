import{_ as a,c as p,a3 as n,o as r}from"./chunks/framework.CAwIQbWu.js";const g=JSON.parse('{"title":"手写 plugin","description":"","frontmatter":{},"headers":[],"relativePath":"webpack/手写plugin.md","filePath":"webpack/手写plugin.md","lastUpdated":1724059762000}'),i={name:"webpack/手写plugin.md"};function s(l,e,t,c,o,h){return r(),p("div",null,e[0]||(e[0]=[n(`<h1 id="手写-plugin" tabindex="-1">手写 plugin <a class="header-anchor" href="#手写-plugin" aria-label="Permalink to &quot;手写 plugin&quot;">​</a></h1><h2 id="常见的-plugin" tabindex="-1">常见的 Plugin <a class="header-anchor" href="#常见的-plugin" aria-label="Permalink to &quot;常见的 Plugin&quot;">​</a></h2><p><a href="https://www.npmjs.com/package/webpack-merge" target="_blank" rel="noreferrer">webpack-merge</a>: 用于合并 webpack 的公共配置和环境配置(合并 webpack.config.js 和 webpack.development.js 或者 webpack.production.js)</p><p><a href="https://www.npmjs.com/package/yargs-parser" target="_blank" rel="noreferrer">yargs-parser</a>: 用于将我们的 npm scripts 中的命令行参数转换成键值对的形式如 --mode development 会被解析成键值对的形式 mode: &quot;development&quot;，便于在配置文件中获取参数</p><p><a href="https://www.npmjs.com/package/clean-webpack-plugin" target="_blank" rel="noreferrer">clean-webpack-plugin</a>: 用于清除本地文件，在进行生产环境打包的时候，如果不清除 dist 文件夹，那么每次打包都会生成不同的 js 文件或者 css 文件堆积在文件夹中，因为每次打包都会生成不同的 hash 值导致每次打包生成的文件名与上次打包不一样不会覆盖上次打包留下来的文件</p><p><a href="https://www.npmjs.com/package/progress-bar-webpack-plugin" target="_blank" rel="noreferrer">progress-bar-webpack-plugin</a>: 打包编译的时候以进度条的形式反馈打包进度</p><p><a href="https://www.npmjs.com/package/webpack-build-notifier" target="_blank" rel="noreferrer">webpack-build-notifier</a>: 当你打包之后切换到别的页面的时候，完成时会在本地系统弹出一个提示框告知你打包结果(成功或失败或警告)</p><p><a href="https://www.npmjs.com/package/html-webpack-plugin" target="_blank" rel="noreferrer">html-webpack-plugin</a>: 自动生成 html,并默认将打包生成的 js、css 引入到 html 文件中</p><p><a href="https://www.npmjs.com/package/mini-css-extract-plugin" target="_blank" rel="noreferrer">mini-css-extract-plugin</a>: webpack 打包样式文件中的默认会把样式文件代码打包到 bundle.js 中，mini-css-extract-plugin 这个插件可以将样式文件从 bundle.js 抽离出来一个文件，并且支持 chunk css</p><p><a href="https://www.npmjs.com/package/add-asset-html-webpack-plugin" target="_blank" rel="noreferrer">add-asset-html-webpack-plugin</a>: 从命名可以看出，它的作用是可以将静态资源 css 或者 js 引入到<a href="https://www.npmjs.com/package/html-webpack-plugin" target="_blank" rel="noreferrer">html-webpack-plugin</a>生成的 html 文件中</p><p><a href="https://www.npmjs.com/package/optimize-css-assets-webpack-plugin" target="_blank" rel="noreferrer">optimize-css-assets-webpack-plugin</a>: css 压缩，主要使用 <a href="https://github.com/cssnano/cssnano" target="_blank" rel="noreferrer">cssnano</a> 压缩器(webpack4 的执行环境内置了 cssnano，所以不用安装)</p><p><a href="https://webpack.docschina.org/plugins/split-chunks-plugin/" target="_blank" rel="noreferrer">splitChunks</a>: CommonChunkPlugin 的后世，用于对 bundle.js 进行 chunk 切割(webpack 的内置插件)</p><p><a href="https://webpack.docschina.org/plugins/dll-plugin/" target="_blank" rel="noreferrer">DllPlugin</a>: 将模块预先编译，它会在第一次编译的时候将配置好的需要预先编译的模块编译在缓存中，第二次编译的时候，解析到这些模块就直接使用缓存，而不是去编译这些模块(webpack 的内置插件)</p><p><a href="https://webpack.docschina.org/plugins/dll-plugin/#dllreferenceplugin" target="_blank" rel="noreferrer">DllReferencePlugin</a>: 将预先编译好的模块关联到当前编译中，当 webpack 解析到这些模块时，会直接使用预先编译好的模块(webpack 的内置插件)</p><p><a href="https://webpack.docschina.org/plugins/hot-module-replacement-plugin/" target="_blank" rel="noreferrer">HotModuleReplacementPlugin</a>: 实现局部热加载(刷新)，区别与在 webpack-dev-server 的全局刷新(webpack 的内置插件)</p><p>webpack 流程图</p><p>init</p><p>run</p><p>compile 编译开始</p><p>compilation 开始编译的过程</p><p>make 编译</p><p>afterCompilation 编译结束</p><p>seal 对代码进行封装，合并，优化</p><p>codeGen 生成最终的代码，比如把多个文件合并为一个文件</p><p>emit 发射一个文件，把文件写进硬盘里面</p><p>done 结束</p><h3 id="imagemin-webpack-plugin" tabindex="-1">imagemin-webpack-plugin <a class="header-anchor" href="#imagemin-webpack-plugin" aria-label="Permalink to &quot;imagemin-webpack-plugin&quot;">​</a></h3><p>emit</p><p>![image-20240811183746700](D:\\Documents\\PicGo Files\\image-20240811183746700.png)</p><h3 id="clean-webpack-plugin" tabindex="-1">clean-webpack-plugin <a class="header-anchor" href="#clean-webpack-plugin" aria-label="Permalink to &quot;clean-webpack-plugin&quot;">​</a></h3><p>![image-20240811183758201](D:\\Documents\\PicGo Files\\image-20240811183758201.png)</p><h3 id="自己写-webpack-plugin" tabindex="-1">自己写 webpack plugin <a class="header-anchor" href="#自己写-webpack-plugin" aria-label="Permalink to &quot;自己写 webpack plugin&quot;">​</a></h3><p><a href="https://webpack.js.org/contribute/writing-a-plugin/" target="_blank" rel="noreferrer">https://webpack.js.org/contribute/writing-a-plugin/</a></p><p>对 webpack hooks 的了解</p><p>对编译原理的了解</p><p>对 chunk、hash、module、dep、factory 等概念的理解</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyExampleWebpackPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">compiler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  	// 监听 hooks</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h2><ul><li><a href="https://juejin.cn/post/6844903935413583880" target="_blank" rel="noreferrer">为什么 webpack4 默认支持 ES6 语法的压缩？</a></li><li><a href="https://mp.weixin.qq.com/s/8oDENjCOsXxlA2fyuIN4GA" target="_blank" rel="noreferrer">手把手带你入门 Webpack Plugin</a></li><li><a href="https://mp.weixin.qq.com/s/T9H5HYpo-MBgZiSnaHTi0A" target="_blank" rel="noreferrer">Webpack - 手把手教你写一个 loader / plugin</a></li></ul>`,39)]))}const u=a(i,[["render",s]]);export{g as __pageData,u as default};
