import{_ as e,c as s,a3 as n,o as i}from"./chunks/framework.CAwIQbWu.js";const m=JSON.parse('{"title":"包管理器的演变","description":"","frontmatter":{},"headers":[],"relativePath":"Node/包管理器.md","filePath":"Node/包管理器.md","lastUpdated":1726732173000}'),p={name:"Node/包管理器.md"};function t(l,a,r,o,h,d){return i(),s("div",null,a[0]||(a[0]=[n(`<h1 id="包管理器的演变" tabindex="-1">包管理器的演变 <a class="header-anchor" href="#包管理器的演变" aria-label="Permalink to &quot;包管理器的演变&quot;">​</a></h1><p>通过 Node.js 官方内置可以看出，目前前端领域最火的包管理工具主要是 npm（ Node.js 直接内置）、yarn （corepack 内置） 以及 pnpm （corepack 内置）。</p><p>因此，本文主要是围绕这三者来阐述包管理工具在迭代演进中提出的一些创新性特性以及其遇到困难是如何解决问题的。</p><h2 id="npm" tabindex="-1">NPM <a class="header-anchor" href="#npm" aria-label="Permalink to &quot;NPM&quot;">​</a></h2><ul><li><a href="https://github.com/pnpm/pnpm" target="_blank" rel="noreferrer">pnpm</a> - 快速、节省磁盘空间高效的包管理器</li><li><a href="https://github.com/npm/cli" target="_blank" rel="noreferrer">npm</a> - JavaScript 包管理工具</li><li><a href="https://github.com/yarnpkg/berry" target="_blank" rel="noreferrer">yarn</a> - 现代包管理工具，拆分成多个不同的包</li><li><a href="https://github.com/wclr/yalc" target="_blank" rel="noreferrer">yalc</a> - 更适用的前端 link 工具</li><li><a href="https://github.com/Pana/nrm" target="_blank" rel="noreferrer">nrm</a> - 快速切换 npm 注册服务商，如 npm、cnpm、nj、taobao</li><li><a href="https://github.com/cnpm/cnpm" target="_blank" rel="noreferrer">cnpm</a> - NPM 中国区镜像客户端</li></ul><h3 id="npm-是什么" tabindex="-1">NPM 是什么 <a class="header-anchor" href="#npm-是什么" aria-label="Permalink to &quot;NPM 是什么&quot;">​</a></h3><p>NPM（node package manager），通常称为 node 包管理器。顾名思义，它的主要功能就是管理 node 包，包括：安装、卸载、更新、查看、搜索、发布等</p><p>一般伴随着 Node 一起被下载来，就是说你下载了 Node，意味着也下载了 NPM</p><p>npm 官网：<a href="https://www.npmjs.com/" target="_blank" rel="noreferrer">https://www.npmjs.com/</a></p><p>npm 官网文档：<a href="https://docs.npmjs.com/" target="_blank" rel="noreferrer">https://docs.npmjs.com/</a></p><p>npm 中文教程：<a href="https://www.npmjs.cn/" target="_blank" rel="noreferrer">https://www.npmjs.cn/</a></p><p>npm 菜鸟教程：<a href="https://www.runoob.com/nodejs/nodejs-npm.html" target="_blank" rel="noreferrer">https://www.runoob.com/nodejs/nodejs-npm.html</a></p><h3 id="npm-常用命令行" tabindex="-1">NPM 常用命令行 <a class="header-anchor" href="#npm-常用命令行" aria-label="Permalink to &quot;NPM 常用命令行&quot;">​</a></h3><p><code>npm init</code> 初始化，加 -y 一键</p><p><code>npm install npm@latest -g</code> 升级到最新</p><p><code>npm cache clean -f</code> npm 清除缓存</p><p><code>npm publist</code> 将包推送到远程仓库</p><p><code>npm update</code> 升级包</p><p><code>npm audit fix</code> 修复包的安全漏洞并升级</p><p><code>pm2 monit &lt;AppName&gt;/&lt;id&gt; </code>监控这个进程的 CPU 和内存信息</p><p><code>pm2 delete &lt;AppName&gt;/&lt;id&gt;</code> 删掉</p><h3 id="npm-version的含义" tabindex="-1">npm version的含义 <a class="header-anchor" href="#npm-version的含义" aria-label="Permalink to &quot;npm version的含义&quot;">​</a></h3><p>npm version 是 Node.js 包管理器 npm 中的一个命令，它用于管理和更新项目的版本号。npm 版本号遵循语义版本控制（SemVer）规范，其格式为 <code>主版本号.次版本号.修订号</code>（major.minor.patch）。各部分的含义如下：</p><ul><li><strong>主版本号</strong>（major）：当你做了不兼容的 API 修改时增加此版本号。</li><li><strong>次版本号</strong>（minor）：当你在不破坏兼容性的前提下添加功能时增加此版本号。</li><li><strong>修订号</strong>（patch）：当你做了向下兼容的问题修正时增加此版本号。</li></ul><h2 id="pnpm" tabindex="-1">PNPM <a class="header-anchor" href="#pnpm" aria-label="Permalink to &quot;PNPM&quot;">​</a></h2><p>pnpm 在依赖包管理方式上舍弃了 npm 的那一套，而是巧妙利用 symbol link 和 hard link 做出了自己的创新</p><h3 id="symbol" tabindex="-1">symbol <a class="header-anchor" href="#symbol" aria-label="Permalink to &quot;symbol&quot;">​</a></h3><p>npm 扁平化 node_modules 之后带来了新的问题，而 pnpm 利用符号链接（symbol link）的方式重新设计了 node_modules 的结构来处理扁平化带来的问题</p><p>复用之前提到过的依赖关系：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Application -&gt; A_v1 -&gt; B_v1</span></span>
<span class="line"><span>            -&gt; C_v1 -&gt; B_v2</span></span>
<span class="line"><span>            -&gt; D_v1 -&gt; B_v2</span></span></code></pre></div><h3 id="hard-link" tabindex="-1">hard link <a class="header-anchor" href="#hard-link" aria-label="Permalink to &quot;hard link&quot;">​</a></h3><p>pnpm 在安装过程中，会在全局的 store 目录中去存储依赖包，然后在对应的 node_modules 中创建相应的硬链接。由于不能对目录进行 hard link，因此不像 npm 一样缓存的是压缩包，pnpm 是将依赖包的每个文件都缓存到 store 中，然后创建相应文件的硬链。</p><p>总结：</p><ul><li>npm与yarn两者设计类似 都有幽灵依赖问题</li><li>yarn比npm在依赖提升更智能一点 节约磁盘体积好一点 其他没啥区别了...</li><li>pnpm从设计层面解决了幽灵依赖问题 但是在使用时存在兼容性问题 感觉还是要慎用</li></ul><h3 id="cnpm" tabindex="-1">cnpm <a class="header-anchor" href="#cnpm" aria-label="Permalink to &quot;cnpm&quot;">​</a></h3><p>快速、节省磁盘空间高效的包管理器。</p><p>因为 npm 的服务器在国外，使用 npm 下载太慢，一般使用 cnpm 加速</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">npm install </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">g cnpm </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">registry</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">https</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//registry.npm.taobao.org</span></span></code></pre></div><h3 id="save-与-save-dev-的区别" tabindex="-1">--save 与 --save-dev 的区别 <a class="header-anchor" href="#save-与-save-dev-的区别" aria-label="Permalink to &quot;--save 与 --save-dev 的区别&quot;">​</a></h3><p>只要 npm install X，就会把 X 包安装到 node_modules 中，区别在于</p><ul><li>什么都不写，不会添加到 package.json</li><li>--save（或者 -S），会在 dependencies 属性下添加 X <ul><li>生产环境下使用</li></ul></li><li>--save-dev（或者 -D），会在 devDependencies 属性下添加 X <ul><li>开发环境下使用</li></ul></li></ul><h2 id="package-json" tabindex="-1">package.json <a class="header-anchor" href="#package-json" aria-label="Permalink to &quot;package.json&quot;">​</a></h2><ul><li><a href="https://github.com/sindresorhus/read-pkg-up" target="_blank" rel="noreferrer">read-pkg-up</a> - 读取最近的 package.json 文件</li><li><a href="https://github.com/indexzero/node-pkginfo" target="_blank" rel="noreferrer">node-pkginfo</a> - 从 package.json 读取属性的简单方法</li><li><a href="https://github.com/sindresorhus/pkg-dir" target="_blank" rel="noreferrer">pkg-dir</a> - 查找 npm 包的根目录</li><li><a href="https://github.com/sindresorhus/read-pkg" target="_blank" rel="noreferrer">read-pkg</a> - 读取 package.json 文件</li><li><a href="https://github.com/sindresorhus/write-pkg" target="_blank" rel="noreferrer">write-pkg</a> - 写入 package.json 文件</li><li><a href="https://github.com/npm/read-package-json-fast" target="_blank" rel="noreferrer">read-package-json-fast</a> - 类似 read-package-json, 但更快</li></ul><h3 id="属性说明" tabindex="-1">属性说明 <a class="header-anchor" href="#属性说明" aria-label="Permalink to &quot;属性说明&quot;">​</a></h3><ul><li>name 包名</li><li>version 版本</li><li>description 描述</li><li>homepage 官网 url</li><li>author 作者</li><li>dependencies 生产依赖包列表</li><li>devDependencies 开发依赖包列表</li><li>...</li></ul><h3 id="如何升级项目中的包" tabindex="-1">如何升级项目中的包 <a class="header-anchor" href="#如何升级项目中的包" aria-label="Permalink to &quot;如何升级项目中的包&quot;">​</a></h3><p>使用 <code>npm outdated</code> 查看有哪些过时的包</p><p>若要将所有软件包更新到新的主版本，则全局地安装 <code>npm-check-updates</code> 软件包：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -g</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> npm-check-updates</span></span></code></pre></div><p>然后运行：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ncu</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u</span></span></code></pre></div><p>这会升级 <code>package.json</code> 文件的 <code>dependencies</code> 和 <code>devDependencies</code> 中的所有版本，以便 npm 可以安装新的主版本。</p><p>现在可以运行更新了：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> update</span></span></code></pre></div><p>如果只是下载了项目还没有 <code>node_modules</code> 依赖包，并且想先安装新的版本，则运行：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span></span></code></pre></div><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h2><ul><li><p><a href="http://nodejs.cn/website2/learn/update-all-the-nodejs-dependencies-to-their-latest-version/" target="_blank" rel="noreferrer">nodejs 中文文档</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/582229306" target="_blank" rel="noreferrer">包管理工具的演进</a></p></li></ul>`,58)]))}const k=e(p,[["render",t]]);export{m as __pageData,k as default};
