import{_ as s,c as i,a3 as t,o as e}from"./chunks/framework.CAwIQbWu.js";const p="/images/HTTP/HTTP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B.png",E=JSON.parse('{"title":"HTTP 协议原理+实践 Web 开发工程师必学！","description":"","frontmatter":{},"headers":[],"relativePath":"Read/course/Web开发工程师必学.md","filePath":"Read/course/Web开发工程师必学.md","lastUpdated":1677217466000}'),n={name:"Read/course/Web开发工程师必学.md"};function h(l,a,r,o,d,k){return e(),i("div",null,a[0]||(a[0]=[t('<h1 id="http-协议原理-实践-web-开发工程师必学" tabindex="-1">HTTP 协议原理+实践 Web 开发工程师必学！ <a class="header-anchor" href="#http-协议原理-实践-web-开发工程师必学" aria-label="Permalink to &quot;HTTP 协议原理+实践 Web 开发工程师必学！&quot;">​</a></h1><p>浏览器输入 URL 后 HTTP 请求返回的完整过程</p><p><img src="https://i.loli.net/2021/06/03/2YBUohayWfjNKIc.png" alt="浏览器输入URL后HTTP请求返回的完整过程"></p><h2 id="网络协议分层" tabindex="-1">网络协议分层 <a class="header-anchor" href="#网络协议分层" aria-label="Permalink to &quot;网络协议分层&quot;">​</a></h2><p><img src="https://i.loli.net/2021/06/03/oD3xifJNZFpmuch.png" alt="网络协议分层"></p><p>物理层：定义物理设备如何传输数据</p><p>数据链路层：在通信的实体间建立数据链路连接</p><p>网络层：为数据在节点之间传输创建逻辑链路</p><h4 id="传输层" tabindex="-1">传输层 <a class="header-anchor" href="#传输层" aria-label="Permalink to &quot;传输层&quot;">​</a></h4><p>向用户提供可靠的端到端（End-to-End）服务</p><p>传输层向高层屏蔽了下层数据通信的细节</p><h4 id="应用层" tabindex="-1">应用层 <a class="header-anchor" href="#应用层" aria-label="Permalink to &quot;应用层&quot;">​</a></h4><p>为应用软件提供了很多服务</p><p>构建于 TCP 协议之上</p><p>屏蔽网络传输相关细节</p><h3 id="http-协议发展历史" tabindex="-1">HTTP 协议发展历史 <a class="header-anchor" href="#http-协议发展历史" aria-label="Permalink to &quot;HTTP 协议发展历史&quot;">​</a></h3><h4 id="http-0-9" tabindex="-1">HTTP/0.9 <a class="header-anchor" href="#http-0-9" aria-label="Permalink to &quot;HTTP/0.9&quot;">​</a></h4><p>只有一个命令 GET</p><p>没有 HEADER 等描述数据的信息</p><p>服务器发送完毕，关闭 TCP 连接（现在的 http1.1：在一个 TCP 中能传递多个 HTTP）</p><h4 id="http-1-0" tabindex="-1">HTTP/1.0 <a class="header-anchor" href="#http-1-0" aria-label="Permalink to &quot;HTTP/1.0&quot;">​</a></h4><p>增加了很多命令</p><p>增加 status code 和 header</p><p>多字符集支持、多部分发送、权限、缓存等</p><h4 id="http-1-1" tabindex="-1">HTTP/1.1 <a class="header-anchor" href="#http-1-1" aria-label="Permalink to &quot;HTTP/1.1&quot;">​</a></h4><p>持久连接</p><p>pipeline</p><p>增加 host 和其他一些命令</p><h4 id="http-2-0" tabindex="-1">HTTP/2.0 <a class="header-anchor" href="#http-2-0" aria-label="Permalink to &quot;HTTP/2.0&quot;">​</a></h4><p>所有数据以二进制传输</p><p>同一个连接里面发送多个请求不再需要按照顺序来</p><p>头信息压缩以及推送等提高效率的功能</p><h3 id="http-三次握手" tabindex="-1">HTTP 三次握手 <a class="header-anchor" href="#http-三次握手" aria-label="Permalink to &quot;HTTP 三次握手&quot;">​</a></h3><p><img src="'+p+`" alt="HTTP三次握手"></p><p>为什么要三次握手？</p><h3 id="uri、url、urn" tabindex="-1">URI、URL、URN <a class="header-anchor" href="#uri、url、urn" aria-label="Permalink to &quot;URI、URL、URN&quot;">​</a></h3><h4 id="uri" tabindex="-1">URI <a class="header-anchor" href="#uri" aria-label="Permalink to &quot;URI&quot;">​</a></h4><p>Uniform Resource Identifier/统一资源标识符</p><p>用来标识互联网上的信息资源，唯一</p><p>包括 URL 和 URN</p><h4 id="url" tabindex="-1">URL <a class="header-anchor" href="#url" aria-label="Permalink to &quot;URL&quot;">​</a></h4><p>Uniform Resource Locator/统一资源定位器</p><p>就是网站地址：<a href="http://www.baidu.com" target="_blank" rel="noreferrer">http://www.baidu.com</a></p><p><a href="http://user:pass@host.com:80/path?query=string#hash" target="_blank" rel="noreferrer">http://user:pass@host.com:80/path?query=string#hash</a></p><p>此类格式的都叫做 URL,比如 ftp 协议（文件协议）</p><h4 id="urn" tabindex="-1">URN <a class="header-anchor" href="#urn" aria-label="Permalink to &quot;URN&quot;">​</a></h4><p>永久统一资源定位符</p><p>在资源移动之后还能被找到</p><p>目前还没有非常成熟的使用方案</p><h3 id="http-报文格式" tabindex="-1">HTTP 报文格式 <a class="header-anchor" href="#http-报文格式" aria-label="Permalink to &quot;HTTP 报文格式&quot;">​</a></h3><p><img src="https://i.loli.net/2021/06/03/dw5P7ODa2oTcYAm.png" alt="HTTP报文格式"></p><h4 id="http-的方法" tabindex="-1">HTTP 的方法 <a class="header-anchor" href="#http-的方法" aria-label="Permalink to &quot;HTTP 的方法&quot;">​</a></h4><p>用来定义对于资源的操作</p><p>常用的有 GET、POST、PUT、DELETE 等</p><p>从定义上讲有各自的语义</p><h4 id="http-的-code" tabindex="-1">HTTP 的 CODE <a class="header-anchor" href="#http-的-code" aria-label="Permalink to &quot;HTTP 的 CODE&quot;">​</a></h4><p>定义服务器对请求的处理结果</p><p>各个区间的 CODE 有各自的语义</p><p>100：</p><p>200：</p><p>300：</p><p>400：</p><p>500：</p><p>好的 HTTP 服务可以通过 CODE 判断结果</p><h3 id="第三章-http-的各种特性总览" tabindex="-1">第三章：HTTP 的各种特性总览 <a class="header-anchor" href="#第三章-http-的各种特性总览" aria-label="Permalink to &quot;第三章：HTTP 的各种特性总览&quot;">​</a></h3><p>使用 curl 来模式客户端请求</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">curl </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">v www.baidu.com</span></span></code></pre></div><p>CORS 跨域请求的限制与解决</p><p>浏览器的同域限制</p><p>JSONP</p><p>‘Access-Control-Allow-Origin’： ‘*’</p><h4 id="cors-预请求" tabindex="-1">CORS 预请求 <a class="header-anchor" href="#cors-预请求" aria-label="Permalink to &quot;CORS 预请求&quot;">​</a></h4><p>允许方法：GET、HEAD、POST</p><p>允许 Content-Type：text/plain、multipart/form-data、application/x-www-form-urlencoded</p><p>其他限制：</p><p>请求头限制</p><p>XMLHttpRequestUpload 对象均没有任何事件监听器</p><p>请求中没有使用 ReadabkeStream 对象</p><p>‘Access-Control-Allow-Header’： ‘X-Test-Cors’(头的名字)</p><p>允许跨域的头</p><p>‘Access-Control-Allow-Header’： ‘POST, PUT, Delete‘</p><p>允许跨域的方法</p><p>’Access-Control-Max-Age‘: 跨域的最长时间</p><h4 id="缓存-cache-control" tabindex="-1">缓存 Cache-Control <a class="header-anchor" href="#缓存-cache-control" aria-label="Permalink to &quot;缓存 Cache-Control&quot;">​</a></h4><h5 id="特性-值" tabindex="-1">特性（值）: <a class="header-anchor" href="#特性-值" aria-label="Permalink to &quot;特性（值）:&quot;">​</a></h5><h5 id="可缓存性" tabindex="-1">可缓存性 <a class="header-anchor" href="#可缓存性" aria-label="Permalink to &quot;可缓存性&quot;">​</a></h5><p>​ public</p><p>​ private</p><p>​ no-cache</p><p>​ <strong>到期</strong></p><p>​ max-age=<code>&lt;seconds&gt;</code></p><p>​ s-maxage=<code>&lt;seconds&gt;</code> 代理服务器</p><p>​ max-stale=<code>&lt;seconds&gt;</code></p><p>​ <strong>重新验证</strong></p><p>​ must-revalidate</p><p>​ proxy-revalidate</p><p>​ <strong>其他</strong></p><p>​ no-store 不能用缓存</p><p>​ no-transform 不允许改动内容</p><p>’Cache-Control‘： ’max-age=200‘ 就能缓存住，</p><p>前端构建工具（例如 webpack）在打包时会构建出 hash 值。如果 hash 值没变，就用缓存，hash 值改变（即我们写的新业务）需要用户来读取</p><h4 id="缓存验证-last-modified-和-etag-的使用" tabindex="-1">缓存验证 Last-Modified 和 Etag 的使用 <a class="header-anchor" href="#缓存验证-last-modified-和-etag-的使用" aria-label="Permalink to &quot;缓存验证 Last-Modified 和 Etag 的使用&quot;">​</a></h4><p><img src="https://i.loli.net/2021/06/03/W7tXPNZ5kuYoL6A.png" alt="缓存验证Last-Modified和Etag的使用"></p><p>验证头：Last-Modified、Etag</p><h4 id="last-modified" tabindex="-1">Last-Modified <a class="header-anchor" href="#last-modified" aria-label="Permalink to &quot;Last-Modified&quot;">​</a></h4><p>上次修改时间</p><p>配合 If-Modified-Since 或者 If-Unmodified-Since 使用</p><p>对比上次修改时间以验证资源是否需要更新</p><h5 id="etag" tabindex="-1"><strong>Etag</strong> <a class="header-anchor" href="#etag" aria-label="Permalink to &quot;**Etag**&quot;">​</a></h5><p>数据签名</p><p>配合 If-Match 或者 If-Non-Match 使用</p><p>对比资源的签名判断是否使用缓存（webpack 里的 hash 就是用这个原理）</p><h4 id="cookie-和-session" tabindex="-1">Cookie 和 Session <a class="header-anchor" href="#cookie-和-session" aria-label="Permalink to &quot;Cookie 和 Session&quot;">​</a></h4><h5 id="cookie" tabindex="-1">cookie <a class="header-anchor" href="#cookie" aria-label="Permalink to &quot;cookie&quot;">​</a></h5><p>通过 Set-Cookie 设置</p><p>下次请求会自动带上</p><p>键值对，可以设置多个</p><h5 id="cookie-的属性" tabindex="-1">cookie 的属性 <a class="header-anchor" href="#cookie-的属性" aria-label="Permalink to &quot;cookie 的属性&quot;">​</a></h5><p>max-age 和 expires 设置过期时间</p><p>Secure 只有 https 的时候发送</p><p>HttpOnly 无法通过 document.cookie 访问</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Set-Cookie&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;id=123;max-age=10&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;abc=456, domain=test.com&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><p>Domain：让同域名下的两个子网站之间的 cookie 通讯</p><h3 id="http-长连接" tabindex="-1">HTTP 长连接 <a class="header-anchor" href="#http-长连接" aria-label="Permalink to &quot;HTTP 长连接&quot;">​</a></h3><p>一个 tcp 连接中能发送多个 http 请求</p><p>HTTP 的长连接是建立在 tcp 的基础上，chrome 浏览器最多支持 6 个 http 请求（公用一个 tcp 连接）</p><p>在 http header 里写</p><p>Connection：keep-Alive</p><h3 id="数据协商" tabindex="-1">数据协商 <a class="header-anchor" href="#数据协商" aria-label="Permalink to &quot;数据协商&quot;">​</a></h3><h4 id="分类" tabindex="-1">分类 <a class="header-anchor" href="#分类" aria-label="Permalink to &quot;分类&quot;">​</a></h4><p>请求（request）</p><p>返回（response）</p><p>request 中的 Accept</p><p>Accept：数据类型</p><p>Accept-Encoding：编码方式</p><p>Accept-Language：语言</p><p>User-Agent：浏览器信息</p><p>response 中的 Content</p><p>Content-Type: 数据格式</p><p>Content-Encoding: 编码方式 <code>gzip</code></p><p>Content-Language：语言</p><h4 id="redirect" tabindex="-1">Redirect <a class="header-anchor" href="#redirect" aria-label="Permalink to &quot;Redirect&quot;">​</a></h4><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (request.url </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;/&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">writeHead</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">302</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Location: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/new&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (request.url </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;/new&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">writeHead</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &#39;Content-Type&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;text/html&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&lt;div&gt;hello,world&lt;/div&gt;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>HTTP 状态码：</p><p>302 临时跳转</p><p>301 永久跳转 （谨慎，你使用了之后就不好控制了）</p><h3 id="nginx" tabindex="-1">Nginx <a class="header-anchor" href="#nginx" aria-label="Permalink to &quot;Nginx&quot;">​</a></h3><div class="language-nginx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">server</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	listen </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	80</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	server_name </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">test.com</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	location / {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		proxy_pass http://127.0.0.1:888;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		proxy_set_header </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Host $host;	// </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">修改头</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>代理缓存</p><p>服务器中的 Cache-Control:s-maxage 给代理缓存用</p><p>no-store 永不缓存</p><p>HTTP 头 Vary http 头信息一样才缓存</p><h3 id="https-解析" tabindex="-1">HTTPS 解析 <a class="header-anchor" href="#https-解析" aria-label="Permalink to &quot;HTTPS 解析&quot;">​</a></h3><h4 id="加密" tabindex="-1">加密 <a class="header-anchor" href="#加密" aria-label="Permalink to &quot;加密&quot;">​</a></h4><p>私钥和公钥</p><p>在 nginx 中配置 https</p><p><img src="https://i.loli.net/2021/06/03/oai5XeD2pWjNUsJ.png" alt="在nginx中配置https"></p><h3 id="http2" tabindex="-1">HTTP2 <a class="header-anchor" href="#http2" aria-label="Permalink to &quot;HTTP2&quot;">​</a></h3><h4 id="优势" tabindex="-1">优势 <a class="header-anchor" href="#优势" aria-label="Permalink to &quot;优势&quot;">​</a></h4><p>信道复用</p><p>分帧传输</p><p>Server Push</p><div class="language-nginx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">server</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	listen </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	443</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> http2；</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    server_name test.com;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    http2_push_preload </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>http/1.1 和 http2 对比网站</p><p><a href="https://http2.akamai.com/demo" target="_blank" rel="noreferrer">https://http2.akamai.com/demo</a></p>`,165)]))}const g=s(n,[["render",h]]);export{E as __pageData,g as default};
