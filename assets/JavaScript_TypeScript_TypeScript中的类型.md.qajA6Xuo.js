import{_ as e,c as i,a3 as t,o as s}from"./chunks/framework.CAwIQbWu.js";const k=JSON.parse('{"title":"TypeScript 中的类型","description":"","frontmatter":{},"headers":[],"relativePath":"JavaScript/TypeScript/TypeScript中的类型.md","filePath":"JavaScript/TypeScript/TypeScript中的类型.md","lastUpdated":1724059762000}'),r={name:"JavaScript/TypeScript/TypeScript中的类型.md"};function p(c,a,o,d,n,h){return s(),i("div",null,a[0]||(a[0]=[t('<h1 id="typescript-中的类型" tabindex="-1">TypeScript 中的类型 <a class="header-anchor" href="#typescript-中的类型" aria-label="Permalink to &quot;TypeScript 中的类型&quot;">​</a></h1><h2 id="交叉类型" tabindex="-1">交叉类型 <a class="header-anchor" href="#交叉类型" aria-label="Permalink to &quot;交叉类型&quot;">​</a></h2><p>交叉类型就是多个类型，通过 <code>&amp;</code> 类型运算符，合并成一个类型</p><h2 id="联合类型" tabindex="-1">联合类型 <a class="header-anchor" href="#联合类型" aria-label="Permalink to &quot;联合类型&quot;">​</a></h2><p>通过操作符 <code>|</code> ，将多个类型进行联合，组成一个复合类型</p><h2 id="类型别名" tabindex="-1">类型别名 <a class="header-anchor" href="#类型别名" aria-label="Permalink to &quot;类型别名&quot;">​</a></h2><h2 id="类型兼容" tabindex="-1">类型兼容 <a class="header-anchor" href="#类型兼容" aria-label="Permalink to &quot;类型兼容&quot;">​</a></h2><p>类型注释</p><p>TypeScript 通过类型注解提供编译时的静态类型检查，可以在编译阶段就发现潜在 Bug，同时让编码过程中的提示也更智能。使用方式很简单，在 <code>:</code> 冒号后面注明变量的类型即可。</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> str</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;abc&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h2 id="类型保护" tabindex="-1">类型保护 <a class="header-anchor" href="#类型保护" aria-label="Permalink to &quot;类型保护&quot;">​</a></h2><p>类型保护就是在我们已经识别到当前数据是某种数据类型的情况下，安全的调用这个数据类型对应的属性和方法。常用的类型保护包括 <code>in</code> 类型保护、<code>typeof</code> 类型保护、<code>instanceof</code> 类型保护和 <code>自定义</code> 类型保护。具体见以下示例：</p><ul><li><code>in</code> 类型保护</li></ul><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h2><p><a href="https://mp.weixin.qq.com/s?__biz=Mzg3NTcwMTUzNA==&amp;mid=2247486311&amp;idx=1&amp;sn=e673c558cde252bcd3357074fbf0a365&amp;source=41#wechat_redirect" target="_blank" rel="noreferrer">https://mp.weixin.qq.com/s?__biz=Mzg3NTcwMTUzNA==&amp;mid=2247486311&amp;idx=1&amp;sn=e673c558cde252bcd3357074fbf0a365&amp;source=41#wechat_redirect</a></p>',15)]))}const m=e(r,[["render",p]]);export{k as __pageData,m as default};
