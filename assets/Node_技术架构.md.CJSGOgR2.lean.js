import{_ as e,c as s,a3 as i,o as l}from"./chunks/framework.CAwIQbWu.js";const k=JSON.parse('{"title":"Node.js 技术架构","description":"","frontmatter":{},"headers":[],"relativePath":"Node/技术架构.md","filePath":"Node/技术架构.md","lastUpdated":1722850347000}'),n={name:"Node/技术架构.md"};function p(t,a,o,h,r,d){return l(),s("div",null,a[0]||(a[0]=[i(`<h1 id="node-js-技术架构" tabindex="-1">Node.js 技术架构 <a class="header-anchor" href="#node-js-技术架构" aria-label="Permalink to &quot;Node.js 技术架构&quot;">​</a></h1><h2 id="目录" tabindex="-1">目录 <a class="header-anchor" href="#目录" aria-label="Permalink to &quot;目录&quot;">​</a></h2><ul><li>JS 如何调用 C++</li><li>libuv &amp; v8 功能</li><li>EventLoop 简单介绍</li><li>Node.js 技术架构总结</li><li>Node.js API 与学习方法</li></ul><p>文件模块</p><h3 id="node-js-不是什么" tabindex="-1">Node.js 不是什么 <a class="header-anchor" href="#node-js-不是什么" aria-label="Permalink to &quot;Node.js 不是什么&quot;">​</a></h3><h4 id="不是-web-框架" tabindex="-1">不是 web 框架 <a class="header-anchor" href="#不是-web-框架" aria-label="Permalink to &quot;不是 web 框架&quot;">​</a></h4><p>Node.js 并不是 web 后端框架</p><p>所以你不能把 Node.js与 Flask或 Spring 对比</p><h4 id="不是编程语言语言" tabindex="-1">不是编程语言语言 <a class="header-anchor" href="#不是编程语言语言" aria-label="Permalink to &quot;不是编程语言语言&quot;">​</a></h4><p>Node.is 并不是后端的 JS</p><p>所以你不能把 Node.is与 Python 或 PHP 对比</p><h3 id="node-js-是什么" tabindex="-1">Node.js 是什么 <a class="header-anchor" href="#node-js-是什么" aria-label="Permalink to &quot;Node.js 是什么&quot;">​</a></h3><h4 id="是一个平台" tabindex="-1">是一个平台 <a class="header-anchor" href="#是一个平台" aria-label="Permalink to &quot;是一个平台&quot;">​</a></h4><p>它将多种技术组合起来</p><p>让 JavaScript 也能调用系统接口、开发后端应用</p><h4 id="node-is-用到了哪些技术" tabindex="-1">Node.is 用到了哪些技术 <a class="header-anchor" href="#node-is-用到了哪些技术" aria-label="Permalink to &quot;Node.is 用到了哪些技术&quot;">​</a></h4><p>V8 引擎</p><p>libuv</p><p>C/C++ 实现的 c-ares、OpenSSL、zlibhttp-parser、等库</p><h3 id="node-js-技术架构-1" tabindex="-1">Node.js 技术架构 <a class="header-anchor" href="#node-js-技术架构-1" aria-label="Permalink to &quot;Node.js 技术架构&quot;">​</a></h3><h4 id="node-is-api" tabindex="-1">Node.is API <a class="header-anchor" href="#node-is-api" aria-label="Permalink to &quot;Node.is API&quot;">​</a></h4><p>http 模块、fs 模块、、steam 模块等</p><p>Node.js bindings让 JS 和 C/C++ 通信</p><p>JS 引擎V8</p><p>跨平台的异步I/0能力</p><p>libuv DNS 解析c-ares C/C++ 插件自定义其他能力 加密解密OpensSl 其他... http_parser、zlib等</p><p>可以看的书：<a href="https://github.com/yjhjstz/deep-into-node" target="_blank" rel="noreferrer">https://github.com/yjhjstz/deep-into-node</a></p><p><img src="https://pub-15dc9987604d4311befe731fecc8adb9.r2.dev/1a6f33ca535dc4c4ea9c4aaa4fdba8e1.png" alt="image-20240801081445610"></p><h3 id="libuv-是什么" tabindex="-1">libuv 是什么 <a class="header-anchor" href="#libuv-是什么" aria-label="Permalink to &quot;libuv 是什么&quot;">​</a></h3><h4 id="背景" tabindex="-1">背景 <a class="header-anchor" href="#背景" aria-label="Permalink to &quot;背景&quot;">​</a></h4><p>FreeBSD 系统上有 kqueue</p><p>Linux 系统上有 epoll</p><p>Windows 系统上有IOCP</p><p>Ryan 为了一个<strong>跨平台</strong>的异步 I/O 库，开始写 libuv</p><p>libuv 会根据系统自动选择合适的方案</p><h4 id="功能" tabindex="-1">功能 <a class="header-anchor" href="#功能" aria-label="Permalink to &quot;功能&quot;">​</a></h4><p>可以用于 TCP/UDP/DNS/文件等的异步操作</p><h3 id="v8-是什么" tabindex="-1">V8 是什么 <a class="header-anchor" href="#v8-是什么" aria-label="Permalink to &quot;V8 是什么&quot;">​</a></h3><h4 id="功能-1" tabindex="-1">功能 <a class="header-anchor" href="#功能-1" aria-label="Permalink to &quot;功能&quot;">​</a></h4><p>将JS源代码变成本地代码并执行</p><p>维护调用栈，确保 JS 函数的执行顺序</p><p>内存管理，为所有对象分配内存</p><p>垃圾回收，重复利用无用的内存</p><p>实现 JS 的标准库</p><h4 id="注意" tabindex="-1">注意 <a class="header-anchor" href="#注意" aria-label="Permalink to &quot;注意&quot;">​</a></h4><p>V8 不提供 DOM API V8 执行 JS 是单线程的</p><p>可以开启两个线程分别执行 JS</p><p>V8 本身是包含多个线程的，如垃圾回收为单独线程</p><p>自带 event loop 但 Node.is 基于 libuv 自己做了一个</p><h3 id="event-loop-是什么" tabindex="-1">Event Loop 是什么 <a class="header-anchor" href="#event-loop-是什么" aria-label="Permalink to &quot;Event Loop 是什么&quot;">​</a></h3><h4 id="什么是-event" tabindex="-1">什么是 Event <a class="header-anchor" href="#什么是-event" aria-label="Permalink to &quot;什么是 Event&quot;">​</a></h4><p>计时器到期了</p><p>读取出错了文件可以读取了</p><p>socket 有内容了、关闭了</p><h4 id="什么是-looploop" tabindex="-1">什么是 Looploop <a class="header-anchor" href="#什么是-looploop" aria-label="Permalink to &quot;什么是 Looploop&quot;">​</a></h4><p>就是循环，比如 while(true) 循环</p><p>由于事件是分优先级的，所以处理起来也是分先后的</p><p>所以 Node.is 需要按顺序轮询每种事件</p><p>这种轮询往往都是循环的，1-&gt;2-&gt;3-&gt;1-&gt;2-&gt;3</p><h4 id="event-loop" tabindex="-1">Event Loop <a class="header-anchor" href="#event-loop" aria-label="Permalink to &quot;Event Loop&quot;">​</a></h4><p>操作系统可以触发事件，JS可以处理事件</p><p>Event Loop 就是对事件处理顺序的管理</p><h3 id="event-loop-1" tabindex="-1">Event Loop <a class="header-anchor" href="#event-loop-1" aria-label="Permalink to &quot;Event Loop&quot;">​</a></h3><h4 id="顺序示意图" tabindex="-1">顺序示意图 <a class="header-anchor" href="#顺序示意图" aria-label="Permalink to &quot;顺序示意图&quot;">​</a></h4><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   ┌───────────────────────┐</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">┌─</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│        timers         │</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│  └──────────┬────────────┘</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│  ┌──────────┴────────────┐</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│  │     </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">I</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">O</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> callbacks     │</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│  └──────────┬────────────┘</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│  ┌──────────┴────────────┐</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│  │     idle, prepare     │</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│  └──────────┬────────────┘      ┌───────────────┐</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│  ┌──────────┴────────────┐      │   </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">incoming</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:   │</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│  │         poll          │</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">─────┤  connections, │</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│  └──────────┬────────────┘      │   data, etc.  │</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│  ┌──────────┴────────────┐      └───────────────┘</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│  │        check          │</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│  └──────────┬────────────┘</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│  ┌──────────┴────────────┐</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">└──┤    close callbacks    │</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   └───────────────────────┘</span></span></code></pre></div><h3 id="重点阶段" tabindex="-1">重点阶段 <a class="header-anchor" href="#重点阶段" aria-label="Permalink to &quot;重点阶段&quot;">​</a></h3><p>timers 检查计时器 poll轮询，检查系统事件</p><p>check 检查 setlmmediate 回调</p><p>其他阶段用得较少</p><h4 id="注意-1" tabindex="-1">注意 <a class="header-anchor" href="#注意-1" aria-label="Permalink to &quot;注意&quot;">​</a></h4><p>大部分时间，Node.is 都停在 poll轮询阶段</p><p>大部分事件都在 poll阶段被处理，如文件、网络请求</p><p><a href="https://juejin.cn/post/6844903582538399752" target="_blank" rel="noreferrer">https://juejin.cn/post/6844903582538399752</a></p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><ul><li><p>用 libuv 进行异步 I/O 操作</p></li><li><p>用 event loop 管理事件处理顺序</p></li><li><p>用 C/C++库高效处理 DNS/HTTP...</p></li><li><p>用 bindings 让 JS 能和 C/C++ 沟通</p></li><li><p>用 V8 运行 JS</p></li><li><p>用 Node.is 官方库简化 JS 代码</p><ul><li>http 模块、fs 模块、steam 模块等</li></ul></li><li><p>这就是 Node.js</p></li></ul><h3 id="node-js-工作流程" tabindex="-1">Node.js 工作流程 <a class="header-anchor" href="#node-js-工作流程" aria-label="Permalink to &quot;Node.js 工作流程&quot;">​</a></h3><p>![image-20240801083325442](D:\\Documents\\PicGo Files\\image-20240801083325442.png)</p>`,77)]))}const E=e(n,[["render",p]]);export{k as __pageData,E as default};
