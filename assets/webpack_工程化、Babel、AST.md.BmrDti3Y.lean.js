import{_ as a,c as r,a3 as l,o as t}from"./chunks/framework.CAwIQbWu.js";const m=JSON.parse('{"title":"工程化、Babel、AST","description":"","frontmatter":{},"headers":[],"relativePath":"webpack/工程化、Babel、AST.md","filePath":"webpack/工程化、Babel、AST.md","lastUpdated":1724059762000}'),i={name:"webpack/工程化、Babel、AST.md"};function b(p,e,s,n,o,c){return t(),r("div",null,e[0]||(e[0]=[l('<h1 id="工程化、babel、ast" tabindex="-1">工程化、Babel、AST <a class="header-anchor" href="#工程化、babel、ast" aria-label="Permalink to &quot;工程化、Babel、AST&quot;">​</a></h1><p>模块化一直在发展，然后 Node 兴起，导致前端工程化的出现</p><h2 id="模块化的发展" tabindex="-1">模块化的发展 <a class="header-anchor" href="#模块化的发展" aria-label="Permalink to &quot;模块化的发展&quot;">​</a></h2><p>在<a href="./../ES6/模块化历程.html">模块化的历程</a>中我们详细分析过这个发展过程，主要分为三块</p><ul><li>IIFE</li><li>CommonJS、AMD</li><li>ESM 模块化</li></ul><p>因为前端复杂度变高，工程化是必然阶段，既然有了工程化，打包工具就孕育而生，其中以 webpack 最为著名，其实这些打包器的就是做了以下几点</p><ul><li>你可以写最新的ES6、7、8、9、10、11代码，用最新的语法，到时候帮你转成浏览器能识别的 ES5 语法</li><li>你可以按照写很多很多js、css文件，到时候打包时把它打包成几个文件</li></ul><p>这其中就用到了 babel</p><h2 id="babel" tabindex="-1">Babel <a class="header-anchor" href="#babel" aria-label="Permalink to &quot;Babel&quot;">​</a></h2><p>Babel 是一个 JavaScript 编译器，将 JavaScript 代码解析为 AST（抽象语法树），再遍历 AST 进行修改，把 AST 变成 ES5 语法</p><h3 id="babel-的原理" tabindex="-1">babel 的原理 <a class="header-anchor" href="#babel-的原理" aria-label="Permalink to &quot;babel 的原理&quot;">​</a></h3><ul><li>parse：把代码 code 变成 AST</li><li>traverse：遍历 AST 进行修改</li><li>generate：把 AST 变成代码 code2</li></ul><p>即 code -- (1) --&gt; ast --&gt; (2) --&gt; ast2 --&gt; (3) --&gt; code2</p><h4 id="为什么必须要用-ast" tabindex="-1">为什么必须要用 AST <a class="header-anchor" href="#为什么必须要用-ast" aria-label="Permalink to &quot;为什么必须要用 AST&quot;">​</a></h4><p>因为用变量、正则表达式实现不了，只能通过 AST 这种把代码的每个词转换为树形结构的对象形式能力的工具才能做到。所以才能用到</p><blockquote><p>正则会把 let a = &#39;let&#39; 变成 var a = &#39;var&#39;</p></blockquote><h3 id="babel-的作用" tabindex="-1">babel 的作用 <a class="header-anchor" href="#babel-的作用" aria-label="Permalink to &quot;babel 的作用&quot;">​</a></h3><p>babel 可以把高级代码翻译为 ES5</p><ul><li><p>@babel/parser</p></li><li><p>@babel/traverse</p></li><li><p>@babel/generator</p></li><li><p>@babel/core 包含前三者</p></li><li><p>@babel/preset-env 内置很多规则</p></li></ul><p>babel 能让开发者愉快的使用 ES6 语法，这解决了 webpack 等打包器的第一个问题，第二个问题就是如何将多个文件打包成一个文件，这点就是 webpack 做的事情了</p><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h2><ul><li><a href="https://mp.weixin.qq.com/s/ZVWffh-MWcRNl2rDp0cKiQ" target="_blank" rel="noreferrer">保姆级教学！这次一定学会 babel 插件开发！</a></li><li><a href="https://mp.weixin.qq.com/s/LlQRx5SPmFgnTDO8VunGnw" target="_blank" rel="noreferrer">babel-从入门到上手</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=Mzg4MTYwMzY1Mw==&amp;mid=2247496615&amp;idx=1&amp;sn=d2db051d9565145eeb018dd29b615b7f&amp;source=41#wechat_redirect" target="_blank" rel="noreferrer">Babel 原理</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=Mzg5NDEyMzA2NQ==&amp;mid=2247484890&amp;idx=1&amp;sn=95b86941c0fa210476e6e7ef0326a025&amp;chksm=c025288cf752a19a6b46fbbe13dc49c2ca319aa65fa48cfc359b4a76cffdd0abe66c0bec4c83&amp;mpshare=1&amp;scene=1&amp;srcid=&amp;sharer_sharetime=1584105668190&amp;sharer_shareid=778ad5bf3b27e0078eb105d7277263f6#rd" target="_blank" rel="noreferrer">关于 Babel 你必须知道的基础知识</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzI0NTE5NzYyMw==&amp;mid=2247484012&amp;idx=1&amp;sn=a94d753e0af22a1ae26f5f9f04cfc4e6&amp;chksm=e9537c34de24f5229d5781d4e22d59f467fdd0291aab0f4b3b6012bcefdd77dbdc61e047101f&amp;mpshare=1&amp;scene=1&amp;srcid=&amp;sharer_sharetime=1583070249517&amp;sharer_shareid=778ad5bf3b27e0078eb105d7277263f6#rd" target="_blank" rel="noreferrer">前端工程师的自我修养-关于 Babel 那些事儿</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=Mzg4MTYwMzY1Mw==&amp;mid=2247496263&amp;idx=1&amp;sn=e89481086041aa74ebb1ec912fe04b1b&amp;source=41#wechat_redirect" target="_blank" rel="noreferrer">不容错过的 Babel7 知识</a></li><li><a href="https://zhuanlan.zhihu.com/p/43249121" target="_blank" rel="noreferrer">一口（很长的）气了解 babel</a></li><li><a href="https://mp.weixin.qq.com/s/KhjCPvwfMrinxvLcy-e23w" target="_blank" rel="noreferrer">再看 Babel</a></li><li><a href="https://github.com/willson-wang/Blog/issues/67" target="_blank" rel="noreferrer">深入理解 babel 生态</a></li><li><a href="https://juejin.cn/post/6844903956905197576" target="_blank" rel="noreferrer">深入浅出 Babel 上篇：架构和原理 + 实战</a></li><li><a href="https://mp.weixin.qq.com/s/hfztxp26YyMOSxiKF2i4eg" target="_blank" rel="noreferrer">99% 的前端开发者没弄明白的 babel 知识</a></li><li><a href="https://github.com/pigcan/blog/issues/26" target="_blank" rel="noreferrer">吃一堑长一智系列: 99% 开发者没弄明白的 babel 知识</a></li><li><a href="https://zhuanlan.zhihu.com/p/266697614?utm_source=wechat_session&amp;utm_medium=social&amp;utm_oi=56197411504128" target="_blank" rel="noreferrer">AST 详解与运用</a></li></ul>',22)]))}const d=a(i,[["render",b]]);export{m as __pageData,d as default};
