import{_ as a,c as r,a3 as t,o as l}from"./chunks/framework.CAwIQbWu.js";const u=JSON.parse('{"title":"性能优化从零到一","description":"","frontmatter":{},"headers":[],"relativePath":"Performance/性能优化从零到一.md","filePath":"Performance/性能优化从零到一.md","lastUpdated":1725860526000}'),o={name:"Performance/性能优化从零到一.md"};function p(n,e,i,h,c,s){return l(),r("div",null,e[0]||(e[0]=[t('<h1 id="性能优化从零到一" tabindex="-1">性能优化从零到一 <a class="header-anchor" href="#性能优化从零到一" aria-label="Permalink to &quot;性能优化从零到一&quot;">​</a></h1><p>性能优化需要做的事情很多 我所理解的是从网络层面，构建层面，浏览器渲染层面，服务器层面展开</p><h2 id="页面监控的指标有哪些" tabindex="-1">页面监控的指标有哪些 <a class="header-anchor" href="#页面监控的指标有哪些" aria-label="Permalink to &quot;页面监控的指标有哪些&quot;">​</a></h2><p>FCP（First Contentful Paint)：白屏时间（第一个文本绘制时间）</p><p>Speed Index：首屏时间</p><p>TTI（Time To Interactive）：第一次可交互的时间</p><p>lighthouse score（performance）：Chrome 浏览器审查工具性能评分</p><p>FCP（白屏时间）：是指从用户进入网站（输入 url、刷新、跳转等方法）的时刻开始计算，一直到页面有内容展示出来的时间节点</p><p>这个过程包括 dns 查询、建立 tcp 连接、发送首个 HTTP 请求、返回 html 文档、html 文档 head 解析完毕</p><h3 id="有哪些软件可以监控到" tabindex="-1">有哪些软件可以监控到 <a class="header-anchor" href="#有哪些软件可以监控到" aria-label="Permalink to &quot;有哪些软件可以监控到&quot;">​</a></h3><p>百度、google...</p><h2 id="如何提速" tabindex="-1">如何提速 <a class="header-anchor" href="#如何提速" aria-label="Permalink to &quot;如何提速&quot;">​</a></h2><p>说白了是如何做性能优化，这里不说废话，从四个角度切入</p><h3 id="前端工程化角度思考-以-webpack-为例" tabindex="-1">前端工程化角度思考（以 webpack 为例） <a class="header-anchor" href="#前端工程化角度思考-以-webpack-为例" aria-label="Permalink to &quot;前端工程化角度思考（以 webpack 为例）&quot;">​</a></h3><p>webpack 方面的</p><p>构建时压缩图片、使用 webp 图片、优化 SVG 图标</p><h3 id="框架角度" tabindex="-1">框架角度 <a class="header-anchor" href="#框架角度" aria-label="Permalink to &quot;框架角度&quot;">​</a></h3><p>Vue 我不熟，仅 React 而言，可以从这几个方面来做功夫</p><p>如果是类组件的话，使用 pureComponent、shouldComponentUpdate</p><p>如果是函数式组件的话，可以使用 useMemo、useCallback、memo</p><p>useMemo 和 useCallback 的区别</p><p>memo 应该和 useMemo 结合</p><p>优化 UI 代码体积</p><p>使用 React.lazy 做代码分割</p><p>如果遇到列表，使用 key 做关键字，并可使用虚拟列表</p><p>关于虚拟列表的解决方案，我在这篇文章都写了</p><blockquote><p>具体为懒加载、IntersectionObserver、getBoundingClientRect</p></blockquote><h3 id="http-方面" tabindex="-1">HTTP 方面 <a class="header-anchor" href="#http-方面" aria-label="Permalink to &quot;HTTP 方面&quot;">​</a></h3><p>使用 HTTP 缓存</p><p>升级为 HTTP2</p><p>服务器使用 gzip 压缩</p><p>OSS+CDN 加速</p><h3 id="页面构建方面" tabindex="-1">页面构建方面 <a class="header-anchor" href="#页面构建方面" aria-label="Permalink to &quot;页面构建方面&quot;">​</a></h3><p>CSS 放顶部、JS 放底部</p><p>减少回流和重绘</p><p>回流和重绘</p><p>script defer、async</p><h2 id="实战" tabindex="-1">实战 <a class="header-anchor" href="#实战" aria-label="Permalink to &quot;实战&quot;">​</a></h2><p>react 项目部署后如何工作</p><p>缓存周末工作（搭配 node 服务器实战）</p><p>js、css、html 保证更新，又利用缓存</p><h3 id="纯协商缓存方案" tabindex="-1">纯协商缓存方案 <a class="header-anchor" href="#纯协商缓存方案" aria-label="Permalink to &quot;纯协商缓存方案&quot;">​</a></h3><p>优点：能够保证每次前端打包后丢上服务器资源一定更新</p><p>缺点：只要文件是新放的，即使文件内容没变也不缓存</p><h3 id="强缓存加定时" tabindex="-1">强缓存加定时 <a class="header-anchor" href="#强缓存加定时" aria-label="Permalink to &quot;强缓存加定时&quot;">​</a></h3><p>优点:：一定期限内，根本不用向服务器询问，一定是拿到缓存。速度最快</p><p>缺点：如何不配合hash，无法感知到文件更新</p><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h2><ul><li><a href="https://zhuanlan.zhihu.com/p/85310910" target="_blank" rel="noreferrer">15 条前端必备的性能优化方法，你知道哪些</a></li><li><a href="https://mp.weixin.qq.com/s/CE4uUUEufCUvXx5HZJxJBw" target="_blank" rel="noreferrer">从龟速 11s 到闪电 1s，详解前端性能优化之首屏加载</a></li><li><a href="https://github.com/laoqiren/web-performance" target="_blank" rel="noreferrer">Web 性能的方方面面</a></li><li><a href="https://zhuanlan.zhihu.com/p/400429457?utm_source=wechat_session&amp;utm_medium=social&amp;utm_oi=56197411504128" target="_blank" rel="noreferrer">H5 性能监控</a></li><li><a href="https://mp.weixin.qq.com/s/_PhDlEBUF7YhP0UpXdMX8A" target="_blank" rel="noreferrer">面试官：你知道的前端优化手段</a></li><li><a href="https://zhuanlan.zhihu.com/p/78053275" target="_blank" rel="noreferrer">前端性能优化，从入门到进阶（基础篇）</a></li><li><a href="https://developers.weixin.qq.com/community/develop/article/doc/00062cad124c8867cf380f64156c13" target="_blank" rel="noreferrer">前端加载优化及实践</a></li><li><a href="https://zhuanlan.zhihu.com/p/263467359" target="_blank" rel="noreferrer">当聊起前端性能优化我们要聊什么</a></li><li><a href="https://zhuanlan.zhihu.com/p/48521680" target="_blank" rel="noreferrer">使用 Preload/Prefetch 优化你的应用</a></li><li><a href="https://mp.weixin.qq.com/s/VZ0evkv-2590-DCuBL-Zlw" target="_blank" rel="noreferrer">深入浅出 Performance 工具 &amp; API</a></li><li><a href="https://mp.weixin.qq.com/s/du8IG-pVo2c_z3P4lyBuWw" target="_blank" rel="noreferrer">聊一聊前端性能与体验的优化</a></li><li><a href="https://blog.fundebug.com/2019/04/11/understand-preload-and-prefetch/" target="_blank" rel="noreferrer">Web 性能优化：Preload 与 Prefetch 的使用及在 Chrome 中的优先级</a></li><li><a href="https://github.com/barretlee/performance-column" target="_blank" rel="noreferrer">performance-column</a></li><li><a href="https://www.zhihu.com/question/40505685" target="_blank" rel="noreferrer">常见的前端性能优化手段都有哪些？都有多大收益？</a></li><li><a href="https://github.com/fouber/blog/issues/3" target="_blank" rel="noreferrer">前端工程与性能优化</a></li><li><a href="https://mp.weixin.qq.com/s/J60NkG8A_E-vI3RpKQSTmw" target="_blank" rel="noreferrer">前端性能优化</a></li><li><a href="https://github.com/amfe/article/issues/21#" target="_blank" rel="noreferrer">15 年双 11 手淘前端技术巡演 - H5 性能最佳实践</a></li><li><a href="https://mp.weixin.qq.com/s/aByfm9pnp5IPaz8zJyTuYg" target="_blank" rel="noreferrer">7000 字前端性能优化总结 | 干货建议收藏</a></li></ul>',49)]))}const f=a(o,[["render",p]]);export{u as __pageData,f as default};
