import{_ as s,c as i,a3 as e,o as t}from"./chunks/framework.CAwIQbWu.js";const o=JSON.parse('{"title":"TypeScript 的运行与调试","description":"","frontmatter":{},"headers":[],"relativePath":"JavaScript/TypeScript/TypeScript的运行与调试.md","filePath":"JavaScript/TypeScript/TypeScript的运行与调试.md","lastUpdated":1724059762000}'),p={name:"JavaScript/TypeScript/TypeScript的运行与调试.md"};function l(n,a,r,h,k,d){return t(),i("div",null,a[0]||(a[0]=[e(`<h1 id="typescript-的运行与调试" tabindex="-1">TypeScript 的运行与调试 <a class="header-anchor" href="#typescript-的运行与调试" aria-label="Permalink to &quot;TypeScript 的运行与调试&quot;">​</a></h1><p>首先心中要有这个公式：TypeScript = ES6 + Type</p><p>所以如果要让 TypeScript 代码在浏览器上运行，就需要擦除它的类型，让其成为 JavaScript。这就要聊到 TypeScript 与 ES6、ES5的关系</p><ul><li>TypeScript 经过类型擦除转变成 ES6，它能在 Node.js 12+、Chrome 100 上运行</li><li>ES6 经过转译成 ES5，能在 Node.js 10-、ES11-上运行</li><li>ES5 在打包成单文件，浏览器访问速度加快</li></ul><p>其中类型擦除工具的工具有：esbuild、swc、typescript、babel</p><p>转译（ES6-ES5）工具：babel</p><p>打包压缩编译工具：esbuild、vite、webpack、rollup 等</p><blockquote><p>ES6 兼容表：<a href="https://kangax.github.io/compat-table/es6/" target="_blank" rel="noreferrer">es6 compatibility table</a></p></blockquote><h2 id="类型擦除" tabindex="-1">类型擦除 <a class="header-anchor" href="#类型擦除" aria-label="Permalink to &quot;类型擦除&quot;">​</a></h2><p>以上我们聊到了类型擦除，其中以下四种最为知名</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -g</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> esbuild</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -g</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @swc/cli</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @swc/core</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -g</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> typescript</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @babel/core</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @babel/cli</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @babel/preset-typescript</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 不用全局安装</span></span></code></pre></div><p>esbuild、swc 快（不检查 TS 语法）</p><p>typescript、babel 慢、老牌（检查语法）</p><p>性能速度对比：<a href="https://esbuild.github.io/" target="_blank" rel="noreferrer">https://esbuild.github.io/</a></p><h2 id="如何运行-typescript" tabindex="-1">如何运行 Typescript <a class="header-anchor" href="#如何运行-typescript" aria-label="Permalink to &quot;如何运行 Typescript&quot;">​</a></h2><h3 id="官方演练场" tabindex="-1">官方演练场 <a class="header-anchor" href="#官方演练场" aria-label="Permalink to &quot;官方演练场&quot;">​</a></h3><p><a href="https://www.typescriptlang.org/play" target="_blank" rel="noreferrer">typescript playground</a></p><h3 id="在线编辑器" tabindex="-1">在线编辑器 <a class="header-anchor" href="#在线编辑器" aria-label="Permalink to &quot;在线编辑器&quot;">​</a></h3><p><a href="https://playcode.io" target="_blank" rel="noreferrer">playcode.io</a>：最快的前端在线编辑器，虽然快，但是收费</p><p><a href="https://stackblitz.com/" target="_blank" rel="noreferrer">stackblitz.com</a></p><p><a href="https://codesandbox.io/" target="_blank" rel="noreferrer">codesandbox.io</a></p><h3 id="本地编辑-浏览器" tabindex="-1">本地编辑 + 浏览器 <a class="header-anchor" href="#本地编辑-浏览器" aria-label="Permalink to &quot;本地编辑 + 浏览器&quot;">​</a></h3><p>一般我们开发前端项目，如果是 TS 项目，推荐使用 <a href="https://vitejs.dev/" target="_blank" rel="noreferrer">vite</a>，而不是 webpack，原因很简单， vite 快，起手式也用 vite，而不是 create-react-app，原因也很简单，create-react-app 不怎么更新了，没钱让它继续维持</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># npm 6.x</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> vite@latest</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my-vue-app</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --template</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> vanilla-ts</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># npm 7+, extra double-dash is needed:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> vite@latest</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my-vue-app</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --template</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> vanilla-ts</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># yarn</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yarn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> vite</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my-vue-app</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --template</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> vanilla-ts</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># pnpm</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> vite</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my-vue-app</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --template</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> vanilla-ts</span></span></code></pre></div><blockquote><p>PS：vanilla 的意思是香草</p></blockquote><h3 id="本地编辑-node" tabindex="-1">本地编辑 + Node <a class="header-anchor" href="#本地编辑-node" aria-label="Permalink to &quot;本地编辑 + Node&quot;">​</a></h3><p>如果要在服务端（Node）中使用 Node，有以下四种选择</p><ul><li><p><a href="https://typestrong.org/ts-node/" target="_blank" rel="noreferrer">ts-node</a>：老牌，最有名</p></li><li><p><a href="https://github.com/swc-project/swc-node" target="_blank" rel="noreferrer">swc-node</a>：性能好</p></li><li><p><a href="https://github.com/esbuild-kit/esm-loader" target="_blank" rel="noreferrer">@esbuild-kit/esm-loader</a></p></li><li><p><a href="https://github.com/esbuild-kit/esno" target="_blank" rel="noreferrer">esno</a></p></li></ul><h2 id="如何调试-typescript" tabindex="-1">如何调试 Typescript <a class="header-anchor" href="#如何调试-typescript" aria-label="Permalink to &quot;如何调试 Typescript&quot;">​</a></h2><p>鼠标放上去，如果报错，会提示</p>`,30)]))}const F=s(p,[["render",l]]);export{o as __pageData,F as default};
