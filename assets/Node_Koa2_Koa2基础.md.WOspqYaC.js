import{_ as a,c as i,a3 as t,o as p}from"./chunks/framework.CAwIQbWu.js";const E=JSON.parse('{"title":"Koa2 基础","description":"","frontmatter":{},"headers":[],"relativePath":"Node/Koa2/Koa2基础.md","filePath":"Node/Koa2/Koa2基础.md","lastUpdated":1677122299000}'),e={name:"Node/Koa2/Koa2基础.md"};function n(h,s,l,k,r,o){return p(),i("div",null,s[0]||(s[0]=[t(`<h1 id="koa2-基础" tabindex="-1">Koa2 基础 <a class="header-anchor" href="#koa2-基础" aria-label="Permalink to &quot;Koa2 基础&quot;">​</a></h1><h2 id="知识储备" tabindex="-1">知识储备 <a class="header-anchor" href="#知识储备" aria-label="Permalink to &quot;知识储备&quot;">​</a></h2><p>Node 基本常识</p><h2 id="什么是-koa2" tabindex="-1">什么是 Koa2 <a class="header-anchor" href="#什么是-koa2" aria-label="Permalink to &quot;什么是 Koa2&quot;">​</a></h2><p>由 Express 原班人马打造的新生代 Node.js Web 框架，它的代码很简单，没有像 Express 那样，提供路由、静态服务等等，它是为了解决 Node 问题（简化了 Node 中操作）并取代之，它本身是一个简单的中间件框架，需要配合各个中间件才能使用</p><p><a href="https://koajs.com/" target="_blank" rel="noreferrer">文档</a></p><p><a href="https://koa.bootcss.com/" target="_blank" rel="noreferrer">中文文档</a> (野生)</p><p>Koa2 是什么？</p><ul><li>用 NodeJS 写的 Web 框架</li><li>Koa 可被视为 nodejs 的 HTTP 模块的抽象</li></ul><p>Koa 可被视为 nodejs 的 HTTP 模块的抽象</p><p>用法很简单：</p><p>Koa2 启动服务</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Koa</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;koa&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> app</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Koa</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ctx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ctx.body </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Hello World&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">listen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;3000端口已启动&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><p>其中，Koa2 封装了 request 和 response，将它们放在一起，成了 ctx。</p><p>再 Koa2 中，ctx 是个很关键的值，</p><p>ctx.body ：返回值</p><p>ctx.status：返回的 code</p><p>ctx.request：请求体</p><p>ctx.response：返回体</p><p>app 实例、context、request、request 官方 API 文档</p><p><a href="https://github.com/demopark/koa-docs-Zh-CN/blob/master/api/index.md" target="_blank" rel="noreferrer">https://github.com/demopark/koa-docs-Zh-CN/blob/master/api/index.md</a></p><p><a href="https://github.com/demopark/koa-docs-Zh-CN/blob/master/api/context.md" target="_blank" rel="noreferrer">https://github.com/demopark/koa-docs-Zh-CN/blob/master/api/context.md</a></p>`,22)]))}const c=a(e,[["render",n]]);export{E as __pageData,c as default};
