import{_ as i,c as a,a3 as p,o as e}from"./chunks/framework.CAwIQbWu.js";const o=JSON.parse('{"title":"手写 webpack","description":"","frontmatter":{},"headers":[],"relativePath":"webpack/手写webpack.md","filePath":"webpack/手写webpack.md","lastUpdated":1724059762000}'),h={name:"webpack/手写webpack.md"};function t(n,s,k,l,r,E){return e(),a("div",null,s[0]||(s[0]=[p(`<h1 id="手写-webpack" tabindex="-1">手写 webpack <a class="header-anchor" href="#手写-webpack" aria-label="Permalink to &quot;手写 webpack&quot;">​</a></h1><p>webpack 做了两个问题</p><ul><li>把 import、export 转译为普通代码</li><li>把所有文件打包成一个文件</li></ul><h2 id="怎么把-import-export-转移成函数" tabindex="-1">怎么把 import/ export 转移成函数 <a class="header-anchor" href="#怎么把-import-export-转移成函数" aria-label="Permalink to &quot;怎么把 import/ export 转移成函数&quot;">​</a></h2><p>@babel/core 已经帮我们做了</p><p>import 关键字会变成 require 函数</p><p>export 关键字会变成 exports 对象</p><p>本质：ESModule 语法变成了 CommonJs 规则</p><p>但目前我们不知道 require 函数怎么写，先不管，假设 require 已经写好了</p><h2 id="把多个文件打包成一个" tabindex="-1">把多个文件打包成一个 <a class="header-anchor" href="#把多个文件打包成一个" aria-label="Permalink to &quot;把多个文件打包成一个&quot;">​</a></h2><p>打包成一个什么样的文件</p><p>肯定包含了所有模块，然后能执行所有模块</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> depRelation </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {key: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;index.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, deps:[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;a.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;b.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], code: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">... },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;a.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">deps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;b.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">code</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">...},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 	{</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;b.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">deps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;a.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">code</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">... }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">execute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(depRelation[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].key) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 执行入口文件</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> execute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> item </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> depRelation.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">find</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i.key </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> key)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    item.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">code</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="待解决" tabindex="-1">待解决 <a class="header-anchor" href="#待解决" aria-label="Permalink to &quot;待解决&quot;">​</a></h3><p>1.depRelation 是对象，需要变成一个数组</p><p>2.code 是字符串，需要变成一个函数</p><p>3.execute 函数待完善</p><h3 id="如何创建最终文件" tabindex="-1">如何创建最终文件 <a class="header-anchor" href="#如何创建最终文件" aria-label="Permalink to &quot;如何创建最终文件&quot;">​</a></h3><p>打包</p><p>把 ES6 代码转译为 ES5 版本</p><p>所有代码合并到一个文件中</p><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h2><ul><li><a href="https://juejin.cn/post/6844903858179670030" target="_blank" rel="noreferrer">实现一个简单的 Webpack</a></li><li><a href="https://mp.weixin.qq.com/s/vpQq3FcJuQkKXvxsq8c9Bw" target="_blank" rel="noreferrer">90 行代码的 webpack，你确定不学吗？</a></li><li><a href="https://mp.weixin.qq.com/s/-8rsHyu2nys_37nVlWiyCg" target="_blank" rel="noreferrer">微医前端带你从头建立构建体系【开篇】</a></li></ul>`,23)]))}const c=i(h,[["render",t]]);export{o as __pageData,c as default};
