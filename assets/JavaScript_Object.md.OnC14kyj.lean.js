import{_ as a,c as s,a3 as e,o as t}from"./chunks/framework.CAwIQbWu.js";const d=JSON.parse('{"title":"Object（对象）","description":"","frontmatter":{},"headers":[],"relativePath":"JavaScript/Object.md","filePath":"JavaScript/Object.md","lastUpdated":1691976759000}'),l={name:"JavaScript/Object.md"};function p(h,i,n,r,o,c){return t(),s("div",null,i[0]||(i[0]=[e(`<h1 id="object-对象" tabindex="-1">Object（对象） <a class="header-anchor" href="#object-对象" aria-label="Permalink to &quot;Object（对象）&quot;">​</a></h1><p>先回顾下之前一节所讲知识</p><ul><li>引用类型指的是 object</li><li>object 包括内置对象、宿主对象、自定义对象</li><li>内置对象中有 Object、Function、Array、String、Number、Boolean 等原生对象构造函数</li><li>在 JavaScript 中，一切皆对象（除 undefined、null 外）</li></ul><p>无论是内置对象，还是自定义对象，都是基于 Object 来创建，其中的原理是原型继承，所以笔者喜欢称 Object.prototype 为“始祖巨人”，一切力量源于尤弥尔</p><p>我们看看 Object 是什么，它能做什么，并将其扩展，连接 Object 相关的各个知识点。知识列表如下：</p><ul><li>属性与方法</li></ul><ul><li>如何创建对象</li></ul><ul><li>如何拷贝对象</li></ul><ul><li>对象继承的秘密——原型</li></ul><ul><li>继承的九种方法</li></ul><h2 id="属性与方法" tabindex="-1">属性与方法 <a class="header-anchor" href="#属性与方法" aria-label="Permalink to &quot;属性与方法&quot;">​</a></h2><blockquote><p>JavaScript 对象可以从一个称为原型的对象里继承属性。对象的方法通常是继承的属性。这种”原型式继承“（prototypal inheritance）是 JavaScript 的核心特征</p></blockquote><p>可以看下这个例子</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> johan </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;johan&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dir</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(johan);</span></span></code></pre></div><p><img src="https://s2.loli.net/2022/07/16/imQTkLKrvhHlgUB.png" alt="Object的属性与方法"></p><p>能看出，我们使用对象字面量的方法创建了一个对象实例 johan，并赋予了一个属性 name，值为 johan，当打印日志时，发现多了一个对象<code>[[Prototype]]</code>，并且这个对象中有很多对象</p><p>这是因为「对象字面量」创建的实例，在底层已经做了「隐式继承」的操作，它和 <code>new Object(&#39;johan&#39;)</code> 是一个意思，除此之外，如果使用 new ，会进行原型继承，<code>[[prototype]]</code> 正是继承 Object 的原型（即 Object.prototype）</p><p>这里，不妨多说一句，实例是继承 Object.prototype，而不是 Object，原型才会被继承，构造函数是个空壳，不信，你打印 Object 和 Object.prototype，看看内容</p><p><code>console.dir(Object)</code>如下图所示：</p><p><img src="https://s2.loli.net/2022/07/16/IoMXpZcviF2J5We.png" alt="console.dir(Object)"></p><p><code>console.dir(Object.prototype)</code>如下图所示</p><p><img src="https://s2.loli.net/2022/07/16/HPsW8NSKZmBEQVx.png" alt="console.dir(Object.prototype)"></p><p>johan 的 <code>[[prototype]]</code> 和 Object 的 prototype 的内容一致</p><p>关于原型和继承的内容后文会详细说明，这里埋个伏笔</p><p>看以上例子，你能发现 Object 的属性和方法不少，而且它的实例也有属性和方法，这里对其进行说明注解</p><h3 id="静态方法" tabindex="-1">静态方法 <a class="header-anchor" href="#静态方法" aria-label="Permalink to &quot;静态方法&quot;">​</a></h3><ul><li><code>Object.assign()</code>：通过复制一个或多个对象来创建一个新的对象</li><li><code>Object.create()</code>：使用指定的原型对象和属性创建一个新对象</li><li><code>Object.defineProperty()</code>：给对象添加一个属性并指定该属性的配置</li><li><code>Object.defineProperties()</code>：给对象添加多个属性并分别指定它们的配置</li><li><code>Object.entries()</code>：返回给定对象自身可枚举属性的 <code>[key, value]</code> 数组</li><li><code>Object.keys()</code>：返回一个包含所有给定对象自身可枚举属性名称的数组</li><li><code>Object.values()</code>：返回给定对象自身可枚举值的数组</li></ul><h3 id="实例属性" tabindex="-1">实例属性 <a class="header-anchor" href="#实例属性" aria-label="Permalink to &quot;实例属性&quot;">​</a></h3><ul><li><code>Object.prototype.constructor</code>：一个引用值，指向 Object 构造函数</li><li><code>Object.prototype.__proto__</code>：指向一个对象，当一个 object 实例化时，使用该对象作为实例化对象的原型</li></ul><h3 id="实例方法" tabindex="-1">实例方法 <a class="header-anchor" href="#实例方法" aria-label="Permalink to &quot;实例方法&quot;">​</a></h3><ul><li><code>Object.prototype.hasOwnProperty()</code>：返回一个布尔值，用于表示一个对象自身是否包含指定的属性，该方法并不会查找原型链上继承来的属性 <ul><li>用 <code>hasOwnProperty</code> 就能检测出，它能区别自身属性与继承属性</li></ul></li><li><code>Object.prototype.isPrototypeOf()</code>：返回一个布尔值，用于表示该方法所调用的对象是否在指定对象的原型链中</li><li><code>Object.prototype.toString()</code>：返回一个代表该对象的字符串。</li><li><code>Object.prototype.valueOf()</code>：返回指定对象的原始值</li></ul><p>更多信息可以查看 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">MDN</a></p><p>了解 Object 的属性、方法，以及基于它创建的实例属性和方法后，我们去看看如何创建对象</p><h2 id="创建对象" tabindex="-1">创建对象 <a class="header-anchor" href="#创建对象" aria-label="Permalink to &quot;创建对象&quot;">​</a></h2><p>有三种方法。对象直接量、关键字 new、 Object.create 函数来创建对象</p><h3 id="对象直接量" tabindex="-1">对象直接量 <a class="header-anchor" href="#对象直接量" aria-label="Permalink to &quot;对象直接量&quot;">​</a></h3><p>创建一个新对象的最简单的方法，就是用对象直接量，就如使用以下语句：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {};</span></span></code></pre></div><p><code>{}</code> 表示的 <code>new Object()</code></p><h3 id="关键字-new" tabindex="-1">关键字 new <a class="header-anchor" href="#关键字-new" aria-label="Permalink to &quot;关键字 new&quot;">​</a></h3><p>使用 new 创建新对象，一般要跟随一个函数调用。这里的函数称为构造函数（constructor），构造函数用以初始化一个新创建的对象。例如：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 效果如同 var obj = {}</span></span></code></pre></div><p>更多内容，可查看这篇 <a href="./new做了什么.html">new 做了什么</a></p><h3 id="object-create" tabindex="-1">Object.create <a class="header-anchor" href="#object-create" aria-label="Permalink to &quot;Object.create&quot;">​</a></h3><p>此方法是 ECMAScript 5 定义了，它牵扯到原型、继承等方面的知识。简单来说，它创造了一个新对象，其中第一个参数就是这个对象的原型。而第二个可选参数，是对其属性的更多描述。例如：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;johan&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, age: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">23</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// obj 继承了属性name 和 age</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// obj2 不继承任何属性和方法</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 与 {} 和 new Object() 一个意思</span></span></code></pre></div><p>更多内容，可查看这篇 <a href="./Object.create.html">Object.create</a></p><p>之所以将 new 和 Object.create 单独拿出来说，是因为两则都是比较重要的知识点，非一两句就能说明白</p><p>了解 Object 是如何创造的之后，我们看看如何赋值</p><h2 id="如何拷贝对象" tabindex="-1">如何拷贝对象 <a class="header-anchor" href="#如何拷贝对象" aria-label="Permalink to &quot;如何拷贝对象&quot;">​</a></h2><p>赋值是简单的，但赋值后的再赋值，就会引起源对象被修改</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> o1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;johan&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> };</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> o2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> o1;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">o2.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;elaine&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(o1); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// {name: &#39;elaine&#39;}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(o2); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// {name: &#39;elaine&#39;}</span></span></code></pre></div><p>之前文章也说过，因为 Object 是引用类型，引用类型的拷贝拷贝的是引用地址，所以当 o2 被修改时，o1 也随之被修改</p><p>针对如何拷贝对象，这篇文章 <a href="./拷贝的秘密.html">拷贝的秘密</a> 会对其进行说明</p><h2 id="对象继承的秘密——原型" tabindex="-1">对象继承的秘密——原型 <a class="header-anchor" href="#对象继承的秘密——原型" aria-label="Permalink to &quot;对象继承的秘密——原型&quot;">​</a></h2><p>要想解释 JavaScript 中为什么大多数元素都是对象，就必须先知道原型。JavaScript 是一门基于原型的语言——每个对象拥有一个原型对象，对象以其原型为模板、从原型继承方法和属性。原型对象也可能拥有原型，并从中继承方法和属性，一层一层，以此类推。这种关系常被称为原型链</p><p>有关原型和原型链的知识，会归纳总结为一篇——<a href="./原型.html">原型</a></p><h2 id="继承的九种方法" tabindex="-1">继承的九种方法 <a class="header-anchor" href="#继承的九种方法" aria-label="Permalink to &quot;继承的九种方法&quot;">​</a></h2><p>原型是实现继承的方法之一，当然 JavaScript 还有其他的方法，总共九种</p><ul><li><p>原型链继承</p></li><li><p>盗用构造函数</p></li><li><p>组合继承（原型链+盗用构造函数）</p></li><li><p>原型式继承</p><ul><li>Object.create</li><li>Object.setPrototypeOf</li></ul></li><li><p>寄生式继承</p></li><li><p>寄生式组合继承</p><ul><li>Object.create + 盗用构造函数</li><li>Object.setPrototypeOf + 盗用构造函数</li></ul></li><li><p>类继承</p></li></ul><p>具体的文章会在 <a href="./继承.html">继承 </a>说明</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>这一节，我们就 Object 进行展开，详细说明了 Object 及其实例的属性与方法。并对如何创建对象、如何拷贝对象、原型、继承等进行说明分析，因篇幅以及知识点聚焦问题，本节不做过多说明，下一节，我们从如何创建对象之 <a href="./new做了什么.html">new</a> 说起</p>`,63)]))}const E=a(l,[["render",p]]);export{d as __pageData,E as default};
