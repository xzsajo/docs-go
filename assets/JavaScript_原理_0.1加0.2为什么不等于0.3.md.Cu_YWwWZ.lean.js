import{_ as i,c as a,a3 as t,o as p}from"./chunks/framework.CAwIQbWu.js";const o=JSON.parse('{"title":"0.1+0.2 为什么不等于 0.3","description":"","frontmatter":{},"headers":[],"relativePath":"JavaScript/原理/0.1加0.2为什么不等于0.3.md","filePath":"JavaScript/原理/0.1加0.2为什么不等于0.3.md","lastUpdated":1726016559000}'),h={name:"JavaScript/原理/0.1加0.2为什么不等于0.3.md"};function l(n,s,e,k,r,d){return p(),a("div",null,s[0]||(s[0]=[t(`<h1 id="_0-1-0-2-为什么不等于-0-3" tabindex="-1">0.1+0.2 为什么不等于 0.3 <a class="header-anchor" href="#_0-1-0-2-为什么不等于-0-3" aria-label="Permalink to &quot;0.1+0.2 为什么不等于 0.3&quot;">​</a></h1><h2 id="先说结论" tabindex="-1">先说结论 <a class="header-anchor" href="#先说结论" aria-label="Permalink to &quot;先说结论&quot;">​</a></h2><p>为什么不等于？</p><p>因为 JavaScript 存在精度丢失问题</p><p>JavaScript 存储数值是以双精度浮点数来存储，采用的标准是 IEEE 754</p><p>用双精度浮点数表示小数可能得到一个无限循环的数，无限循环二进制转换为十进制会出现误差</p><p>0.1+0.2 就是这样误差的产物</p><p>更详细的说法是：浮点数先转换为二进制，二进制相加后的结果二进制是无限循环，再转化为十进制后，JS 引擎会对其进行截断，所以造成精度丢失，结果就成了 0.30000000000000004</p><h2 id="为什么会有精准度损失" tabindex="-1">为什么会有精准度损失 <a class="header-anchor" href="#为什么会有精准度损失" aria-label="Permalink to &quot;为什么会有精准度损失&quot;">​</a></h2><p>因为计算机硬件存储数据时，是以二进制（10101010）形式进行</p><p>比如说每个字节是 8 位，int 类型占 4 个字节，也就是 32 位精度；那么 32 位的计算机精度可以存 2 的 32次方个数据。如下图：</p><p><img src="https://s2.loli.net/2022/01/05/ImJCa2rFz6jN5vg.png" alt="例子"></p><p>每位上面可以放两个二进制数据也就是 0 或者 1；一般最高位上是符号位（1表示负数，0表示正数），所以带符号的类型数据应该是 31 个 2</p><p>2 * 2 * 2 * ... * 2（31个2），加上符号范围就是 -2147483648 ~ 2147483647；当然也有无符号整形，暂不讨论</p><p>那么小数怎么存呢？小数在计算机当中叫浮点型，JS 最终会由浏览器引擎转成 C++，但是 JS 当中只有一种数值类型，那就是 number，那么 number 在 C++ 是什么类型呢；</p><p>我们暂且认为它是双精度类型，也就是 double，C++ 中占四个字节，也就是 64 位存储，整数存储参考上面即可，重点说说浮点存储</p><p>同样 64 位可分为三部分，它的制定格式是以 IEEE 754 为标准：</p><p>第一部分：符号位（S），占 1 位即第 63 位；</p><p>第二部分：指数域（E），占 11 位即 52 位到 62 位，含 52 和 62；</p><p>第三部分：尾数域（F），占 52 位即第 0 位到 51 位，含 51；</p><p><img src="https://i.loli.net/2021/07/28/bFDXJ3NcyMk6lgm.png" alt="64-bit"></p><p>如果将一个小数转换成二进制 64 位怎么表示，以 12.52571 为例</p><ul><li>先转换成二进制（十进制转换成二进制）（<a href="https://tool.oschina.net/hexconvert/" target="_blank" rel="noreferrer">站长工具二进制转换</a>） <ul><li>12.52571 =&gt; 1100.100001101001010011101110001110010010111000011111</li></ul></li><li>将其小数点向左偏移三位 <ul><li>1.100100001101001010011101110001110010010111000011111 * 2^3</li></ul></li></ul><h4 id="得出结论" tabindex="-1">得出结论 <a class="header-anchor" href="#得出结论" aria-label="Permalink to &quot;得出结论&quot;">​</a></h4><ol><li>因为是整数，所以符号位 S 是 0；</li><li>因为向左偏移了三位，所以 E = 1023 + 3 = 1026（转化为二进制） =&gt; 10000000010，有 11 位，不够前面补 0 <ul><li>为什么要加1023？为什么左移是加3，不是减3</li></ul></li><li>尾数是（F）（小数点后面）100100001101001010011101110001110010010111000011111；</li></ol><p>最终表示： 0 10000000010 100100001101001010011101110001110010010111000011111；</p><p>上面总长度是63位，差一位，最后面补零，即</p><p><strong>0 10000000010 1001000011010010100111011100011100100101110000111110；</strong></p><p>那么12.52571的64位计算机存储形式就是上面了；</p><h2 id="回过头看-0-1-0-2" tabindex="-1">回过头看 0.1 + 0.2 <a class="header-anchor" href="#回过头看-0-1-0-2" aria-label="Permalink to &quot;回过头看 0.1 + 0.2&quot;">​</a></h2><p>上面的表达可能有些疑惑，肯定的，毕竟笔者也是参考的（权当笔记，供以后温习），暂且不表；那么 0.1 和 0.2 是怎么转的</p><p>这里就有一个问题，0.1 和 0.2 转成二进制小数点后面是循环的</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 0.1 转化为二进制</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0011</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0011</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0011</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0011</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(0011无限循环）</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 0.2 转化为二进制</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0011</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0011</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0011</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0011</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0011</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(0011无限循环）</span></span></code></pre></div><p>由于尾数只有52位（52位之后的被计算机截掉了）</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">E</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">F</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1001100110011001100110011001100110011001100110011010</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (52位)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">E</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">F</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.1001100110011001100110011001100110011001100110011010</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (52位)</span></span></code></pre></div><p>要让两个数相加，首先E需要相同，于是得出下面</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">E</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">F</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.1100110011001100110011001100110011001100110011001101</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (52位) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//多余位截掉</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">E</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">F</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.1001100110011001100110011001100110011001100110011010</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (52位)</span></span></code></pre></div><p>上面两个相加得出</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">E</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">F</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10.0110011001100110011001100110011001100110011001100111</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-------------------------------------------------------------------</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">E</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">F</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1.00110011001100110011001100110011001100110011001100111</span></span></code></pre></div><p>得出的结论就是</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">^-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1.00110011001100110011001100110011001100110011001100111</span></span></code></pre></div><p>这个值转换成真值，结果为： 0.30000000000000004</p><h2 id="如何做到精准度" tabindex="-1">如何做到精准度 <a class="header-anchor" href="#如何做到精准度" aria-label="Permalink to &quot;如何做到精准度&quot;">​</a></h2><p>使用 ES8 中的 bigint</p><p>还可以使用 ES6 的 <code>Number.EPSILON</code> 进行误差判断</p><p>可以将小数* 10n 转换为整数，整数不存在精度丢失问题</p><p>也有很多库可以解决，如 big.js、bigInt</p><h2 id="同样有精准度缺失的语言" tabindex="-1">同样有精准度缺失的语言 <a class="header-anchor" href="#同样有精准度缺失的语言" aria-label="Permalink to &quot;同样有精准度缺失的语言&quot;">​</a></h2><p>python</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>因为 JavaScript 到最后会转换为 C++ 去执行</p><p>在 IEEE754 标准中常见的浮点数数值表示有：单精准度（32位）和双精准度（64位），JS 采用的是后者。浮点数与整数不同，一个浮点数既包含整数部分，又包含小数部分，因为其表示法的不同，需要分析为整数和小数部分，然后相加得到结果。0.1 和 0.2 先转成二进制，在转换为同一维度计算，得到二进制后，再转换为十进制后，就成了<code>0.30000000000000004</code></p><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h2><ul><li><a href="https://blog.azhubaby.com/2022/01/09/2022-01-09-0.1+0.2!=0.3/" target="_blank" rel="noreferrer">0.1+0.2!==0.3，为什么？</a></li><li><a href="https://github.com/su37josephxia/frontend-interview/issues/2" target="_blank" rel="noreferrer">0.1 + 0.2 === 0.3 嘛？为什么？怎么解决</a></li></ul>`,54)]))}const c=i(h,[["render",l]]);export{o as __pageData,c as default};
