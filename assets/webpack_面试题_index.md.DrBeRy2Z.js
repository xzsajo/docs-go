import{_ as l,c as a,a3 as i,o}from"./chunks/framework.CAwIQbWu.js";const b=JSON.parse('{"title":"常见面试题","description":"","frontmatter":{},"headers":[],"relativePath":"webpack/面试题/index.md","filePath":"webpack/面试题/index.md","lastUpdated":1725497270000}'),p={name:"webpack/面试题/index.md"};function r(c,e,d,t,s,u){return o(),a("div",null,e[0]||(e[0]=[i('<h1 id="常见面试题" tabindex="-1">常见面试题 <a class="header-anchor" href="#常见面试题" aria-label="Permalink to &quot;常见面试题&quot;">​</a></h1><h2 id="q-webpack-的-loader-是什么" tabindex="-1">Q：webpack 的 Loader 是什么？ <a class="header-anchor" href="#q-webpack-的-loader-是什么" aria-label="Permalink to &quot;Q：webpack 的 Loader 是什么？&quot;">​</a></h2><p>A：webpack 自带的打包器只支持 JS 文件，当我们想加载 css/less/scss/ts/md 文件时，就需要用 loader</p><p>loader 的原理就是把 文件内容包装成能运行的 JS</p><p>比如加载 css 需要用到 style-loader 和 css-loader</p><p>css-loader 把代码从 CSS 代码变成 export default str 形式的 JS 代码</p><p>style-loader 把代码挂载到 head 里 的 style 标签里</p><h2 id="q-有哪些常见的-loader" tabindex="-1">Q：有哪些常见的 loader？ <a class="header-anchor" href="#q-有哪些常见的-loader" aria-label="Permalink to &quot;Q：有哪些常见的 loader？&quot;">​</a></h2><p>A：</p><ul><li><p><code>raw-loader</code>: 加载文件原始内容</p></li><li><p><code>file-loader</code>: 把文件输出到一个文件夹中，在代码中通过相对 URL 去引用输出的文件（处理图片和字体）</p></li><li><p><code>url-loader</code>: 与 file-loader 类似，区别是用户可以设置一个阈值，大于阈值时返回其 publicPath，小于阈值时返回文件 base64 形式编码（处理图片和字体）</p></li><li><p><code>source-map-loader</code>：加载额外的 source map 文件，以方便断点调试</p></li><li><p><code>svg-inline-loader</code>：将压缩后的 svg 内容注入代码中</p></li><li><p><code>image-loader</code>：加载并且压缩图片文件</p></li><li><p><code>json-loader</code>：加载 json 文件</p></li><li><p><code>babel-loader</code>：将 es6 转换成 es5</p></li><li><p><code>markdown-loader</code>：把 markdown 变成 html</p></li><li><p><code>ts-loader</code>：将 typescript 转换成 javascript，并提示类型错误</p></li><li><p><code>sass-loader</code>：将 sass 代码转换为 css 代码</p></li><li><p><code>css-loader</code>：把 CSS 变成 JS 字符串</p></li><li><p><code>style-loader</code>： 把 JS 字符串变成 style 标签</p></li><li><p><code>postcss-loader</code>：扩展 css 语法，使用下一代 css，可以配合 autoprefixer 插件自动补齐 css3 前缀</p></li><li><p><code>eslint-loader</code>：通过 eslint 检查 javascript 代码</p></li><li><p><code>tslint-loader</code>：通过 tslint 检查 typescript 代码</p></li><li><p><code>thread-loader</code>：用于多进程打包</p></li></ul><h2 id="q-有哪些常见的-plugin" tabindex="-1">Q：有哪些常见的 plugin？ <a class="header-anchor" href="#q-有哪些常见的-plugin" aria-label="Permalink to &quot;Q：有哪些常见的 plugin？&quot;">​</a></h2><p>A：</p><ul><li><code>html-webpack-plugin</code>：用于创建 HTML 页面并自动引入JS 和 CSS</li><li><code>clean-webpack-plugin</code>：用于清理之前打包的残余文件</li><li><code>mini-css-extract-plugin</code>：用于将 JS 中的 CSS 抽离成单独的 CSS 文件</li><li><code>SplitChunksPlugin</code>：用于代码分包(Code Split)</li><li><code>DllPlugin</code> + <code>DllReferencePlugin</code>：用于避免大依赖被频繁重新打包，大幅降低打包时间</li><li><code>eslint-webpack-plugin</code> ：用于检查代码中的错误</li><li><code>DefinePlugin</code>：用于在 webpack config 里添加全局变量</li><li><code>copy-webpack-plugin</code>：用于拷贝静态文件到 dist</li></ul><h2 id="q-loader-和-plugin-的区别是什么" tabindex="-1">Q: loader 和 plugin 的区别是什么 <a class="header-anchor" href="#q-loader-和-plugin-的区别是什么" aria-label="Permalink to &quot;Q: loader 和 plugin 的区别是什么&quot;">​</a></h2><p>Q：</p><ul><li>loader是文件加载器，它能对文件进行编译、优化、混淆等，比如 babel-loader / css-loader</li><li>plugin是webpack 插件，它是对 webpack 功能的扩展，能实现更多功能，比如定义全局变量、Code Split、加快编译等。它能在 webpack 的每个阶段介入，因为它是基于事件机制，会监听 webpack 所有打包节点，并于节点出执行任务</li></ul><p>loader是一个文件转换器，它是对文件的转换，比如把less转换为 css，单纯的文件转换过程</p><p>plugin 是对 webpack 功能的扩展，对 webpack 的每个阶段它都可以介入，他是基于事件机制，会监听 webpack 所有打包节点，执行广泛的任务</p><h2 id="q-webpack-构建流程简单说一下" tabindex="-1">Q：webpack 构建流程简单说一下 <a class="header-anchor" href="#q-webpack-构建流程简单说一下" aria-label="Permalink to &quot;Q：webpack 构建流程简单说一下&quot;">​</a></h2><p>A: webpack 的运行流程是一个串行的过程，从启动到结束会依次执行以下流程：</p><p>初始化参数：从配置文件和 Shell 语句中读取与合并参数，得出最终的参数</p><p>开始编译：用上一步得到的参数初始化 Compiler 对象，加载所有配置的插件，执行对象的 run 方法开始执行编译</p><p>确定入口：根据配置中的 entry 找出所有的入口文件</p><p>编译模块：从入口文件出发，调用所有配置的 Loader 对模块进行翻译，再找出该模块依赖的模块，再递归本步骤直到所有入口依赖文件都经过了本步骤的处理</p><p>完成模块编译：在经过第 4 步使用的 Loader 翻译完所有模块后，得到了每个模块被翻译后的最终内容以及他们之间的依赖关系</p><p>输出资源：根据入口和模块之间的依赖关系，组装成一个个包含多个模块的 Chunk，再把每个 Chunk 转换成一个单独的文件加入到输出列表，这部是可以修改输出内容的最后机会</p><p>输出完成：在确定好输出内容后，根据配置确定输出的路径和文件名，把文件内容写入到文件系统</p><p>在以上的过程中， webpack 会在特定的时间点广告处特定的事件，插件在监听到感兴趣的事件后会执行特定的逻辑，并且插件可以调用 webpack 提供的 API 改变 Webpack 的运行结果</p><p>简单的说：</p><p>初始化：启动构建，读取与合并配置参数，加载 plugin，实例化 Compiler</p><p>编译：从 Entry 出发，针对每个 Module 串行调用对应的 Loader 去翻译文件的内容，再找到该 Module 依赖的 Module，递归地进行便已处理</p><p>输出：将编译后的 Module 组合成 Chunk，将 Chunk 转换为文件，输出到文件系统中</p><h2 id="q-source-map-是什么-生产环境怎么用" tabindex="-1">Q：source map 是什么？生产环境怎么用？ <a class="header-anchor" href="#q-source-map-是什么-生产环境怎么用" aria-label="Permalink to &quot;Q：source map 是什么？生产环境怎么用？&quot;">​</a></h2><p>A：source map 是讲编译、打包、压缩后的 diamante 映射回源代码的过程。打包压缩后的代码不具备良好的可读性，想要吊事源码就需要 source map</p><p>map 文件只要不打开开发者工具，浏览器是不会加载的</p><p>线上环境一般有三种处理方案：</p><p>hidden-source-map：借助第三方错误监控平台 Sentry 使用</p><p>nosources-source-map：只会显示具体行数以及查看源代码的错误栈。安全性比 sourcemap 高</p><p>sourcemap：通过 nginx 设置将 .map 文件只对白名单开发（公司内网）</p><p>注意：避免在生产中使用 inline- 和 eval- ，因为它们会增加 bundle 体积大小，并降低整体性能</p><h2 id="q-模块打包原理知道吗" tabindex="-1">Q：模块打包原理知道吗？ <a class="header-anchor" href="#q-模块打包原理知道吗" aria-label="Permalink to &quot;Q：模块打包原理知道吗？&quot;">​</a></h2><p>webpack 实际上尉每个模块创造了一个可以导出和导入的环境，本质上并没有修改 代码的执行逻辑，代码执行顺序与模块加载顺序也完全一致。</p><h2 id="q-文件监听原理呢" tabindex="-1">Q：文件监听原理呢？ <a class="header-anchor" href="#q-文件监听原理呢" aria-label="Permalink to &quot;Q：文件监听原理呢？&quot;">​</a></h2><p>在发现源码发生变化时，自动重新构建出新的输出文件。</p><p>webpack 开启监听模式，有两种方式：</p><p>启动 webpack 命令时，带上 --watch 参数</p><p>在配置 webpack.config.js 中设置 watch：true</p><h2 id="q-说一下-webpack-的热更新原理吧-必考" tabindex="-1">Q：说一下 webpack 的热更新原理吧（必考） <a class="header-anchor" href="#q-说一下-webpack-的热更新原理吧-必考" aria-label="Permalink to &quot;Q：说一下 webpack 的热更新原理吧（必考）&quot;">​</a></h2><p>webpack 的热更新又称热替换（Hot Module Replacement），缩写为 HMR。这个机制可以做到不用刷新浏览器而将新变更的模块替换掉旧的模块。</p><p>HMR 的核心就是客户端从服务端拉去更新后的文件，准确的说是 chunk diff（chunk 需要更新的部分），实际上 WDS 与浏览器之间维护了一个 <code>Websocket</code> ，当本地资源发生变化时，WDS 会向浏览器推送更新，并带上构建时的 hash，让客户端与上一次资源进行对比。客户端对比出差异后会向 WDS 发起 <code>Ajax</code> 请求来获取更新内容（文件列表、hash），这样客户端就可以再借助这些信息继续向 WDS 发起 <code>jsonp</code> 请求获取该 chunk 的增量更新</p><p>后续的部分（拿到增量更新之后如何处理？哪些状态该保留？哪些又需要更新？）由 <code>HocModulePlugin</code> 来完成，提供了相关 API 以供开发者针对自身场景进行处理，像 <code>react-hot-loader</code> 和 <code>vue-loader</code> 都是借助这些 API 实现 HMR。</p><p>原理请参考 webpack HMR 原理解析</p><h2 id="q-如何对-bundle-体积进行监控和和分析" tabindex="-1">Q：如何对 bundle 体积进行监控和和分析？ <a class="header-anchor" href="#q-如何对-bundle-体积进行监控和和分析" aria-label="Permalink to &quot;Q：如何对 bundle 体积进行监控和和分析？&quot;">​</a></h2><p><code>VSCode</code> 中有个插件 <code>Import Cost</code> 可以帮组我们对引入的模块的大小进行实时监测，还可以和使用 <code>webpack-bundle-analyzer</code> 生成 <code>bundle</code> 的模块组成图，显示所占体积</p><p><code>bundlesize</code> 工具包可以进行自动化资源体积监控</p><h2 id="q-文件指纹是什么-怎么用" tabindex="-1">Q：文件指纹是什么？怎么用？ <a class="header-anchor" href="#q-文件指纹是什么-怎么用" aria-label="Permalink to &quot;Q：文件指纹是什么？怎么用？&quot;">​</a></h2><p>文件指纹是打包后输出的文件名的后缀</p><ul><li><code>Hash</code> ：和整个项目的构建相关，只要项目文件有修改，整个项目构建的 hash 值就会更改</li><li><code>Chunkhash</code>：和 webpack 打包的 chunk 有关，不同的 entry 会发出不同的 chunkhas</li><li><code>Contenthash</code>：根据文件内容来定义 hash，文件内容不变，则 contenthash 不变</li></ul><h2 id="q-如何优化-webpack-的构建速度" tabindex="-1">Q：如何优化 webpack 的构建速度？ <a class="header-anchor" href="#q-如何优化-webpack-的构建速度" aria-label="Permalink to &quot;Q：如何优化 webpack 的构建速度？&quot;">​</a></h2><p>可以讲很多，我觉得按重要性来说</p><ul><li>使用 <code>高版本</code>的 webpack 和 Node.js</li><li><code>多进程/多实例构建</code>: HappyPack（不维护了）、thread-loader</li><li>压缩代码 <ul><li>webpack-paralle-uglify-plugin</li><li>uglifyjs-webpack-plugin 开启 parallel 参数（不支持 ES6）</li><li>terser-webpack-plugin 开启 parallel 参数</li><li>多进程并行压缩</li><li>通过 mini-css-extract-plugin 提取 chunk 中的 css 代码到单独文件，通过 css-loader 的 minimize 选项开启 cssnano 压缩 css</li></ul></li><li>图片压缩 <ul><li>使用基于 Node 库的 imagemin（很多定制选项、可以处理多种图片格式）</li><li>配置 image-webpack-loader</li></ul></li><li>缩小打包作用于 <ul><li>exclude/include（确定 loader 规则范围）</li><li>resolve.modules 指明第三方模块的绝对路径（减少不必要的查找）</li><li>resolve.mainFields 只采用 main 字段作为入口文件描述字段（减少搜索不走，需要考虑到所有运行时依赖的第三方模块的入口文件描述字段）</li><li>resolve.extensions 尽可能减少后缀尝试的可能性</li><li>noParse 对完全不需要解析的库进行忽略（不去解析但仍会打包到 bundle 中，被忽略掉的文件里不应该包含 import、require、define 等模块化语句）</li><li>IgnorePlugin（完全排除模块）</li><li>合理使用 alias</li></ul></li><li>提取页面公共资源 <ul><li>使用 html-webpack-externals-plugin，将基础包通过 CDN 引入，不打入 bundle 中</li><li>使用 splitchunksplugin 进行（公共脚本、基础包、页面公共文件）分离（webpack4 内置），替代了 commonschunkplugin 插件</li><li>基础包分离</li></ul></li><li>DLL： <ul><li>使用 DllPlugin 将不常变化的代码提前打包，并复用，如 vue、react</li><li>使用 DllPlugin 进行分包，使用 DllReferencePlugin（索引链接）对 manifest.json 引用，让一些基本不会改动的代码先打包成静态资源，避免反复编译浪费时间</li><li>HashedModuleIdsPlugin 可以解决模块数字 id 问题</li></ul></li><li>充分利用缓存提升二次构建速度 <ul><li>babel-loader 开启缓存</li><li>terser-webpack-plugin 开启缓存</li><li>使用 cache-loader 或者 hard-source-webpack-plugin</li></ul></li><li>Tree shaking <ul><li>purgecss-webpack-plugin 和 mini-css-extract-plugin 配合使用（建议）</li><li>打包过程中检测工程中没有引用过的模块并进行标记，在资源压缩时将它们从最终的 bundle 中去掉（只能对 ES6 Modlue 生效）开发中尽可能使用 ES6 Module 的模块，提高 tree shaking 效率</li><li>禁用 babel-loader 的模块依赖解析，否则 webpack 接受到的就都是转换过的 CommonJS 形式的模块，无法进行 tree-shaking</li></ul></li><li>动态 polyfill <ul><li>建议采用 polyfill-service 只给用户返回需要的 polyfill，社区维护</li></ul></li><li>处于生产环境时，关闭不必要的环节，比如可以关闭 source map</li></ul><h2 id="q-你刚才提到了代码分割-那代码分割的本质是什么-有什么意义呢" tabindex="-1">Q：你刚才提到了代码分割，那代码分割的本质是什么？有什么意义呢？ <a class="header-anchor" href="#q-你刚才提到了代码分割-那代码分割的本质是什么-有什么意义呢" aria-label="Permalink to &quot;Q：你刚才提到了代码分割，那代码分割的本质是什么？有什么意义呢？&quot;">​</a></h2><p>代码分割的本质其实是在<code>源代码直接上线</code> 和 <code>打包成唯一脚本main.bundle.js</code> 这两种极端方案之间的一种更适合实际场景的中间状态。</p><p><strong>用可接受的服务器性能压力增加来换取更好的用户体验</strong></p><p>源代码直接上线：虽然过程可控，但是 http 请求多，性能开销大</p><p>打包成唯一脚本：一把搜哈自己爽，服务器压力下，但是页面空白期长，用户体验差</p><h2 id="q-是否写过-loader-简单描述一下编写-loader-的思路" tabindex="-1">Q：是否写过 Loader？简单描述一下编写 loader 的思路？ <a class="header-anchor" href="#q-是否写过-loader-简单描述一下编写-loader-的思路" aria-label="Permalink to &quot;Q：是否写过 Loader？简单描述一下编写 loader 的思路？&quot;">​</a></h2><p>Loader 支持链式调用，所以开发商需要严格遵循“单一职责”，每个 Loader 只负责自己需要负责的事件。</p><p>过程：</p><ul><li>Loader 运行在 Node.js 中，我们可以调用任意 Node.js 自带的 API 或者安装第三方模块进行调用</li><li>Webpack 传给 Loader 的原内容都是 UTF-8 格式编码的字符串，当某些场景下 Loader 处理二进制文件时，需要通过 exports.raw = true 告诉 webpack 该 loader 是否需要二进制数据</li><li>尽可能的异步 Loader，如果计算量很小，同步也可以</li><li>Loader 是无状态的，我们不应该在 Loader 中保留状态</li><li>使用 loader-utils 和 schema-utils 为我们提供的使用工具</li><li>加载本地 loader 方法 <ul><li>npm link</li><li>resolveloader</li></ul></li></ul><h2 id="q-是否写过-plugin-简单描述一下编写-plugin-的思路" tabindex="-1">Q：是否写过 Plugin？简单描述一下编写 plugin 的思路 <a class="header-anchor" href="#q-是否写过-plugin-简单描述一下编写-plugin-的思路" aria-label="Permalink to &quot;Q：是否写过 Plugin？简单描述一下编写 plugin 的思路&quot;">​</a></h2><p>webpack 在运行的生命周期中会广播出许多事件，Plugin 可以监听这些事件，在特定的阶段钩入想要添加的自定义功能。 webpack 的 tapable 事件流机制保证了插件的有序性，使得整个系统扩展性良好。</p><p>过程：</p><ul><li>compiler 暴露了和 webpack 整个生命周期相关的钩子</li><li>compilation 暴露了与模块和依赖有关的粒度更小的事件钩子</li><li>插件需要在其原型上绑定 apply 方法，才能访问 compiler 实例</li><li>传给每个插件的 compilter 和 compilation 对象都是同一个引用，若在一个插件中修改了他们身上的属性，会影响后面的插件</li><li>找出合适的事件点去完成想要的功能 <ul><li>emit 事件发生时，可以读取到最终输出的资源、代码块、模块及其依赖，并进行修改（emit 事件是修改 webpack 输出资源的最后时机）</li><li>watch-run 当依赖的文件发生变化时会出发</li></ul></li><li>异步的事件需要在插件处理完任务时调用回调函数通知 webpack 进入下一个流程，不然会卡主</li></ul><h2 id="q-聊一聊-babel-原理吧" tabindex="-1">Q：聊一聊 Babel 原理吧 <a class="header-anchor" href="#q-聊一聊-babel-原理吧" aria-label="Permalink to &quot;Q：聊一聊 Babel 原理吧&quot;">​</a></h2><p>大多数 JavaScript Parser 遵循 <code>estree</code> 规范，Babel 最初基于 <code>acorn</code> 项目（轻量级现代 JavaScript 解析器） Babel 大概分为三大部分：</p><ul><li>解析：将代码转换成 AST <ul><li>词法分析：将代码（字符串）分割为 token 流，即语法单元成的数组</li><li>语法分析：分析 token 流（上面生成的数组）并生成 AST</li></ul></li><li>转换：访问 AST 的节点进行变换操作生产新的 AST <ul><li><a href="https://github.com/NervJS/taro/blob/master/packages/taro-transformer-wx/src/index.ts" target="_blank" rel="noreferrer">Taro 就是利用 babel 完成的小程序语法装换</a></li></ul></li><li>生成：以新的 AST 为基础生成代码</li></ul><p>想了解如何一步一步实现一个编译器的同学可以移步 Babel 官网曾经推荐的开源项目 <a href="https://github.com/jamiebuilds/the-super-tiny-compiler" target="_blank" rel="noreferrer">the-super-tiny-compiler</a></p><h2 id="q-webpack和vite的区别" tabindex="-1">Q：webpack和vite的区别 <a class="header-anchor" href="#q-webpack和vite的区别" aria-label="Permalink to &quot;Q：webpack和vite的区别&quot;">​</a></h2><p>A：</p><p>1.开发环境区别</p><ul><li>vite 自己实现 server，不对代码打包，充分利用浏览器的<code>&lt;script type=&quot;module&quot;&gt;</code> 的支持 <ul><li>假设 main.js 引入了 vue</li><li>该 server 会把 <code>import { useEffect } from &#39;react&#39;</code> 改成 <code>import {useEffect } from &quot;/node_modules/.vite/react.js&quot;</code> 这样浏览器就知道去哪里做到 vue.js</li></ul></li><li>webpack-dev-server 常使用 babel-loader 基于内存打包，比 vite 慢很多很多 <ul><li>该 server 会把 react.js 的代码（递归地）打包进 main.js</li></ul></li></ul><p>2.生产环境区别</p><ul><li>vite 使用 rollup + esbuild 来打包 JS 代码</li><li>webpack 使用 babel 来打包 JS 代码，比 esbuild 慢很多很多 <ul><li>webpack 能使用 esbuild 吗？可以，你需要配置（很麻烦）</li><li>esbuild 为什么快 <ul><li>babel 用 js 写，esbuild 用 go 写的</li><li>webpack 和 rollup 一个层级</li><li>babel 和 esbuild 一个层级的</li><li>vite 相当于比 webpack 再封装了一层</li></ul></li></ul></li></ul><p>3.文件处理时机</p><ul><li>vite 只会在你请求某个文件的时候处理该文件</li><li>webpack 会提前打包好 main.js，等你请求的时候直接输出打包好的 JS 给你</li></ul><p>目前已知 vite 的缺点有</p><ol><li>热更新常常失败，原因不清楚</li><li>有些功能 rollup 不支持，需要自己写 rollup 插件</li><li>不支持非现代浏览器</li></ol><h2 id="q-如何实现-tree-shaking" tabindex="-1">Q：如何实现 tree-shaking？ <a class="header-anchor" href="#q-如何实现-tree-shaking" aria-label="Permalink to &quot;Q：如何实现 tree-shaking？&quot;">​</a></h2><p>A：tree-shaking 就是让没有用到的 JS 代码不打包，以减小包的体积</p><p>怎么删？</p><ul><li>使用 ES Modules 语法（即 ES6 的 import 和 export 关键字）</li><li>CommonJS 语法无法 tree-shaking（即 require 和 exports 语法）</li><li>引入的时候只引用需要的模块 <ul><li>要写 <code>import { cloneDeep } from &#39;lodash-es&#39;</code> 引入的库也需要用 ES Modules</li><li>不要写 <code>import _ from &#39;lodash&#39;</code> 因为会导致无法 tree-shaking</li></ul></li></ul><p>怎么不删？</p><p>在 package.json 中配置 sideEffects，防止某些文件被删掉</p><ul><li>比如我 import 了 x.js，而 x.js 只是添加了 window.x 属性，那么 x.js 就要放到 sideEffects 里</li><li>比如所有被 import 的 CSS 都要放在 sideEffects 里</li></ul><p>怎么开启？</p><p>在 webpack config 中将 mode 设置为 production（开发环境没必要 tree-shaking）</p><blockquote><p>在 Webpack5 中，Tree Shaking 在生产环境下默认启动</p></blockquote><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h2><ul><li><a href="https://mp.weixin.qq.com/s?__biz=Mzk0MDMwMzQyOA==&amp;mid=2247490341&amp;idx=1&amp;sn=2020de4976722d426c7ac3cebedf9d90&amp;source=41#wechat_redirect" target="_blank" rel="noreferrer">「吐血整理」再来一打 Webpack 面试题</a></li></ul>',100)]))}const h=l(p,[["render",r]]);export{b as __pageData,h as default};
