import{_ as i,c as a,a3 as l,o as t}from"./chunks/framework.CAwIQbWu.js";const E=JSON.parse('{"title":"模拟题四","description":"","frontmatter":{},"headers":[],"relativePath":"Interview/book4.md","filePath":"Interview/book4.md","lastUpdated":1728624842000}'),n={name:"Interview/book4.md"};function e(p,s,h,k,r,o){return t(),a("div",null,s[0]||(s[0]=[l(`<h1 id="模拟题四" tabindex="-1">模拟题四 <a class="header-anchor" href="#模拟题四" aria-label="Permalink to &quot;模拟题四&quot;">​</a></h1><h2 id="_1-左边宽度已知-右边自适应方案" tabindex="-1">1. 左边宽度已知，右边自适应方案 <a class="header-anchor" href="#_1-左边宽度已知-右边自适应方案" aria-label="Permalink to &quot;1. 左边宽度已知，右边自适应方案&quot;">​</a></h2><p>具体可以看<a href="https://demo.azhubaby.com/%E5%B7%A6%E8%BE%B9%E5%9B%BA%E5%AE%9A%EF%BC%8C%E5%8F%B3%E8%BE%B9%E8%87%AA%E9%80%82%E5%BA%94.html" target="_blank" rel="noreferrer">左边固定，右边自适应</a>，代码也已经部署到 <a href="https://github.com/johanazhu/demo" target="_blank" rel="noreferrer">github</a> 上</p><p>一共六种方法：</p><ul><li>flex 布局</li><li>grid 布局</li><li>双子元素+ absolute <ul><li>左元素 absolute</li><li>右元素 absolute + left 200px + width: calc(100% - 200px)</li></ul></li><li>左元素 absolute + 右元素 margin-left <ul><li>左元素 absolute</li><li>右元素 margin-left: 200px + width: calc(100% - 200px)</li></ul></li><li>无父元素 + 左元素浮动，右元素不动 <ul><li>左元素 float:left</li><li>右元素和之前一样设置高度即可，其他不用写</li></ul></li><li>无父元素+左元素左浮动，右元素右浮动 <ul><li>左元素 float:left</li><li>右元素float:right + calc(100% - 200px)</li></ul></li></ul><h2 id="_2-手写-new-操作符" tabindex="-1">2. 手写 New 操作符 <a class="header-anchor" href="#_2-手写-new-操作符" aria-label="Permalink to &quot;2. 手写 New 操作符&quot;">​</a></h2><p>new 操作符具体做了什么</p><blockquote><p>1.在内存中创建一个新对象</p><p>2.这个新对象的[[prototype]] 指向被赋值为构造函数的 prototype 属性</p><p>3.构造函数内部的 this 被赋值为这个新对象</p><p>4.执行构造函数内部的代码</p><p>5.如果构造函数返回非空对象，则返回该对象；否则，返回刚创建的新对象</p></blockquote><p>手写代码</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> new2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">Constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    obj.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">__proto__</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   	const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Constructor.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj, args)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;object&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>衍生问题：Object.create、apply</p><h3 id="手写object-create" tabindex="-1">手写Object.create <a class="header-anchor" href="#手写object-create" aria-label="Permalink to &quot;手写Object.create&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">proto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> F</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {}</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    F</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> proto</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> F</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="手写-apply" tabindex="-1">手写 apply <a class="header-anchor" href="#手写-apply" aria-label="Permalink to &quot;手写 apply&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> myApply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> === </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Fcuntion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> undefined</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fn </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Symbol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    context[fn] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (Array.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(args)) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> context[fn](</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">args)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> context[fn]()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    delete</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> context[fn];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>相关文章：<a href="./../JavaScript/new做了什么.html">new 做了什么</a></p><h2 id="_3-继承" tabindex="-1">3. 继承 <a class="header-anchor" href="#_3-继承" aria-label="Permalink to &quot;3. 继承&quot;">​</a></h2><p>原型链继承、借用构造函数继承、组合继承、原型式继承（Object.create）、寄生式继承、寄生组合式继承</p><h2 id="_4-class" tabindex="-1">4. Class <a class="header-anchor" href="#_4-class" aria-label="Permalink to &quot;4. Class&quot;">​</a></h2><p>Class 继承</p><h2 id="_5-setstate-是同步的还是异步" tabindex="-1">5.setState 是同步的还是异步 <a class="header-anchor" href="#_5-setstate-是同步的还是异步" aria-label="Permalink to &quot;5.setState 是同步的还是异步&quot;">​</a></h2><p>考察点：批处理</p><p>类似问题：为什么有时 react 两次 setState，只执行了一次</p><p>React18之后都为异步</p><p>React18之前：</p><p>代码是同步的，执行是异步的。setState 做批处理，当多次连续调用 setState 时，React 会将这些更新合并（batch）为一次，从而只触发一次重新渲染，从而提高性能</p><p>像 setTimeout、promise 之类的原生方法和浏览器原生事件，setState 是同步，这是因为这些事件发生在 React 调度流程之外，不会触发批处理更新机制</p><p>可以通过 setState 接受一个函数作为参数，在函数内取到上一次的 state，来实现同步更新</p><p>虽然说 setState 在某些情况下是异步的，但实际上它并不是真正意义上的异步，而只是批量更新的一种优化手段</p><h2 id="_6-redux-中间件机制" tabindex="-1">6.Redux 中间件机制 <a class="header-anchor" href="#_6-redux-中间件机制" aria-label="Permalink to &quot;6.Redux 中间件机制&quot;">​</a></h2><p>增强器、applyMiddleware 函数，装饰器模式</p><h2 id="_7-浏览器-内存泄露是什么" tabindex="-1">7.浏览器：内存泄露是什么 <a class="header-anchor" href="#_7-浏览器-内存泄露是什么" aria-label="Permalink to &quot;7.浏览器：内存泄露是什么&quot;">​</a></h2><p>新生代内存回收：Scavenge 算法</p><ul><li>将空间分成两半，一半是 from 空间，一半是 to 空间，新加入的对象会放在 from 空间，当空间快满时，执行垃圾清理；在角色调换，当调换完后的 from 空间快满时，再执行垃圾清理，如何反复</li></ul><p>老生代内存回收：标记-清除-整理（Mark - Sweep），此为两个算法，「标记-清理」算法和 「标记-整理」算法</p><ul><li>标记-清理：标记用不到的变量，清理掉</li><li>标记-整理：整理完内存后，会产生不连续的内容空间，为节省空间，整理算法会将内容排序到一处空间，空间就变大了</li></ul><p>引用计数：引擎中有张“引用表”，保存了内存里面的资源的引用次数，如果一个值的引用次数是0，就表示这个只不再用到，因此可以将这块内存释放</p><p>缺点：循环引用，从而导致内容泄露</p><p>衍生问题：如何定位内存泄露</p><h3 id="如何定位内存泄露" tabindex="-1">如何定位内存泄露 <a class="header-anchor" href="#如何定位内存泄露" aria-label="Permalink to &quot;如何定位内存泄露&quot;">​</a></h3><h4 id="内存泄露有哪些情况" tabindex="-1">内存泄露有哪些情况 <a class="header-anchor" href="#内存泄露有哪些情况" aria-label="Permalink to &quot;内存泄露有哪些情况&quot;">​</a></h4><p>最常见的情况就是异步任务的回调未清除或者定时器任务没有清楚，其他的还有DOM引用未清除等。</p><h4 id="如何排查内存泄露" tabindex="-1">如何排查内存泄露 <a class="header-anchor" href="#如何排查内存泄露" aria-label="Permalink to &quot;如何排查内存泄露&quot;">​</a></h4><p>通过开发者工具中的 Performance 模块，可以对页面加载和执行流程进行录制，之后在录制快照里查看内存的使用情况。如果发现有内存异常，则可以进一步缩小排查范围，最终找到引发内存泄露的代码。</p><h2 id="_8-工程化-split-code-代码分割的原理是什么" tabindex="-1">8.工程化：split code 代码分割的原理是什么 <a class="header-anchor" href="#_8-工程化-split-code-代码分割的原理是什么" aria-label="Permalink to &quot;8.工程化：split code 代码分割的原理是什么&quot;">​</a></h2><p>目的是优化初始加载时间</p><ul><li>减少初始包体积</li><li>按需加载</li><li>提高并行加载效率</li></ul><p>代码分割通常通过构建工具实现</p><ul><li>使用 import() 语法：这是动态导入的方式</li><li>界面路由：在单页应用中，使用前端路由库来实现路由级别的代码分割</li><li>webpack配置：使用 <code>optimization.splitChunks</code> 来定义分割逻辑</li><li>魔术注释：Webpack支持在使用 <code>import()</code> 语法时添加注释，指定文件名称或者 chunks 名称，在打包时能够更好地控制生成文件的名称和位置</li></ul><h2 id="_9-微前端是什么-有什么用" tabindex="-1">9.微前端是什么？有什么用 <a class="header-anchor" href="#_9-微前端是什么-有什么用" aria-label="Permalink to &quot;9.微前端是什么？有什么用&quot;">​</a></h2><p>考察点：微前端</p><p>微前端可以在一个页面上跑多个 react、vue 甚至原生项目，他们之间的 JS、CSS 相互隔离运行，不会相互影响，也有通信机制可以通信</p><h3 id="怎么实现的-技术原理" tabindex="-1">怎么实现的？（技术原理） <a class="header-anchor" href="#怎么实现的-技术原理" aria-label="Permalink to &quot;怎么实现的？（技术原理）&quot;">​</a></h3><p>当路由切换时，下载对应引用的代码，然后跑到容器中</p><p>比如 single-spa（qiankun就是基于此框架改造），它做的就是监听路由变化，路由切换的时候加载，卸载注册应用的代码</p><p>只不过 single-spa 的入口是一个 js 文件，需要代码手动指定要加载啥 js、css等，不方便维护</p><p>qiankun 是对 single-spa 的升级</p><p>它做了什么改造，一改为 html 为入口，解析 html，从中分析 js、css，再加载，这个是 import-html-entry 这个包实现的</p><p>二把 js 代码包裹了一层 function，然后再把内部的 window 用 Proxy 包一层，这样内部的代码就完全被隔离了，就实现了一个 js 沙箱</p><p>这是 js 隔离</p><p>还有样式隔离</p><p>qiankun 做了样式隔离，有 shadow dom 和 scoped 两种方案，但都有问题：</p><ul><li>shadow dom 自带样式隔离，但是 shadow dom 内的样式和外界互不影响，导致挂在弹窗的样式会加不上。父应用也没法设置子应用的样式。</li><li>scoped 的方案是给选择器加了一个 data-qiankun=&#39;应用名&#39; 的选择器，这样父应用能设置子应用样式，这样能隔离样式，但是同样有挂在 body 的弹窗样式设置不上的问题，因为 qiankun 的 scoped 不支持全局样式</li></ul><p>衍生问题：为什么不用 iframe、父子应用如何通讯、什么是 postmessage、其他微前端方案</p><h3 id="为什么不用-iframe" tabindex="-1">为什么不用 iframe <a class="header-anchor" href="#为什么不用-iframe" aria-label="Permalink to &quot;为什么不用 iframe&quot;">​</a></h3><p>隔离性无法被突破，导致应用间上下文无法被共享</p><ol><li>url 不同步。浏览器刷新 iframe url 状态会丢失、后退前进按钮无法使用</li><li>UI 不同步，DOM 结构不共享。iframe 中弹出一个弹框，但不会出现在浏览器居中</li><li>全局上下文完全隔离，内存变量不共享。iframe 内外系统的通信、数据同步等需求，主应用的 cookie 要透传到根域名在不同的子应用中实现免登效果 <ul><li>同域情况下，cookie 可以通过 nginx 配置到同域名下的子路由转发到子引用服务端口</li></ul></li><li>慢。每次子引用进入都是一次浏览器上下文重建、资源重新加载的过程</li></ol><p>源自：<a href="https://www.yuque.com/kuitos/gky7yw/gesexv" target="_blank" rel="noreferrer">Why Not Iframe</a></p><p>其实问题1、2、3都可以通过 postmessage 来解决，4就是体验问题，一般后台管理系统可以忽略</p><p>个人感觉是解决方案，qiankun 背靠阿里，有问题可以在 github 上找，而且 umijs 集成了qiankun，开发效率能提升</p><p>iframe的缺点：</p><ul><li><p>路由状态丢失，刷新一下，iframe 的 url 状态就丢失了</p></li><li><p>dom 割裂严重，弹窗只能在 iframe 内部展示，无法覆盖全局</p></li><li><p>web 应用之间通信困难</p></li><li><p>每次打开白屏时间太长，对于 SPA 应用来说无法接受</p></li></ul><p>qiankun 父子应用如何通讯</p><p>1.全局状态管理（initGlobalState）</p><p>2.props 传递</p><ul><li>父组件在加载子应用时传递 props</li><li>字组件通过 this.props 访问这些数据</li></ul><p>3.url参数传递</p><p>4.事件机制（自己做一个发布订阅模式）</p><p>5.第三方库（Redux）</p><p>6.localStorage/sessionStorage</p><h3 id="postmessage" tabindex="-1">postmessage <a class="header-anchor" href="#postmessage" aria-label="Permalink to &quot;postmessage&quot;">​</a></h3><p>postMessage是HTML5引入的一种跨文档通信的机制，可以在不同的窗口或框架之间传递数据，即使这些窗口或框架不属于同一个源。</p><p>postmenssage 是 HTML 引入的一种跨窗口通信机制，解决了以下爱问题：</p><ul><li>页面和其打开的新窗口之前的数据传递</li><li>页面与嵌套的 iframe 之间的消息传递</li><li>多窗口之间的跨域数据传递</li></ul><h3 id="其他微前端方案" tabindex="-1">其他微前端方案 <a class="header-anchor" href="#其他微前端方案" aria-label="Permalink to &quot;其他微前端方案&quot;">​</a></h3><p>京东：<strong><a href="https://github.com/micro-zoe/micro-app" target="_blank" rel="noreferrer">micro-app</a></strong></p><ul><li>基于类WebComponent + HTML Entry</li><li><strong>WebComponent</strong>：web原生组件，它有两个核心组成部分：CustomElement和ShadowDom。CustomElement用于创建自定义标签，ShadowDom用于创建阴影DOM，阴影DOM具有天然的样式隔离和元素隔离属性。由于WebComponent是原生组件，它可以在任何框架中使用，理论上是实现微前端最优的方案。但WebComponent有一个无法解决的问题 - ShadowDom的兼容性非常不好，一些前端框架在ShadowDom环境下无法正常运行，尤其是react框架。</li><li><strong>类WebComponent</strong>：就是使用CustomElement结合自定义的ShadowDom实现WebComponent基本一致的功能。</li><li>数据通讯：基于发布订阅+CustomEvent</li></ul><p><img src="https://pub-15dc9987604d4311befe731fecc8adb9.r2.dev/074dbf280018e0db9efb41d6cc28d0e3.png" alt="micro-app vs qiankun"></p><p>无界：</p><ul><li>基于 WebComponent 容器 + iframe</li></ul><h2 id="_10-算法题-二叉树的前序遍历" tabindex="-1">10. 算法题：二叉树的前序遍历 <a class="header-anchor" href="#_10-算法题-二叉树的前序遍历" aria-label="Permalink to &quot;10. 算法题：二叉树的前序遍历&quot;">​</a></h2><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> preorderTraversal</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">root</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ret </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> preorder</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">root</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">root) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ret.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(root.val)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        preorder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(root.left)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        preorder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(root.right)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    preorder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(root)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ret;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div>`,92)]))}const c=i(n,[["render",e]]);export{E as __pageData,c as default};
