import{_ as s,c as a,a3 as t,o as n}from"./chunks/framework.CAwIQbWu.js";const g=JSON.parse('{"title":"Git 提交规范","description":"","frontmatter":{},"headers":[],"relativePath":"Git/git提交规范.md","filePath":"Git/git提交规范.md","lastUpdated":1726294467000}'),l={name:"Git/git提交规范.md"};function e(p,i,h,o,r,k){return n(),a("div",null,i[0]||(i[0]=[t(`<h1 id="git-提交规范" tabindex="-1">Git 提交规范 <a class="header-anchor" href="#git-提交规范" aria-label="Permalink to &quot;Git 提交规范&quot;">​</a></h1><p>约定式提交：<a href="https://www.conventionalcommits.org/zh-hans/v1.0.0/" target="_blank" rel="noreferrer">https://www.conventionalcommits.org/zh-hans/v1.0.0/</a></p><p>git commit 最佳实践，commitizen + husky + commitlint 规范化校验</p><h2 id="husky" tabindex="-1">Husky <a class="header-anchor" href="#husky" aria-label="Permalink to &quot;Husky&quot;">​</a></h2><p>Husky 是用于管理 Git Hooks 的工具，Git Hooks 是 Git 中的一个特性，可以在 Git 的生命周期中的某些重要事件（如提交、推送等）触发自定义脚本</p><p>钩子</p><h2 id="lint-staged" tabindex="-1">lint-staged <a class="header-anchor" href="#lint-staged" aria-label="Permalink to &quot;lint-staged&quot;">​</a></h2><p>配合 Husky 钩子，格式化文件代码</p><p>git commit 规范主要可以帮助开发人员在 code reivew 期间更容易理解提交的内容，现在大部分主流 commit 都是基于 Angular 团队的规范而衍生出来的，它的 message 格式如下：</p><div class="language-markdown vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">markdown</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;BLANK LINE&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;body&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;BLANK LINE&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;footer&gt;</span></span></code></pre></div><p>每个提交消息都包含一个<strong>subject</strong>、一个<strong>body</strong>和一个<strong>footer</strong> (中间使用空行分割)，提交信息的任何一行不能超过 100 个字符。</p><p>👉 type主要有以下几种类型：</p><ul><li>feat：一个新特性</li><li>fix：修复bug</li><li>docs：文档修改</li><li>style：不影响代码含义的更改（空格、格式、缺少分号等）</li><li>refactor：代码重构</li><li>perf：新能优化</li><li>test：测试用例修改</li><li>chore：对构建过程或辅助工具和库的更改，例如文档生成</li></ul><p>👉 scope：可以是影响范围的任何内容。</p><p>👉 subject：包含对更改的简洁描述，规则：</p><ul><li>使用陈述语句</li><li>第一个字母不要大写</li><li>末尾没有点 (.)</li></ul><p>👉 body：commit 具体修改内容, 可以分为多行，应该包括改变的动机，并与以前的行为进行对比。</p><p>👉 footer: 一些备注, 通常是修复的 bug 的链接。</p><p>截取一张开源库的 commit，<a href="https://github.com/nrwl/nx" target="_blank" rel="noreferrer">example</a>：</p><p><img src="https://s2.loli.net/2022/06/01/DAP7EKRrHpzmvMW.webp" alt="image.png"></p><p>也可以看看：<a href="https://github.com/umijs/umi" target="_blank" rel="noreferrer">https://github.com/umijs/umi</a></p><p>有了规范后，我们需要通过工具去约束：<a href="https://github.com/conventional-changelog/commitlint" target="_blank" rel="noreferrer">commitlint</a>。它要做的就是在我们每次提交 <code>git commit</code> 的时候，都会帮我们检查 <code>commit message</code> 是否符合一定的规范，如果不符合，就让这次提交失败。</p><p>具体配置：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 安装 commitlint cli 和 conventional config</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --save-dev</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @commitlint/{config-conventional,cli}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Windows:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --save-dev</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @commitlint/config-conventional</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @commitlint/cli</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">配置要使用的</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commitlint</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 规则</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;module.exports = {extends: [&#39;@commitlint/config-conventional&#39;]}&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commitlint.config.js</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">加入到husky中：</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> husky</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .husky/commit-msg</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;npx --no -- commitlint --edit &quot;$1&quot;&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">or</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yarn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> husky</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .husky/commit-msg</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;yarn commitlint --edit $1&#39;</span></span></code></pre></div><p>更多详情见官网：<a href="https://github.com/conventional-changelog/commitlint" target="_blank" rel="noreferrer">https://github.com/conventional-changelog/commitlint</a></p><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h2><ul><li><a href="https://jiongks.name/blog/git-commit/" target="_blank" rel="noreferrer">如何撰写 Git 提交信息</a></li><li><a href="https://www.jianshu.com/p/c7e40dab5b05" target="_blank" rel="noreferrer">Git-Commit-Log 规范（Angular 规范）</a></li><li><a href="https://www.npmjs.com/package/commitizen" target="_blank" rel="noreferrer">commitizen</a></li><li><a href="https://wutao.work/archives/10104.html" target="_blank" rel="noreferrer">git 代码提交规范</a></li></ul>`,27)]))}const d=s(l,[["render",e]]);export{g as __pageData,d as default};
