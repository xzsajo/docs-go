import{_ as e,c as r,a3 as t,o as l}from"./chunks/framework.CAwIQbWu.js";const c=JSON.parse('{"title":"web 安全","description":"","frontmatter":{},"headers":[],"relativePath":"Browser/web安全.md","filePath":"Browser/web安全.md","lastUpdated":1725530434000}'),i={name:"Browser/web安全.md"};function o(s,a,h,n,S,d){return l(),r("div",null,a[0]||(a[0]=[t('<h1 id="web-安全" tabindex="-1">web 安全 <a class="header-anchor" href="#web-安全" aria-label="Permalink to &quot;web 安全&quot;">​</a></h1><p>只要讲以下几点攻击方式：XSS 攻击、CSRF 攻击、SQL注入、点击劫持以及 URL 跳转漏洞</p><p>在阅读本文之前，先试着问自己以下几个面试题：</p><blockquote><p>1.前端有哪些攻击方式？</p><p>2.什么是XSS攻击？XSS攻击有几种类型？如果防范XSS攻击？</p><p>3.什么是CSRF攻击？如何防范CSRF攻击</p><p>4.如何检测网站是否安全？</p></blockquote><h2 id="xss攻击" tabindex="-1">XSS攻击 <a class="header-anchor" href="#xss攻击" aria-label="Permalink to &quot;XSS攻击&quot;">​</a></h2><p>XSS 攻击，即跨站脚本攻击（Cross-Site Scripting），攻击者在目标网站上注入恶意代码，当被攻击者登陆网站时就会执行这些恶意代码，这些脚本可以读取 cookie，session tokens，或者其它敏感的网站信息，对用户进行钓鱼欺诈，甚至发起蠕虫攻击等。</p><p>XSS 的本质是：恶意代码未经过滤，与网站正常的代码混在一起；浏览器无法分辨哪些脚本是可信的，导致恶意脚本被执行。由于直接在用户的终端执行，恶意代码能够直接获取用户的信息，利用这些信息冒充用户向网站发起攻击者定义的请求。</p><p>根据攻击的来源，XSS攻击可以分为反射型(非持久型)、存储型(持久性)和DOM型三种</p><h3 id="反射型xss" tabindex="-1">反射型XSS <a class="header-anchor" href="#反射型xss" aria-label="Permalink to &quot;反射型XSS&quot;">​</a></h3><h3 id="存储型xss" tabindex="-1">存储型XSS <a class="header-anchor" href="#存储型xss" aria-label="Permalink to &quot;存储型XSS&quot;">​</a></h3><h3 id="dom-型-xss" tabindex="-1">DOM 型 XSS <a class="header-anchor" href="#dom-型-xss" aria-label="Permalink to &quot;DOM 型 XSS&quot;">​</a></h3><h2 id="csrf攻击" tabindex="-1">CSRF攻击 <a class="header-anchor" href="#csrf攻击" aria-label="Permalink to &quot;CSRF攻击&quot;">​</a></h2><p>CSRF（Cross-site request forgery）跨站请求伪造：攻击者诱导受害者进入第三方网站，在第三方网站中，向被攻击网站发送跨站请求。利用受害者在被攻击网站已经获取的注册凭证，绕过后台的用户验证，达到冒充用户对被攻击的网站执行某项操作的目的。</p><h2 id="sql注入" tabindex="-1">SQL注入 <a class="header-anchor" href="#sql注入" aria-label="Permalink to &quot;SQL注入&quot;">​</a></h2><p>漏洞危害：</p><ul><li>可导致数据库被拖</li><li>重要信息泄露</li><li>上传webshell</li><li>执行系统命令，进而控制服务器</li></ul><p>之所以会发生SQL注入，主要因为代码中存在拼接SQL语句的情况。比如：</p><h2 id="点击劫持" tabindex="-1">点击劫持 <a class="header-anchor" href="#点击劫持" aria-label="Permalink to &quot;点击劫持&quot;">​</a></h2><p>点击劫持是指在一个Web页面中隐藏了一个透明的iframe，用外层假页面诱导用户点击，实际上是在隐藏的frame上触发了点击事件进行一些用户不知情的操作。</p><h2 id="url跳转漏洞" tabindex="-1">URL跳转漏洞 <a class="header-anchor" href="#url跳转漏洞" aria-label="Permalink to &quot;URL跳转漏洞&quot;">​</a></h2><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h2><ul><li><a href="https://github.com/YvetteLau/Blog/issues/29" target="_blank" rel="noreferrer">【面试篇】寒冬求职之你必须要懂的 Web 安全</a></li><li><a href="https://www.bilibili.com/video/BV1rg411v7B8" target="_blank" rel="noreferrer">XSS网络攻击 - 原理，类型和实践</a></li><li><a href="https://www.bilibili.com/video/BV1UH4y1M7Dg" target="_blank" rel="noreferrer">跨站请求伪造CSRF攻击的原理以及防范措施</a></li></ul>',22)]))}const p=e(i,[["render",o]]);export{c as __pageData,p as default};
