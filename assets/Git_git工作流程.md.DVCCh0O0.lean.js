import{_ as i,c as s,a3 as e,o as t}from"./chunks/framework.CAwIQbWu.js";const c=JSON.parse('{"title":"Git 工作流程","description":"","frontmatter":{},"headers":[],"relativePath":"Git/git工作流程.md","filePath":"Git/git工作流程.md","lastUpdated":1676881906000}'),l={name:"Git/git工作流程.md"};function h(n,a,p,r,d,o){return t(),s("div",null,a[0]||(a[0]=[e(`<h1 id="git-工作流程" tabindex="-1">Git 工作流程 <a class="header-anchor" href="#git-工作流程" aria-label="Permalink to &quot;Git 工作流程&quot;">​</a></h1><p>至目前为止，笔者使用过三种工作流</p><ul><li>Feature Branching 工作流</li><li>Fork 工作流</li><li>GitFlow 工作流</li></ul><p>目前公司用的是Feature Branching。顾名思义，就是创建分支，在分支上开发需求，等开发好了，测试环境也用此分支来发布，测试通过。发预生产时，merge 到 master 分支上，再在预生产如此做。同理，发生产时也是如此</p><h2 id="feature-branching" tabindex="-1">Feature Branching <a class="header-anchor" href="#feature-branching" aria-label="Permalink to &quot;Feature Branching&quot;">​</a></h2><h3 id="特点" tabindex="-1">特点 <a class="header-anchor" href="#特点" aria-label="Permalink to &quot;特点&quot;">​</a></h3><p>适合小团队，一两个人开发，多人协作就有问题</p><p>任何新的功能点（feature）通过新建分支（branch），再在分支上完成开发</p><h3 id="工作流程" tabindex="-1">工作流程 <a class="header-anchor" href="#工作流程" aria-label="Permalink to &quot;工作流程&quot;">​</a></h3><ul><li>需求发布日期是20220526 <ul><li>以发布日期为分支建立：<code>git checkout -b 20220526</code></li></ul></li><li>在20220526分支上开发需求，本地开发完后，推到远程分支 <ul><li><code>git push origin 20220526</code>（远程分支没有该分支为视为创建此分支）</li></ul></li><li>测试-提bug-修复bug，都在 20220526 分支</li><li>测试完毕，需发布到预生产，上服务器 <ul><li><code>git checkout master</code></li><li><code>git merge 20220526</code></li></ul></li><li>继续预生产测试，后续的生产如上操作</li></ul><h2 id="fork-工作流" tabindex="-1">Fork 工作流 <a class="header-anchor" href="#fork-工作流" aria-label="Permalink to &quot;Fork 工作流&quot;">​</a></h2><h3 id="特点-1" tabindex="-1">特点 <a class="header-anchor" href="#特点-1" aria-label="Permalink to &quot;特点&quot;">​</a></h3><p>开源项目多以此为流程，开发者提交 pr，主仓库管理员合并其代码</p><p>操作繁琐，每个人一个仓库，更适合十几个人以上项目</p><h3 id="工作流程-1" tabindex="-1">工作流程 <a class="header-anchor" href="#工作流程-1" aria-label="Permalink to &quot;工作流程&quot;">​</a></h3><ul><li><p>开发者 fork 项目到自己的仓库</p></li><li><p><code>git clone</code> 到自己的本地仓库</p></li><li><p>并获取原项目（upstream）跟踪原项目代码情况</p><ul><li>自己远程仓库一般别名为 origin，upstream（上游）意味主仓库</li><li><code>git remote add upstream git@...</code></li></ul></li><li><p>在本地仓库上做开发，commit，push</p></li><li><p>同步主仓库代码</p><ul><li><p><code>git pull upstream master</code></p></li><li><p>因为考虑到 commit 的整洁性，会使用 rebase 来合并 commit</p></li><li><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> fetch</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> upstream</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dev</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rebase</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> upstream/dev</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> develop</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">//或者</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> upstream</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> develop</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --rebase</span></span></code></pre></div></li><li><p>这里还要考虑的是合并修改（见下文）</p></li></ul></li><li><p>通过 pull request（pr）提交到主仓库</p></li></ul><h3 id="合并修改" tabindex="-1">合并修改 <a class="header-anchor" href="#合并修改" aria-label="Permalink to &quot;合并修改&quot;">​</a></h3><p>简单来说，就是远程仓库有代码更新，从而会导致我们提交的 Pull Request 时会导致冲突，因此我们可以在提交前获取到原仓库（upstream）最新的代码</p><ul><li><p>切换到 master 分支</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> checkout</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> master</span></span></code></pre></div></li><li><p>以 master 分支为铆点拉去 upstream 远程分支最新的代码</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> upstream</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> master</span></span></code></pre></div></li><li><p>切换回 branch1（自己的开发分支）</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> checkout</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> branch1</span></span></code></pre></div></li><li><p>把 master 的 commit 合并到 branch1：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> merge</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> master</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">//</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 或</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rebase</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> master</span></span></code></pre></div></li><li><p>把更新的代码提交到自己的远程仓库：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> branch1</span></span></code></pre></div></li></ul><blockquote><p>PS：merge 和 rebase 的区别在于，merge 只是做合并提交作用， rebase 会整理分支，让分支更加清晰（rebase 让分支更加清晰优雅）</p></blockquote><h2 id="gitflow流程" tabindex="-1">GitFlow流程 <a class="header-anchor" href="#gitflow流程" aria-label="Permalink to &quot;GitFlow流程&quot;">​</a></h2><h3 id="特点-2" tabindex="-1">特点 <a class="header-anchor" href="#特点-2" aria-label="Permalink to &quot;特点&quot;">​</a></h3><ul><li>分支各司其职，覆盖大部分开发场景</li><li>预期 master 分支中任何 commit 都时可部署的</li><li>严格按照流程执行，出现重大事故的情形会大大降低</li></ul><p>缺点是</p><ul><li>过于繁琐，无法要求所有团队成员按照这个流程严格执行</li><li>违反 git 提倡的 short-lived 分支原则</li><li>master 分支历史记录并不干净，只能通过打 Tag 标记哪些是 master 真正要部署的</li><li>对持续部署和 monorepo 仓库不友好</li></ul><h3 id="工作流程-2" tabindex="-1">工作流程 <a class="header-anchor" href="#工作流程-2" aria-label="Permalink to &quot;工作流程&quot;">​</a></h3><p><img src="https://s2.loli.net/2022/06/25/RvTwKV8WOcCx2fN.png" alt="640"></p><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h2><ul><li><a href="https://github.com/sunyongjian/blog/issues/29" target="_blank" rel="noreferrer">目前使用的 Fork 工作流</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=Mzg5NjAzMjI0NQ==&amp;mid=2247487589&amp;idx=1&amp;sn=88490987ce377baad08dc8b9350721f7&amp;chksm=c0061cfff77195e94d87534024529365a0e58604f6229768678fb366def383a77ffac1ac919f&amp;mpshare=1&amp;scene=1&amp;srcid=0925MZ47hzqmCd61AY9mGz9b&amp;sharer_sharetime=1600992766610&amp;sharer_shareid=778ad5bf3b27e0078eb105d7277263f6&amp;key=240d40e83da786d09da4496c05e0b91df38906258030d1ce47118d9b50b21aee10ad3106a14af992d17c98c5fb6e5bd782fd5c4b2c467e874a1d8569a9e1b7ce8f832c5997f166f27fb08bb68d514412a1455e37048bbf6ef1fd0517fecc4b060eebb33ca7b63d08ead49b938228961861eea1cc51b12ed7e3ec6ffc18f78b53&amp;ascene=1&amp;uin=MTA0NTY0NDM2MQ%3D%3D&amp;devicetype=Windows+10+x64&amp;version=62090529&amp;lang=zh_CN&amp;exportkey=ARE5w%2FKzT4H6mS3wj%2BqiuUU%3D&amp;pass_ticket=IAAAZXPG6kGgyAWoBydfn7Rbr0g%2BoLDkGTN4w7Dz6PJyi1ELnVaDf%2FNhBdahb9W8&amp;wx_header=0" target="_blank" rel="noreferrer">字节研发设施下的 Git 工作流</a></li><li><a href="https://segmentfault.com/a/1190000000736629" target="_blank" rel="noreferrer">如何优雅地在github上贡献代码</a></li><li><a href="https://github.com/firstcontributions/first-contributions/blob/master/translations/README.chs.md" target="_blank" rel="noreferrer">第一次参与开源</a></li></ul>`,29)]))}const g=i(l,[["render",h]]);export{c as __pageData,g as default};
