import{_ as a,c as t,a3 as r,o as n}from"./chunks/framework.CAwIQbWu.js";const h=JSON.parse('{"title":"适配器模式","description":"","frontmatter":{},"headers":[],"relativePath":"DesignPattern/适配器模式.md","filePath":"DesignPattern/适配器模式.md","lastUpdated":1718689615000}'),o={name:"DesignPattern/适配器模式.md"};function s(i,e,l,d,c,p){return n(),t("div",null,e[0]||(e[0]=[r('<h1 id="适配器模式" tabindex="-1">适配器模式 <a class="header-anchor" href="#适配器模式" aria-label="Permalink to &quot;适配器模式&quot;">​</a></h1><p>适配器模式通过把一个类的接口变换成客户端所期待的另一个接口，可以帮我们解决不兼容的问题</p><p>比如 axios 等库都有适配器模式</p><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h2><ul><li><a href="https://refactoringguru.cn/design-patterns/singleton" target="_blank" rel="noreferrer">深入设计模式</a></li></ul>',5)]))}const f=a(o,[["render",s]]);export{h as __pageData,f as default};
